; ########################################################################################
; # Generated by the active disassembly feature of the Exodus emulation platform
; #
; # Creation Date:   2022-7-30 15:16:33
; # Analysis Region: 0x00000000 - 0x00080000
; ########################################################################################

; Note: This file is encoded in Shift-JIS format.  If the below line looks like Japanese text, then
;		the encoding has been set up correctly.
;“ú–{Œê

startOfRom:
	include	"tools/Macros - More CPUs.asm"
	cpu 68000
	include	"build_flags.asm"
	include	"puyo_constants.asm"
	include	"puyo_macros.asm"
	include	"sound/CSP2ASM.asm"
	include	"sound/sound_ids.asm"

vectorTable:
	dc.l	SystemStack
	dc.l	Reset
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	HorizontalInterrupt ; Horizontal Interrupt (IRQ 4)
	dc.l	ErrorTrap
	dc.l	VerticalInterrupt ; Vertical Interrupt (IRQ 6)
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
	dc.l	ErrorTrap
headerBegin:
	dc.b	"SEGA MEGA DRIVE " ; System
	dc.b    "(C)SEGA 1992.SEP" ; Copyright

	; Game Title (Domestic)
	dc.b    "‚Õ‚æ‚Õ‚æ                                        "
	
	 ; Game Title (Overseas)
	dc.b    "PUYOPUYO                                        "
	
	dc.b    "GM G-4082  -00" ; Serial
checksum:
	dc.w	$BCE7 ; Checksum (This will get patched later)
	
	dc.b	"J               " ; Device Support
	dc.l    startOfRom
	dc.l	endOfRom-1
	dc.l    $FF0000  ; RAM start address
    dc.l    $FFFFFF  ; RAM end address
	dc.b    "            " ; Extra Memory
	dc.b    "            " ; Modem Support
	dc.b    "                                        " ; Reserved
	dc.b    "J  " ; Region Support
	dc.b	"             " ; Reserved
Reset:
	TST.l	$00A10008
	BNE.b	@loc_0000020F
	TST.w	$00A1000C
@loc_0000020F:
	BNE.b	@SkipInit
	LEA	@SetupValues(PC), A5
	MOVEM.w	(A5)+, D5/D6/D7
	MOVEM.l	(A5)+, A0/A1/A2/A3/A4
	MOVE.b	-$10FF(A1), D0 ; Grab hardware revision
	ANDI.b	#$0F, D0
	BEQ.b	@SkipSecurity ; Skip TMSS pass if the console doesn't need it.
	MOVE.l	#'SEGA', $2F00(A1)
@SkipSecurity:
	MOVE.w	(A4), D0
	MOVEQ	#0, D0
	MOVEA.l	D0, A6
	MOVE.l	A6, USP
	MOVEQ	#$00000017, D1
@VDPInitLoop:
	MOVE.b	(A5)+, D5
	MOVE.w	D5, (A4)
	ADD.w	D7, D5
	DBF	D1, @VDPInitLoop
	MOVE.l	(A5)+, (A4)
	MOVE.w	D0, (A3)
	MOVE.w	D7, (A1)
	MOVE.w	D7, (A2)
@WaitForZ80:
	BTST.b	D0, (A1)
	BNE.b	@WaitForZ80
	MOVEQ	#$00000025, D2
@Z80InitLoop:
	MOVE.b	(A5)+, (A0)+
	DBF	D2, @Z80InitLoop
	MOVE.w	D0, (A2)
	MOVE.w	D0, (A1)
	MOVE.w	D7, (A2)
@ClearRAMLoop:
	MOVE.l	D0, -(A6)
	DBF	D6, @ClearRAMLoop
	MOVE.l	(A5)+, (A4)
	MOVE.l	(A5)+, (A4)
	MOVEQ	#$0000001F, D3
@ClearCRAMLoop:
	MOVE.l	D0, (A3)
	DBF	D3, @ClearCRAMLoop
	MOVE.l	(A5)+, (A4)
	MOVEQ	#$00000013, D4
@ClearVSRAMLoop:
	MOVE.l	D0, (A3)
	DBF	D4, @ClearVSRAMLoop
	MOVEQ	#3, D5
@PSGInitLoop:
	MOVE.b	(A5)+, $11(A3)
	DBF	D5, @PSGInitLoop
	MOVE.w	D0, (A2)
	MOVEM.l	(A6), D0/D1/D2/D3/D4/D5/D6/D7/A0/A1/A2/A3/A4/A5/A6
	MOVE	#$2700, SR
@SkipInit:
	BRA.b	EntryPoint
@SetupValues:
	dc.w	$8000
	dc.w	$3FFF
	dc.w	$0100
	
	dc.l    Z80Ram
	dc.l    Z80BusReq
	dc.l	Z80Reset
	dc.l    vdpData1
	dc.l    vdpControl1
	
	dc.b	$04
    dc.b    $14
    dc.b    $30
    dc.b    $3C, $07
	dc.b	$6C
	dc.b	$00 
	dc.b	$00, $00, $00, $FF, $00, $81, $37, $00, $01, $01, $00, $00, $FF, $FF, $00, $00, $80, $40, $00, $00, $80, $AF, $01, $D9, $1F, $11, $27, $00, $21, $26, $00, $F9 ;0x20
	dc.b	$77, $ED, $B0, $DD, $E1, $FD, $E1, $ED, $47, $ED, $4F, $D1, $E1, $F1, $08, $D9, $C1, $D1, $E1, $F1, $F9, $F3, $ED, $56, $36, $E9, $E9, $81, $04, $8F, $02, $C0 ;0x40
	dc.b	$00, $00, $00, $40, $00, $00, $10, $9F, $BF, $DF, $FF ;0x60
EntryPoint:
	TST.w	vdpControl1
	ORI	#$0700, SR
	BSR.w	System_WaitForVIntOccurVDPBit
	BSR.w	loc_00000454
	ANDI	#$F8FF, SR
MainLoop:
	BSR.w	WaitForVint
	BSR.w	CheckPauseGame
	BSR.w	UpdateControllers
	BSR.w	Bytecode_Run
	BSR.w	ObjSys_UpdateObjs
	JSR	UpdateSprites
	BRA.b	MainLoop

WaitForVint:
	LEA	rFrameCount, A0
	MOVE.w	(A0), D0
@Wait:
	CMP.w	(A0), D0
	BEQ.b	@Wait
	RTS
	
Record_InitData:
	LEA	@RecordScreenData, A1
	LEA	$00FFFC04, A2
	MOVE.w	#$0027, D0
@Loop:
	MOVE.l	(A1)+, (A2)+
	DBF	D0, @Loop
	RTS
@RecordScreenData:
    ; [Name - 6 Bytes, $FF Terminated], [Score - 4 Bytes], [Block - 2 Bytes], [Padding? - 2 Bytes]
    ; The name can be longer than 3 letters, although this isn't possible without hacking.
	dc.w 	$1301, $14FF, $FFFF, $0000, $48A2, $01A0, $0000, $0000
    dc.w    $0C15, $0CFF, $FFFF, $0000, $4250, $015C, $0000, $0000
	dc.w 	$0D09, $0EFF, $FFFF, $0000, $305E, $00CC, $0000, $0000
    dc.w    $1709, $14FF, $FFFF, $0000, $242C, $0089, $0000, $0000
	dc.w 	$0E01, $13FF, $FFFF, $0000, $19FA, $0098, $0000, $0000

    dc.w    $1A0F, $0EFF, $FFFF, $0001, $A75E, $022E, $0000, $0000
	dc.w 	$0801, $10FF, $FFFF, $0001, $9B9F, $01F3, $0000, $0000 
    dc.w    $0412, $01FF, $FFFF, $0001, $9434, $0180, $0000, $0000
	dc.w 	$1308, $05FF, $FFFF, $0001, $8621, $0195, $0000, $0000
    dc.w    $1A0F, $08FF, $FFFF, $0001, $7BB0, $016F, $0000, $0000
	
Option_InitSettings:
	MOVE.b	#2, rOption_ComputerLevel
	MOVE.b	#1, rOption_2PlayerMode
	MOVE.b	#0, rOption_VoicesEnabled
	MOVE.b	#2, rOption_Player1AButton
	MOVE.b	#1, rOption_Player1BButton
	MOVE.b	#2, rOption_Player1CButton
	MOVE.b	#2, rOption_Player2AButton
	MOVE.b	#1, rOption_Player2BButton
	MOVE.b	#2, rOption_Player2CButton
	RTS

System_WaitForVIntOccurVDPBit:
	NOP
	NOP
	NOP
	NOP
	MOVE.w	vdpControl1, D0
	BTST.l	#1, D0
	BNE.b	System_WaitForVIntOccurVDPBit
	RTS

loc_00000454:
	LEA	rOption_SoundTestEnabled, A1
	JSR	loc_0001DC32
	CMP.w	$00FFFC00, D0
	BEQ.w	loc_000004BC

	LEA	$00FFFE02, A1
	JSR	loc_0001DC32
	CMP.w	$00FFFE00, D0
	BEQ.w	loc_00000482
	
	BSR.w	loc_0000049C
loc_00000482:
	LEA	$00FFFE00, A1
	LEA	$00FFFC00, A2
	MOVE.w	#$002B, D0
loc_00000492:
	MOVE.l	(A1)+, (A2)+
	DBF	D0, loc_00000492
	BRA.w	loc_000004BC
loc_0000049C:
	LEA	$00FFFC00, A0
	MOVEQ	#0, D0
	MOVE.w	#$00FF, D1
loc_000004A8:
	MOVE.l	D0, (A0)+
	DBF	D1, loc_000004A8
	BSR.w	Record_InitData
	BSR.w	Option_InitSettings
	JMP	loc_0001DC02
loc_000004BC:
	LEA	$00FF0000, A0
	MOVEQ	#0, D0
	MOVE.w	#$3BFF, D1
loc_000004C8:
	MOVE.l	D0, (A0)+
	DBF	D1, loc_000004C8
	BSR.w	Video_InitVDP
	BSR.w	Bytecode_Init
	JSR	ResetUpdateSprites
	JSR	SndDrv_LoadDriver
	BSR.w	loc_00001046
	JSR	UpdateSprites
	BSR.w	Video_SendSpriteTableToVRAM
	BSR.w	Video_LoadQueuedPalettes
	LEA	rVDPRegBTbl+rvtMode2, A0
	ORI.b	#$40, (A0)
	MOVE.w	#$8100, D0
	MOVE.b	(A0), D0
	MOVE.w	D0, vdpControl1
	RTS

ErrorTrap:
	ORI	#$0700, SR
	BSR.w	InvertPalette
	BSR.w	Video_LoadQueuedPalettes
ErrorTrapLoop:
	NOP
	NOP
	BRA.b	ErrorTrapLoop
	
 ; Checks for inserted coins (Leftover from arcade version)
 ; Changing ANDI #$FFFE, SR to ORI.w #1, SR will make the 
 ; game think that there are no coins inserted.
Arcade_CheckCoins:
	ANDI	#$FFFE, SR
	RTS


VerticalInterrupt:
	ORI	#$0700, SR
	MOVEM.l	A6/A5/A4/A3/A2/A1/A0/D7/D6/D5/D4/D3/D2/D1/D0, -(A7)
	ADDQ.w	#1, rFrameCount
	BSR.w	loc_0000064C ; Something to do with the sega logo
	BSR.w	UpdateFSMTimer
	JSR	SndDrv_Update
	BSR.w	Video_SendSpriteTableToVRAM ; Sprite Related
	BSR.w	Video_UpdateVertScroll
	BSR.w	Video_UpdateHoriScroll
	BSR.w	Video_LoadQueuedPalettes
	JSR		Video_LoadQueuedBgMaps
	BSR.w	UpdateRNG
	TST.w	rRunningOptionsMenuCode
	BEQ.w	@NotRunningOptionsCode
	BSR.w	Option_LoadTmpPlaneToVram
@NotRunningOptionsCode:
	MOVEM.l	(A7)+, D0/D1/D2/D3/D4/D5/D6/D7/A0/A1/A2/A3/A4/A5/A6
	ANDI	#$F8FF, SR
	RTR

Option_LoadTmpPlaneToVram:
	TST.w	rZ80IsBeingUpdated ; Were we interrupted in the middle of the Z80 update function?
	BNE.w	@AvoidDMA ; If so, copy it manually
	MOVE.w	#$0100, Z80BusReq ; Stop the Z80
@WaitZ80Stop:
	BTST.b	#0, Z80BusReq
	BNE.b	@WaitZ80Stop
	LEA	vdpControl1, A0
	MOVE.w	#$8100, D0  ; Prepare write to VDP mode reg 2
	MOVE.b	rVDPRegBTbl+rvtMode2, D0
	ORI.b	#$10, D0 ; Force enabling DMA operations
	MOVE.w	D0, (A0)
	MOVE.w	#$9407, (A0) ; Set DMA length to $700 words
	MOVE.w	#$9300, (A0)
	MOVE.w	#$96E0, (A0)
	MOVE.w	#$9500, (A0) ; Set source address to $FFC000 as a DMA transfer
	MOVE.w	#$977F, (A0) 
	MOVE.w	#$4000, (A0) ; Set destination in VRAM
	MOVE.w	#$0083, rTmpVDPDmaDest ; Write lower word of dest cmd to RAM
	MOVE.w	rTmpVDPDmaDest, (A0) ; Set VRAM dest to $C000
	MOVE.w	#$8100, D0
	MOVE.b	rVDPRegBTbl+rvtMode2, D0
	MOVE.w	D0, (A0) ; Restore old VDP mode reg 2 value
	MOVE.w	#0, Z80BusReq ; Unpause the Z80
	RTS
@AvoidDMA:
	LEA	rPlaneBuffer, A1
	MOVE.w	#$4000, vdpControl1 ; Set VRAM destination
	MOVE.w	#3, vdpControl1 ; Set address to $C000
	MOVE.w	#$06FF, D0 ; Set length to $700 words
@Loop:
	MOVE.w	(A1)+, vdpData1
	DBF	D0, @Loop
	RTS
	
UpdateFSMTimer:
	MOVE.b	$00FF0144, D0
	OR.b	$00FF0145, D0
	BMI.w	loc_0000064A
	ADDQ.w	#1, rFrameTimer
	BCC.w	@FrameTimerNotMax
	SUBQ.w	#1, rFrameTimer
@FrameTimerNotMax:
	CLR.l	D0
	MOVE.w	rFrameTimer, D0
	DIVU.w	#$003C, D0
	MOVE.w	D0, rSecondTimer
	CLR.l	D0
	MOVE.w	rSecondTimer, D0
	DIVU.w	#$003C, D0
	MOVE.l	D0, rMinuteTimer
loc_0000064A:
	RTS
	
loc_0000064C:
	CLR.w	D0
	MOVE.b	$00FF013A, D0
	BEQ.w	loc_0000070C
	MOVE.w	D0, $00FF0140
	MOVE.l	#$00FF3000, $00FF013C
	TST.b	$00FF013B
	BEQ.w	loc_0000067C
	MOVE.l	#$00FF3200, $00FF013C
loc_0000067C:
	MOVE.w	#$8000, D0
	MOVE.b	rVDPRegBTbl+rvtMode1, D0
	ORI.b	#$10, D0
	MOVE.w	D0, vdpControl1
	MOVE.b	D0, rVDPRegBTbl+rvtMode1
	MOVE.w	#$8B00, D0
	MOVE.b	rVDPRegBTbl+rvtMode3, D0
	ANDI.b	#$FB, D0
	MOVE.b	D0, rVDPRegBTbl+rvtMode3
	RTS
	
HorizontalInterrupt:
	ORI	#$0700, SR
	TST.b	$00FF013A
	BEQ.w	loc_00000706
	MOVEM.l	A0, -(A7)
	MOVE.l	#$40000010, vdpControl1
	MOVEA.l	$00FF013C, A0
	MOVE.w	(A0), vdpData1
	ADDQ.w	#2, $00FF013E
	SUBQ.w	#1, $00FF0140
	BNE.w	loc_00000702
	MOVEM.l	D0, -(A7)
	BSR.w	loc_0000070C
	MOVEM.l	(A7)+, D0
	MOVE.l	#$40000010, vdpControl1
	MOVE.w	#0, vdpData1
loc_00000702:
	MOVEM.l	(A7)+, A0
loc_00000706:
	ANDI	#$F8FF, SR
	RTR
loc_0000070C:
	MOVE.w	#$8000, D0
	MOVE.b	rVDPRegBTbl+rvtMode1, D0
	ANDI.b	#$EF, D0
	MOVE.w	D0, vdpControl1
	MOVE.b	D0, rVDPRegBTbl+rvtMode1
	RTS

; Dead Code: Reloads all global palettes that are not currently queued for reloading.
dead_ReloadAllNonQueuedGPal:
	MOVE.w #3, D0
	LEA rPalQueueTable, A0
	LEA rPalQueueMainEnt1, A1
@dead_NextPal:
	TST.w (A0)
	BNE.w @dead_AlreadyQueued
	MOVE.w #-1, $00(A0)
	MOVE.l A1, $02(A0)
@dead_AlreadyQueued:
	ADDA.l #6, A0
	ADDA.l #$20, A1
	DBF D0, @dead_NextPal
	RTS

Video_LoadQueuedPalettes:
	LEA	rPalQueueTable, A2
	LEA	rPalQueueMainEnt1, A3
	MOVE.w	#3, D0
	MOVEQ	#0, D1
@NextPal:
	TST.w	(A2)
	BEQ.w	@NoUpdate
	CLR.w	(A2)
	BSR.w	@LoadPal
@NoUpdate:
	ADDA.l	#6, A2
	ADDA.l	#$00000020, A3
	ADDI.b	#$20, D1
	DBF	D0, @NextPal
	RTS
@LoadPal:
	MOVEM.l	A3, -(A7)
	MOVEA.l	$2(A2), A4
	MOVE.w	#$C000, D2
	MOVE.b	D1, D2
	MOVE.w	D2, vdpControl1
	MOVE.w	#0, vdpControl1
	MOVE.w	#$000F, D2
@NextColor:
	MOVE.w	(A4), vdpData1
	MOVE.w	(A4)+, (A3)+
	DBF	D2, @NextColor
	MOVEM.l	(A7)+, A3
	RTS

Video_SendSpriteTableToVRAM:
	TST.w	rSpriteTableWordLength
	BNE.w	loc_000007CC
	RTS
loc_000007CC:
	TST.w	rZ80IsBeingUpdated
	BNE.w	loc_00000850
	MOVE.w	#$0100, Z80BusReq
loc_000007DE:
	BTST.b	#0, Z80BusReq
	BNE.b	loc_000007DE
	LEA	vdpControl1, A0
	; Turn On DMA
	MOVE.w	#$8100, D0
	MOVE.b	rVDPRegBTbl+rvtMode2, D0
	ORI.b	#$10, D0
	MOVE.w	D0, (A0)
	; Set DMA High Length
	MOVE.w	#$9400, D0
	MOVE.b	rSpriteTableWordLength, D0
	MOVE.w	D0, (A0)
	; Set DMA Low Length
	MOVE.w	#$9300, D0
	MOVE.b	rSpriteTableWordLength+1, D0
	MOVE.w	D0, (A0)
	; Set DMA Source Address (FF0E86)
	MOVE.w	#$9687, (A0) ; 10E
	MOVE.w	#$9543, (A0) ; 86
	MOVE.w	#$977F, (A0) ; FE (68k to VRAM)
	; Set Dest VRAM address to BC00 (sprite table)
	MOVE.w	#$7C00, (A0)
	MOVE.w	#$0082, rTmpVDPDmaDest
	MOVE.w	rTmpVDPDmaDest, (A0)
	; Turn Off DMA
	MOVE.w	#$8100, D0
	MOVE.b	rVDPRegBTbl+rvtMode2, D0
	MOVE.w	D0, (A0)
	; Exit Out
	MOVE.w	#0, Z80BusReq
	CLR.w	rSpriteTableWordLength
	RTS
loc_00000850:
	LEA	rSpriteTable, A1
loc_00000856:
	MOVE.w	#$7C00, vdpControl1
	MOVE.w	#2, vdpControl1
	MOVE.w	rSpriteTableWordLength, D0
	SUBQ.w	#1, D0
loc_0000086E:
	MOVE.w	(A1)+, vdpData1
loc_00000874:
	DBF	D0, loc_0000086E
	CLR.w	rSpriteTableWordLength
	RTS

Video_UpdateVertScroll:
	; Load any changes made by the game for M3 and M4 regs
    MOVE.w	#$8B00, D0
	MOVE.b	rVDPRegBTbl+rvtMode3, D0
	MOVE.w	D0, vdpControl1
	MOVE.w	#$8C00, D0
	MOVE.b	rVDPRegBTbl+rvtMode4, D0
	MOVE.w	D0, vdpControl1
    ; Check for Vertical Scroll Type
	BTST.b	#2, rVDPRegBTbl+rvtMode3
	BNE.w	@ScanlineScroll
    ; Doing full screen scroll.
	MOVE.l	#$40000010, vdpControl1
	MOVE.w	rScrollYScanFront, vdpData1
	MOVE.w	rScrollYScanBack, vdpData1
	RTS
@ScanlineScroll:
	TST.w	rZ80IsBeingUpdated
	BNE.w	@ManualDMACopy
	MOVE.w	#$0100, Z80BusReq
@WaitZ80Stop:
	BTST.b	#0, Z80BusReq
	BNE.b	@WaitZ80Stop
	LEA	vdpControl1, A0
	MOVE.w	#$8100, D0
	MOVE.b	rVDPRegBTbl+rvtMode2, D0
	ORI.b	#$10, D0
	MOVE.w	D0, (A0)
	MOVE.w	#$9400, (A0)
	MOVE.w	#$9328, (A0)
	MOVE.w	#$9682, (A0)
	MOVE.w	#$95E9, (A0)
	MOVE.w	#$977F, (A0)
	MOVE.w	#$4000, (A0)
	MOVE.w	#$0090, rTmpVDPDmaDest
	MOVE.w	rTmpVDPDmaDest, (A0)
	MOVE.w	#$8100, D0
	MOVE.b	rVDPRegBTbl+rvtMode2, D0
	MOVE.w	D0, (A0)
	MOVE.w	#0, Z80BusReq
	RTS
@ManualDMACopy:
	LEA	rScrollYScanFront, A1
	MOVE.l	#$40000010, vdpControl1
	MOVE.w	#$0027, D0
@Loop:
	MOVE.w	(A1)+, vdpData1
	DBF	D0, @Loop
	RTS

Video_UpdateHoriScroll:
	BTST.b	#1, rVDPRegBTbl+rvtMode3
	BNE.w	@ScrollEveryScanline
	MOVE.w	#$7800, vdpControl1
	MOVE.w	#2, vdpControl1 ; Set VRAM Write to B800
	MOVE.w	rScrollXScanFront, vdpData1
	MOVE.w	rScrollXScanBack, vdpData1 ; Sets values for a full screen scroll.
	RTS
@ScrollEveryScanline:
	TST.w	rZ80IsBeingUpdated
	BNE.w	@ManualDMACopy
	MOVE.w	#$0100, Z80BusReq
@WaitZ80Stop:
	BTST.b	#0, Z80BusReq
	BNE.b	@WaitZ80Stop
	LEA	vdpControl1, A0
	MOVE.w	#$8100, D0
	MOVE.b	rVDPRegBTbl+rvtMode2, D0
	ORI.b	#$10, D0
	MOVE.w	D0, (A0)
	MOVE.w	#$9402, (A0)
	MOVE.w	#$9300, (A0)
	MOVE.w	#$9683, (A0)
	MOVE.w	#$9511, (A0)
	MOVE.w	#$977F, (A0)
	MOVE.w	#$7800, (A0)
	MOVE.w	#$0082, rTmpVDPDmaDest
	MOVE.w	rTmpVDPDmaDest, (A0)
	MOVE.w	#$8100, D0
	MOVE.b	rVDPRegBTbl+rvtMode2, D0
	MOVE.w	D0, (A0)
	MOVE.w	#0, Z80BusReq
	RTS
@ManualDMACopy:
	LEA	rScrollXScanFront, A1
	MOVE.w	#$7800, vdpControl1
	MOVE.w	#2, vdpControl1
	MOVE.w	#$01FF, D0
@Loop:
	MOVE.w	(A1)+, vdpData1
	DBF	D0, @Loop
	RTS
	
; Large Dead Code
; Note: Nothing that I know of in the disassembly references $FF0138.
dead_00000A20:
	tst.b ($00FF0138).l
	bne.w @dead_00000A2C
	rts
@dead_00000A2C:
	clr.b ($00FF0138).l
	move.w #$100, (Z80BusReq)
@dead_00000A3A:
	btst.b #0, (Z80BusReq)
	bne.b @dead_00000A3A
	lea (vdpControl1), a0
	move.w #$8100, d0
	move.b (rVDPRegBTbl+rvtMode2), d0
	ori.b #$10, d0
	move.w d0, (a0)
	move.w #$9404, (a0)
	move.w #$9300, (a0)
	move.w #$96E8, (a0)
	move.w #$9500, (a0)
	move.w #$977F, (a0)
	move.w #$5000, (a0)
	move.w #$80, (rTmpVDPDmaDest)
	move.w (rTmpVDPDmaDest), (a0)
	move.w #$8100, d0
	move.b (rVDPRegBTbl+rvtMode2), d0
	move.w d0, (a0)
	move.w #0, (Z80BusReq)
	lea ($00FFD000), a1
	lea ($00FF3000), a2
	move.w ($00FF0138), d0
	mulu.w #$800, d0
	adda.l d0, a2
	move.w #$3FF, d0
@dead_00000AB0:
	move.w (a2)+, (a1)+
	dbf d0, @dead_00000AB0
	move.w #$100, (Z80BusReq)
@dead_00000ABE:
	btst.b #0, (Z80BusReq)
	bne.b @dead_00000ABE
	lea (vdpControl1), a0
	move.w #$8100, d0
	move.b (rVDPRegBTbl+rvtMode2), d0
	ori.b #$10, d0
	move.w d0, (a0)
	move.w #$9404, (a0)
	move.w #$9300, (a0)
	move.w #$96E8, (a0)
	move.w #$9500, (a0)
	move.w #$977F, (a0)
	move.w #$6000, (a0)
	move.w #$80, (rTmpVDPDmaDest)
	move.w (rTmpVDPDmaDest), (a0)
	move.w #$8100, d0
	move.b (rVDPRegBTbl+rvtMode2), d0
	move.w d0, (a0)
	move.w #0, (Z80BusReq)
	lea ($00FFD000), a1
	lea ($00FF3000), a2
	move.w ($00FF0138), d0
	addq.b #8, d0
	andi.b #$F, d0
	mulu.w #$800, d0
	adda.l d0, a2
	move.w #$3FF, d0
@dead_00000B3A:
	move.w (a2)+, (a1)+
	dbf d0, @dead_00000B3A
	move.w #$100, (Z80BusReq)
@dead_00000B48:
	btst.b #0, (Z80BusReq)
	bne.b @dead_00000B48
	lea (vdpControl1), a0
	move.w #$8100, d0
	move.b (rVDPRegBTbl+rvtMode2), d0
	ori.b #$10, d0
	move.w d0, (a0)
	move.w #$9404, (a0)
	move.w #$9300, (a0)
	move.w #$96E8, (a0)
	move.w #$9500, (a0)
	move.w #$977F, (a0)
	move.w #$6800, (a0)
	move.w #$80, (rTmpVDPDmaDest)
	move.w (rTmpVDPDmaDest), (a0)
	move.w #$8100, d0
	move.b (rVDPRegBTbl+rvtMode2), d0
	move.w d0, (a0)
	move.w #0, (Z80BusReq)
	rts
	
Video_ClearScrollTables:
	MOVE.w	#$01FF, D0
	LEA	rScrollXScanFront, A1
@ClearX:
	CLR.w	(A1)+
	DBF	D0, @ClearX
    ; See build_flags.asm for more details.
    if fFixClearScrollFunc == 1
        MOVE.w  #$0027, D0
    else
	    MOVE.w	#$004F, D0
    endif
	LEA	rScrollYScanFront, A1
@ClearY:
	CLR.w	(A1)+
	DBF	D0, @ClearY
	RTS

Video_EnableVDPHighlight:
	MOVE.w	#$8C00, D0
	MOVE.b	rVDPRegBTbl+rvtMode4, D0
	ORI.b	#8, D0
	MOVE.b	D0, rVDPRegBTbl+rvtMode4
	RTS
Video_DisableVDPHighlight:
	MOVE.w	#$8C00, D0
	MOVE.b	rVDPRegBTbl+rvtMode4, D0
	ANDI.b	#$F7, D0
	MOVE.b	D0, rVDPRegBTbl+rvtMode4
	RTS

Video_QueueBgMapFromId:
	ORI	#$0700, SR
	MOVEM.l	A3/A2/D3/D2/D1, -(A7)
	MOVE.b	#$FF, D2
	; Load pointer to BG Map table
	LEA	tbl_bgMappings, A2
	LSL.w	#2, D0
	MOVEA.l	(A2,D0.w), A3
	
	; Get length of selected table
	MOVE.w	(A3)+, D0
	
	; Load queue table index into D1
	LEA	$00FF0CDE, A2
	MOVE.w	(A2), D1
	
	; Add the BG table length into D1
	ADD.w	D0, D1
	
	; If index is less than the max, go to C2A
	CMPI.w	#$0041, D1
	BCS.w	@IndexNotInvalid
	CLR.b	D2
	SUBI.w	#$0040, D1
	MOVE.w	D1, D0
	MOVE.w	#$0040, D1
@IndexNotInvalid:
	; Move the original CDE table index into D3
	MOVE.w	(A2), D3
	
	; Write the new index into the table
	MOVE.w	D1, (A2)+
	
	; Calculate the start of the copy operation
	LSL.w	#2, D3
	ADDA.w	D3, A2
	SUBQ.w	#1, D0
	BCS.w	@Finish

	; Copy from the bg table to the new index
@LoadTable:
	MOVE.l	(A3)+, (A2)+
	DBF	D0, @LoadTable
@Finish:
	MOVE.b	D2, D0
	MOVEM.l	(A7)+, D1/D2/D3/A2/A3
	ANDI	#$F8FF, SR
	SUBQ.b	#1, D0
	RTS

Video_QueueBgMapSpecial:
	CMPI.w	#$0040, $00FF0CDE
	BCS.b	@QueueNotFull
	ORI	#1, SR
	RTS
@QueueNotFull:
	ORI	#$0700, SR
	MOVEM.l	A2/D1, -(A7)
	LEA	$00FF0CDE, A2
	MOVE.w	(A2), D1
	ADDQ.w	#1, (A2)
	LSL.w	#2, D1
	MOVE.l	D0, $2(A2,D1.w)
	MOVEM.l	(A7)+, D1/A2
	ANDI	#$F8FF, SR
	ANDI	#$FFFE, SR
	RTS
	
System_DecompressComp:
	ORI	#$0700, SR
	MOVE.w	D0, D1
	ANDI.w	#$3FFF, D1
	ORI.w	#$4000, D1
	MOVE.w	D1, vdpControl1
	LSL.l	#2, D0
	SWAP	D0
	ANDI.w	#3, D0
	MOVE.w	D0, vdpControl1
	LEA	$00FF0000, A1
	LEA	$00FF0100, A2
	CLR.w	D0
	CLR.w	D1
gfxDecomp_MainLoop:
	MOVE.b	(A0)+, D2
	TST.b	D2
	BMI.w	loc_00000CF0
	BNE.w	loc_00000CC6
	ANDI	#$F8FF, SR
	RTS
	
loc_00000CC6:
	ANDI.w	#$007F, D2
	SUBQ.w	#1, D2
loc_00000CCC:
	MOVE.b	(A0)+, D4
	MOVE.b	D4, (A2,D1.w)
	ADDQ.b	#1, D1
	BTST.l	#2, D1
	BEQ.w	loc_00000CE4
	CLR.b	D1
	MOVE.l	(A2), vdpData1
loc_00000CE4:
	MOVE.b	D4, (A1,D0.w)
	ADDQ.b	#1, D0
	DBF	D2, loc_00000CCC
	BRA.b	gfxDecomp_MainLoop
	
loc_00000CF0:
	ANDI.w	#$007F, D2
	ADDQ.w	#2, D2
	MOVE.w	D0, D3
	SUB.b	(A0)+, D3
	SUBQ.b	#1, D3
loc_00000CFC:
	MOVE.b	(A1,D3.w), D4
	MOVE.b	D4, (A2,D1.w)
loc_00000D04:
	ADDQ.b	#1, D1
	BTST.l	#2, D1
	BEQ.w	loc_00000D16
	CLR.b	D1
	MOVE.l	(A2), vdpData1
loc_00000D16:
	MOVE.b	D4, (A1,D0.w)
	ADDQ.b	#1, D0
	ADDQ.b	#1, D3
	DBF	D2, loc_00000CFC
	BRA.b	gfxDecomp_MainLoop
	


Video_InitVDP:
	CLR.w	D0
	BSR.w	Video_SetVDPState
	BSR.w	ClearGPal0ReloadAll
	RTS

Bytecode_SetVDPMode:
	ORI	#$0700, SR
	BSR.w	Video_SetVDPState
	LEA	rVDPRegBTbl+rvtMode2, A0
	ORI.b	#$40, (A0)
	MOVE.w	#$8100, D0
	MOVE.b	(A0), D0
	MOVE.w	D0, vdpControl1
	ANDI	#$F8FF, SR
	RTS

Video_SetVDPState:
	LSL.w	#2, D0
	MOVEA.l	vdp_vdpRegTable(PC,D0.w), A2
	LEA	rVDPRegBTbl, A3
	MOVE.w	#$0012, D0
loc_00000D64:
	MOVE.w	(A2)+, D1
	MOVE.w	D1, vdpControl1
	MOVE.b	D1, (A3)+
	DBF	D0, loc_00000D64
	CLR.l	rScrollYScanFront
	CLR.l	rScrollXScanFront
	RTS
vdp_vdpRegTable:
	dc.l	Video_InitVDPValues
	dc.l	loc_00000DB6
	dc.l	loc_00000DDC
	dc.l	loc_00000E02
Video_InitVDPValues:
	dc.w	$8004, $8124, $8230, $833C, $8407, $855E, $8600, $8700, $8800, $8900, $8A00, $8B03, $8C81, $8D2E, $8E00, $8F02, $9003, $9100, $9200 
loc_00000DB6:
	dc.w	$8004, $8124, $8230, $833C, $8407, $855E, $8600, $8700, $8800, $8900, $8A00, $8B00, $8C89, $8D2E, $8E00, $8F02, $9011, $9100, $9200 
loc_00000DDC:
	dc.w	$8004, $8124, $8230, $833C, $8407, $855E, $8600, $8700, $8800, $8900, $8A00, $8B00, $8C81, $8D2E, $8E00, $8F02, $9001, $918E, $9292
loc_00000E02:
	dc.w 	$8004, $8124, $8230, $833C, $8407, $855E, $8600, $8700, $8800, $8900, $8A00, $8B00, $8C81, $8D2E, $8E00, $8F02, $9003, $9192, $9294
loc_00000E28:
	LEA	loc_00000EB4, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCC.w	loc_00000E38
	RTS
loc_00000E38:
	ANDI.b	#7, D2
	ADDQ.b	#1, D2
	MOVE.b	D2, $2B(A1)
	BRA.w	loc_00000E5C
loc_00000E46:
	LEA	loc_00000EB4, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCC.w	loc_00000E56
	RTS
loc_00000E56:
	MOVE.w	#8, $2A(A1)
loc_00000E5C:
	ANDI.w	#3, D0
	MOVE.w	D0, $8(A1)
	MOVE.b	D1, $29(A1)
	MULU.w	#$0082, D0
	LEA	$00FF0AD6, A3
	ADDA.l	D0, A3
	MOVE.l	A3, $E(A1)
	ADDQ.w	#1, (A3)
	MOVE.w	(A3), $12(A1)
	MOVEM.l	A2, -(A7)
	CLR.l	D0
	MOVE.w	$8(A1), D0
	LSL.l	#5, D0
	LEA	rPalQueueMainEnt1, A2
	ADDA.l	D0, A2
	ADDA.l	#2, A3
	BSR.w	loc_00000F52
	MOVEM.l	(A7)+, A2
	MOVEA.l	$E(A1), A3
	ADDA.l	#$00000032, A3
	BSR.w	loc_00000F52
	BSR.w	loc_00000F2E
	RTS
loc_00000EB4:
	MOVE.w	$12(A0), D0
	MOVEA.l	$E(A0), A2
	CMP.w	(A2), D0
	BNE.w	ObjSys_DeleteObjectA0
	ADDQ.w	#1, $26(A0)
	MOVE.w	$28(A0), D0
	CMP.w	$26(A0), D0
	BCS.w	loc_00000ED4
	RTS
loc_00000ED4:
	CLR.w	$26(A0)
	BSR.w	loc_00000EF0
	SUBQ.w	#1, $2A(A0)
	BEQ.w	loc_00000EE6
	RTS
loc_00000EE6:
	MOVEA.l	$E(A0), A2
	CLR.w	(A2)
	BRA.w	ObjSys_DeleteObjectA0
loc_00000EF0:
	MOVEA.l	$E(A0), A2
	MOVEA.l	A2, A3
	ADDA.l	#2, A2
	ADDA.l	#$00000032, A3
loc_00000F02:
	MOVE.w	#$002F, D0
loc_00000F06:
	MOVE.b	(A3,D0.w), D1
	ADD.b	D1, (A2,D0.w)
	DBF	D0, loc_00000F06
	ADDA.l	#$00000030, A3
	BSR.w	loc_00000F7A
	MOVEA.l	$E(A0), A2
	ADDA.l	#$00000062, A2
	MOVE.w	$8(A0), D0
	BRA.w	Video_LoadPaletteIntoIndex
loc_00000F2E:
	MOVEA.l	$E(A1), A2
	MOVEA.l	A2, A3
	ADDA.l	#2, A2
	ADDA.l	#$00000032, A3
	MOVE.w	#$002F, D0
loc_00000F44:
	MOVE.b	(A3), D1
	SUB.b	(A2)+, D1
	ASR.b	#3, D1
	MOVE.b	D1, (A3)+
	DBF	D0, loc_00000F44
	RTS
loc_00000F52:
	MOVE.w	#$000F, D0
loc_00000F56:
	MOVE.b	(A2)+, D1
	LSL.b	#3, D1
	ANDI.b	#$70, D1
	MOVE.b	D1, (A3)+
	MOVE.b	(A2), D1
	LSL.b	#3, D1
	ANDI.b	#$70, D1
	MOVE.b	D1, (A3)+
	MOVE.b	(A2)+, D1
	LSR.b	#1, D1
	ANDI.b	#$70, D1
	MOVE.b	D1, (A3)+
	DBF	D0, loc_00000F56
	RTS
loc_00000F7A:
	MOVE.w	#$000F, D0
loc_00000F7E:
	BSR.w	loc_00000FAA
	LSR.b	#3, D1
	ANDI.b	#$0E, D1
	MOVE.b	D1, (A3)+
	BSR.w	loc_00000FAA
	MOVE.b	D1, D2
	LSR.b	#3, D2
	ANDI.b	#$0E, D2
	BSR.w	loc_00000FAA
	LSL.b	#1, D1
	ANDI.b	#$E0, D1
	OR.b	D2, D1
	MOVE.b	D1, (A3)+
	DBF	D0, loc_00000F7E
	RTS
loc_00000FAA:
	MOVE.b	(A2)+, D1
	BTST.l	#1, D1
	BEQ.w	loc_00000FB6
	ADDQ.b	#4, D1
loc_00000FB6:
	RTS

ClearGP0ReloadNoInt:
	ORI	#$0700, SR
	BSR.w	ClearGPal0ReloadAll
	ANDI	#$F8FF, SR
	RTS
ClearGPal0ReloadAll:
	MOVEQ	#0, D0
	LEA	rPalQueueMainEnt1, A2
	MOVE.w	#$001F, D1
@ClearNext:
	MOVE.l	D0, (A2)+
	DBF	D1, @ClearNext
ReloadAllGlobalPals:
	LEA	rPalQueueTable, A2
	MOVE.w	#$FFFF, (A2)+
	MOVE.l	#rPalQueueMainEnt1, (A2)+
	MOVE.w	#$FFFF, (A2)+
	MOVE.l	#rPalQueueMainEnt2, (A2)+
	MOVE.w	#$FFFF, (A2)+
	MOVE.l	#rPalQueueMainEnt3, (A2)+
	MOVE.w	#$FFFF, (A2)+
	MOVE.l	#rPalQueueMainEnt4, (A2)+
	RTS
	
InvertPalette:
	LEA	rPalQueueMainEnt1, A2
	MOVE.w	#$003F, D0
@InvertNext:
	MOVE.w	(A2), D1
	EORI.w	#$0EEE, D1
	MOVE.w	D1, (A2)+
	DBF	D0, @InvertNext
	BRA.b	ReloadAllGlobalPals

Video_LoadPaletteIntoIndex:
	MOVEM.l	A3/D1, -(A7)
	ANDI.w	#3, D0
	LSL.w	#1, D0
	MOVE.w	D0, D1
	LSL.w	#1, D0
	ADD.w	D1, D0
	LEA	rPalQueueTable, A3
	MOVE.l	A2, $2(A3,D0.w)
	MOVE.w	#$FFFF, (A3,D0.w)
	MOVEM.l	(A7)+, D1/A3
	RTS
	
loc_00001046:
	LEA	rPad1Held, A1
	MOVE.w	#$000B, D0
loc_00001050:
	CLR.b	(A1)+
	DBF	D0, loc_00001050
	MOVE.b	#$10, $00FF1108
	MOVE.b	#3, $00FF1109
	MOVE.w	#$0100, Z80BusReq
loc_0000106E:
	BTST.b	#0, Z80BusReq
	BNE.b	loc_0000106E
	MOVEQ	#$00000040, D0
	MOVE.b	D0, padControl1
	MOVE.b	D0, padControl2
	MOVE.b	D0, padControl3
	MOVE.w	#0, Z80BusReq
	RTS
	
UpdateControllers:
	ORI	#$0700, SR
	MOVE.w	#$0100, Z80BusReq
loc_000010A2:
	BTST.b	#0, Z80BusReq
	BNE.b	loc_000010A2
	BSR.w	loc_000010BE
	MOVE.w	#0, Z80BusReq
	ANDI	#$F8FF, SR
	RTS
loc_000010BE:
	LEA	rPad1Held, A0
	LEA	padData1, A1
	BSR.w	loc_000010DA
	LEA	rPad2Held, A0
	LEA	padData2, A1
loc_000010DA:
	MOVE.b	#0, (A1)
	NOP
	NOP
	MOVE.b	(A1), D1
	MOVE.b	D1, D2
	ASL.b	#2, D1
	ANDI.b	#$C0, D1
	MOVE.b	#$40, (A1)
	NOP
	NOP
	MOVE.b	(A1), D0
	ANDI.b	#$3F, D0
	OR.b	D1, D0
	NOT.b	D0
	ANDI.b	#$0C, D2
	BEQ.w	loc_0000110A
	ANDI.b	#$CF, D0
loc_0000110A:
	MOVE.b	$0(A0), D1
	MOVE.b	D0, $0(A0)
	MOVE.b	$0(A0), $1(A0)
	NOT.b	D1
	AND.b	D1, $1(A0)
	BSR.w	loc_0000117C
	BSR.w	loc_00001128
	RTS
loc_00001128:
	ANDI.b	#$F3, $2(A0)
	MOVE.b	$0(A0), D0
	MOVE.b	$3(A0), D1
	MOVE.b	D1, D2
	ROR.b	#4, D1
	EOR.b	D0, D1
	ANDI.b	#$0C, D1
	BNE.b	loc_00001162
	ANDI.b	#$3F, D2
	BEQ.b	loc_0000114E
	SUBQ.b	#1, $3(A0)
	RTS
loc_0000114E:
	ANDI.b	#$0C, D0
	OR.b	D0, $2(A0)
	MOVE.b	$00FF1109, D0
	OR.b	D0, $3(A0)
	RTS
loc_00001162:
	ANDI.b	#$0C, D0
	OR.b	D0, $2(A0)
	ROL.b	#4, D0
	ANDI.b	#$C0, D0
	OR.b	$00FF1108, D0
	MOVE.b	D0, $3(A0)
	RTS
loc_0000117C:
	ANDI.b	#$FC, $2(A0)
	MOVE.b	$0(A0), D0
	MOVE.b	$4(A0), D1
	MOVE.b	D1, D2
	ROR.b	#6, D1
	EOR.b	D0, D1
	ANDI.b	#3, D1
	BNE.b	loc_000011B6
	ANDI.b	#$3F, D2
	BEQ.b	loc_000011A2
	SUBQ.b	#1, $4(A0)
	RTS
loc_000011A2:
	ANDI.b	#3, D0
	OR.b	D0, $2(A0)
	MOVE.b	$00FF1109, D0
	OR.b	D0, $4(A0)
	RTS
loc_000011B6:
	ANDI.b	#3, D0
	OR.b	D0, $2(A0)
	ROL.b	#6, D0
	ANDI.b	#$C0, D0
	OR.b	$00FF1108, D0
	MOVE.b	D0, $4(A0)
	RTS

UpdateRNG:
	MOVEM.l	D1, -(A7)
	MOVE.l	randomNumber, D1
	BNE.b	@rngNonZero
	MOVE.l	#$2A6D365A, D1
@rngNonZero:
	MOVE.l	D1, D0
	ASL.l	#2, D1
	ADD.l	D0, D1
	ASL.l	#3, D1
	ADD.l	D0, D1
	MOVE.w	D1, D0
	SWAP	D1
	ADD.w	D1, D0
	MOVE.w	D0, D1
	SWAP	D1
	MOVE.l	D1, randomNumber
	MOVEM.l	(A7)+, D1
	RTS

loc_00001202:
	MOVEM.l	D1, -(A7)
	MOVE.l	D0, D1
	BSR.b	UpdateRNG
	MULU.w	D1, D0
	SWAP	D0
	MOVEM.l	(A7)+, D1
	RTS


SignedCosWithMul:
	ADDI.b	#$40, D0
SignedSinWithMul:
	MOVEM.w	D0, -(A7)
	ANDI.w	#$007F, D0
	LSL.w	#1, D0
	MOVE.w	@SineTable(PC,D0.w), D2
	MULU.w	D1, D2
	MOVEM.w	(A7)+, D0
	OR.b	D0, D0
	BPL.w	@IsPositive
	NEG.l	D2
@IsPositive:
	RTS
@SineTable:
	dc.w	$0000, $0006, $000D, $0013, $0019, $001F, $0026, $002C, $0032, $0038, $003E, $0044, $004A, $0050, $0056, $005C, $0062, $0068, $006D, $0073, $0079, $007E, $0084, $0089, $008E, $0093, $0098, $009D, $00A2, $00A7, $00AC, $00B1 
	dc.w	$00B5, $00B9, $00BE, $00C2, $00C6, $00CA, $00CE, $00D1, $00D5, $00D8, $00DC, $00DF, $00E2, $00E5, $00E7, $00EA, $00ED, $00EF, $00F1, $00F3, $00F5, $00F7, $00F8, $00FA, $00FB, $00FC, $00FD, $00FE, $00FF, $00FF, $0100, $0100 ;0x20
	dc.w	$0100, $0100, $0100, $00FF, $00FF, $00FE, $00FD, $00FC, $00FB, $00FA, $00F8, $00F7, $00F5, $00F3, $00F1, $00EF, $00ED, $00EA, $00E7, $00E5, $00E2, $00DF, $00DC, $00D8, $00D5, $00D1, $00CE, $00CA, $00C6, $00C2, $00BE, $00B9 ;0x40
	dc.w	$00B5, $00B1, $00AC, $00A7, $00A2, $009D, $0098, $0093, $008E, $0089, $0084, $007E, $0079, $0073, $006D, $0068, $0062, $005C, $0056, $0050, $004A, $0044, $003E, $0038, $0032, $002C, $0026, $001F, $0019, $0013, $000D, $0006 ;0x60

loc_00001336:
	lea (loc_0000135C).l, a1
	bsr.w ObjSys_InitObjWithFunc
	bcc.w loc_00001346
	rts
loc_00001346:
	move.w #$8B00, d0
	move.b (rVDPRegBTbl+rvtMode3).l, d0
	ori.b #3, d0
	move.b d0, (rVDPRegBTbl+rvtMode3).l
	rts
loc_0000135C:
	lea ($00FF07E2).l, a2
	move.b $36(a0), d0
	clr.w d1
	move.w #$6F, d4
	move.w (rScrollYScanBack).l, d3
	subi.w #$FF5F, d3
	bcs.w loc_00001394
	cmpi.w #$70, d3
	bcc.w loc_000013B0
	sub.w d3, d4
loc_00001384:
	clr.w -(a2)
	clr.w -(a2)
	dbf d3, loc_00001384
	subq.w #1, d4
	bcc.w loc_00001394
	rts
loc_00001394:
	bsr.w SignedSinWithMul
	swap d2
	asl.w #1, d2
	move.w d2, -(a2)
	clr.w -(a2)
	addq.b #2, d0
	addi.w #$100, d1
	dbf d4, loc_00001394
	addq.b #1, $36(a0)
	rts
loc_000013B0:
	move.w #$8B00, d0
	move.b (rVDPRegBTbl+rvtMode3).l, d0
	andi.b #$FC, d0
	move.b d0, (rVDPRegBTbl+rvtMode3).l
	clr.b ($00FF0136).l
	clr.w (rScrollXScanBack).l
	bra.w ObjSys_DeleteObjectA0
	rts
	rts

; ---------- File Start: bytecode.asm ----------
; This contains the majority of the code related to the game's bytecode table
Bytecode_Init:
	MOVE.l	#Bytecode_Bootup, rBytecode_PC
	CLR.b	rBytecode_Ret
	CLR.b	rBytecode_StopRun
	RTS
	
Bytecode_Run:
	TST.b	rBytecode_StopRun
	BEQ.w	@StepBytecode
	RTS
@StepBytecode:
	CLR.b	rBytecode_StopLoop
	MOVEA.l	rBytecode_PC, A0
	MOVE.w	(A0)+, D1
	MOVE.w	(A0)+, D0
	MOVE.l	A0, rBytecode_PC
	ASL.w	#2, D1
	MOVEA.l	@OpcodeTbl(PC,D1.w), A0
	JSR	(A0)
	TST.b	rBytecode_StopLoop
	BEQ.b	@StepBytecode
	RTS
@OpcodeTbl:
	dc.l	BytecodeOP_Stop
	dc.l	BytecodeOP_Nop
	dc.l	BytecodeOP_Delay
	dc.l	BytecodeOP_WaitPal
	dc.l	BytecodeOP_WriteRAM
	dc.l	BytecodeOP_RunFunc
	dc.l	BytecodeOP_Jump
	dc.l	BytecodeOP_JumpEQ
	dc.l	BytecodeOP_JumpNE
	dc.l	BytecodeOP_JumpTbl
	dc.l	BytecodeOP_SetVDP
	dc.l	BytecodeOP_LoadArt
	dc.l	BytecodeOP_RunVDPCommand
	dc.l	BytecodeOP_LoadPal
	dc.l	BytecodeOP_LoadPalFade
	dc.l	BytecodeOP_PlaySnd
	dc.l	BytecodeOP_PlaySndCheckSample
	dc.l	BytecodeOP_FadeMusic
	dc.l	BytecodeOP_StopAllSound
	dc.l	BytecodeOP_PlaySndCheckSample2
	
BytecodeOP_Stop:
	SUBQ.l	#2, rBytecode_PC
	MOVE.b	#$FF, rBytecode_StopLoop
	MOVE.b	#$FF, rBytecode_StopRun
	RTS
	
BytecodeOP_Nop:
	SUBQ.l	#2, rBytecode_PC
	MOVE.b	#$FF, rBytecode_StopLoop
	RTS
	
BytecodeOP_Delay:
	MOVE.b	#$FF, rBytecode_StopLoop
	MOVE.b	#$FF, rBytecode_StopRun
	LEA	@DelayObjInit, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCC.w	@ObjCreateSuccess
	RTS
@ObjCreateSuccess:
	MOVE.w	D0, $24(A1)
	RTS
@DelayObjInit:
	BSR.w	ObjSys_UpdateObjNextOpTimer
	CLR.b	rBytecode_StopRun
	BRA.w	ObjSys_DeleteObjectA0
	
BytecodeOP_WaitPal:
	SUBQ.l	#2, rBytecode_PC
	MOVE.b	#$FF, rBytecode_StopLoop
	MOVE.b	#$FF, rBytecode_StopRun
	LEA	@WaitPalObjInit, A1
	BRA.w	ObjSys_InitObjWithFunc
@WaitPalObjInit:
	BSR.w	@loc_00001504
	BCC.w	@loc_000014FA
	RTS
@loc_000014FA:
	CLR.b	rBytecode_StopRun
	BRA.w	ObjSys_DeleteObjectA0
@loc_00001504:
	LEA	$00FF0AD6, A2
	MOVE.w	#3, D0
@Loop:
	TST.w	(A2)
	BNE.w	@loc_00001524
	ADDA.l	#$00000082, A2
	DBF	D0, @Loop
	ANDI	#$FFFE, SR
	RTS
@loc_00001524:
	ORI	#1, SR
	RTS
	
BytecodeOP_WriteRAM:
	MOVEA.l	rBytecode_PC, A0
	SWAP	D0
	MOVE.w	(A0)+, D0
	MOVE.w	(A0)+, D1
	MOVE.l	A0, rBytecode_PC
	MOVEA.l	D0, A0
	MOVE.w	D1, (A0)
	RTS
	
BytecodeOP_RunFunc:
	MOVEA.l	rBytecode_PC, A0
	SWAP	D0
	MOVE.w	(A0)+, D0
	MOVE.l	A0, rBytecode_PC
	MOVEA.l	D0, A0
	JMP	(A0)
	
BytecodeOP_Jump:
	MOVEA.l	rBytecode_PC, A0
	SWAP	D0
	MOVE.w	(A0), D0
	MOVE.l	D0, rBytecode_PC
	RTS

BytecodeOP_JumpEQ:
	TST.b	rBytecode_Ret
	BEQ.b	BytecodeOP_Jump
	ADDQ.l	#2, rBytecode_PC
	RTS
	
BytecodeOP_JumpNE:
	TST.b	rBytecode_Ret
	BNE.b	BytecodeOP_Jump
	ADDQ.l	#2, rBytecode_PC
	RTS
	
BytecodeOP_JumpTbl:
	MOVEA.l	rBytecode_PC, A0
	CLR.w	D1
	MOVE.b	rBytecode_Ret, D1
	CMP.w	D0, D1
	BCS.w	@NotOOB
	MOVE.w	D0, D1
	SUBQ.w	#1, D1
@NotOOB:
	LSL.w	#2, D1
	MOVE.l	(A0,D1.w), D2
	MOVE.l	D2, rBytecode_PC
	RTS
	
BytecodeOP_SetVDP:
	BRA.w	Bytecode_SetVDPMode
	
BytecodeOP_LoadArt:
	MOVEA.l	rBytecode_PC, A1
	MOVEA.l	(A1)+, A0
	MOVE.l	A1, rBytecode_PC
	BRA.w	System_DecompressComp
	
BytecodeOP_RunVDPCommand:
	BRA.w	Video_QueueBgMapFromId
	
BytecodeOP_LoadPalFade:
	MOVE.b	D0, D1
	LSR.w	#3, D0
	ANDI.l	#$00001FFF, D0
	LEA	palLookupTable, A2
	ADDA.l	D0, A2
	MOVE.b	D1, D0
	MOVEA.l	rBytecode_PC, A0
	MOVE.b	(A0)+, D1
	MOVE.b	(A0)+, D2
	MOVE.l	A0, rBytecode_PC
	BRA.w	loc_00000E46
	
BytecodeOP_LoadPal:
	MOVE.b	D0, D1
	LSR.w	#3, D0
	ANDI.l	#$00001FFF, D0
	LEA	palLookupTable, A2
	ADDA.l	D0, A2
	MOVE.b	D1, D0
	BRA.w	Video_LoadPaletteIntoIndex

BytecodeOP_PlaySnd:
	JMP	SndDrv_PlayMusicId
	
BytecodeOP_PlaySndCheckSample:
	JMP	SndDrv_QueueSoundEffect
	
BytecodeOP_FadeMusic:
	SUBQ.l	#2, rBytecode_PC
	JMP	SndDrv_PlayFadeOut
	
BytecodeOP_StopAllSound:
	SUBQ.l	#2, rBytecode_PC
	JMP	SndDrv_PlayClearEffect
	
BytecodeOP_PlaySndCheckSample2:
	JMP	SndDrv_PlayVoice

	include "bytecode/table.asm"
; ---------- File End: bytecode.asm ----------

cutsceneLoadMusic:
	CLR.w	D1
	MOVE.b	rOnePlayer_CurStage, D1
	MOVE.b	cutsceneSongs(PC,D1.w), D0
	JSR	SndDrv_PlayMusicId
	CMPI.b	#cutID_Harpy, rOnePlayer_CurCutscene
	BEQ.w	@PlayHarpyTheme
	RTS
@PlayHarpyTheme:
	MOVE.b	#musID_HarpyTheme, D0
	JMP	SndDrv_QueueSoundEffect
cutsceneSongs:
	dc.b	musID_Memories
	dc.b	musID_Memories
	dc.b	musID_Memories
	dc.b	musID_Memories
	dc.b	musID_Memories
	dc.b	musID_Memories
	dc.b	musID_Memories
	dc.b	musID_Memories
	dc.b	musID_Memories
	dc.b	musID_Memories
	dc.b	musID_Memories
	dc.b	musID_Brave
	dc.b	musID_Brave
	dc.b	musID_Brave
	dc.b	musID_Brave
	dc.b	musID_SatanTheme
	dc.b	musID_Brave
	even
	
loadBattleBackground:
	CLR.w	D0
	MOVE.b	rOnePlayer_CurStage, D0
	LSL.w	#2, D0
	MOVEA.l	tbl_loadBattleBackground(PC,D0.w), A1
	JMP	(A1)
tbl_loadBattleBackground:
	dc.l	battleLoadTutorialBG
	dc.l	battleLoadTutorialBG
	dc.l	battleLoadTutorialBG
	dc.l	@battleLoadGrass
	dc.l	@battleLoadGrass
	dc.l	@battleLoadGrass 
	dc.l	@battleLoadGrass 
	dc.l	@battleLoadGrass 
	dc.l	@battleLoadGrass 
	dc.l	@battleLoadGrass 
	dc.l	@battleLoadGrass 
	dc.l	@battleLoadRuins
	dc.l	@battleLoadRuins
	dc.l	@battleLoadRuins
	dc.l	@battleLoadRuins
	dc.l	@battleLoadRuins
@battleLoadGrass:
	LEA	art_grassBoard, A0
	MOVE.w	#0, D0
	JSR	System_DecompressComp
	MOVE.w	#3, D0
	JMP	Video_QueueBgMapFromId
@battleLoadRuins:
	LEA art_ruinsBoard, A0
	MOVE.w  #0, D0
	JSR System_DecompressComp
	MOVE.w	#5, D0
	JMP	Video_QueueBgMapFromId
battleLoadTutorialBG:
	LEA art_puzzleBoard, A0
	MOVE.w  #0, D0
	JSR System_DecompressComp
	MOVE.w  #$16, D0
	jmp Video_QueueBgMapFromId
	
loadBattlePalette:
	CLR.w	D0
	MOVE.b	rOnePlayer_CurStage, D0
	LSL.w	#2, D0
	MOVEA.l	tbl_loadBattlePalette(PC,D0.w), A1
	JMP	(A1)
tbl_loadBattlePalette:
	dc.l    @battleLoadTutorial
	dc.l    @battleLoadTutorial
	dc.l    @battleLoadTutorial
	dc.l	@battleLoadGrass
	dc.l	@battleLoadGrass
	dc.l	@battleLoadGrass 
	dc.l	@battleLoadGrass 
	dc.l	@battleLoadGrass 
	dc.l	@battleLoadGrass 
	dc.l	@battleLoadGrass 
	dc.l	@battleLoadGrass 
	dc.l    @battleLoadRuins
	dc.l    @battleLoadRuins
	dc.l    @battleLoadRuins
	dc.l    @battleLoadRuins
	dc.l    @battleLoadRuinsSatan
@battleLoadGrass:
	MOVE.b	#2, D0
	LEA	palLookupTable, A2
	ADDA.l	#(pal_grassBattle-palLookupTable), A2
	JMP	Video_LoadPaletteIntoIndex
@battleLoadRuins:
	MOVE.b  #2, D0
	LEA palLookupTable, A2
	ADDA.l  #(pal_ruinsBattle-palLookupTable), A2
	JMP Video_LoadPaletteIntoIndex
@battleLoadRuinsSatan:
	MOVE.b  #2, D0
	LEA palLookupTable, A2
	ADDA.l  #(pal_ruinsBattleSatan-palLookupTable), A2
	JMP Video_LoadPaletteIntoIndex
@battleLoadTutorial:
	MOVE.b  #2, D0
	LEA palLookupTable, A2
	ADDA.l  #(pal_optionsBackground-palLookupTable), A2
	JMP Video_LoadPaletteIntoIndex

loc_000021D0:
	CMPI.b	#stgID_Draco, rOnePlayer_CurStage
	BCC.w	loc_000021E0
	BSR.w	ClearGP0ReloadNoInt
loc_000021E0:
	RTS
	
Debug_InitDebugFlags:
	move.b #-1, (debug_CpuPlayer).l
	move.b #0, (debug_puyoDrop).l
	move.b #0, (debug_skipStages).l
	move.b #0, (debug_unknown).l
	rts
	
debug_SkipStage:
	MOVE.b	debug_skipStages, rBytecode_Ret
	RTS
	
palLookupTable:
pal_blank:
	incbin "art/palettes/blank.bin"
pal_00002230:
	incbin "art/palettes/unknown/unknown1.bin"
pal_00002250:
	incbin "art/palettes/unknown/unknown2.bin"
pal_grassBattle:
	incbin "art/palettes/boards/grass.bin"
pal_general:
	incbin "art/palettes/general.bin"
pal_grassCutTop:
	incbin "art/palettes/cutscene/grass_top.bin"
pal_grassCutBottom:
	incbin "art/palettes/cutscene/grass_bottom.bin"
pal_ruinsCutForeground:
	incbin "art/palettes/cutscene/ruins_foreground.bin"
pal_ruinsCutBackground:
	incbin "art/palettes/cutscene/ruins_background.bin"
pal_satanCut:
	incbin "art/palettes/cutscene/satan.bin"
; MISSING POINTER (Palette)
	incbin "art/palettes/missing/missing1.bin"
pal_mainMenuMenus:
	incbin "art/palettes/menu/menu.bin"
pal_optionsTextWhite:
	incbin "art/palettes/soundtest/text_white.bin"
pal_gameOverSky:
	incbin "art/palettes/gameover/sky.bin"
pal_000023D0:
	incbin "art/palettes/unknown/unknown9.bin"
pal_staffBG:
	incbin "art/palettes/staff/background.bin"
pal_endingArle:
	incbin "art/palettes/ending/arle.bin"
pal_00002430:
	incbin "art/palettes/unknown/unknown11.bin"
pal_recordScreenMain:
	incbin "art/palettes/record/main.bin"
; MISSING POINTER (Palette)
	incbin "art/palettes/missing/missing2.bin"
pal_portraitDefeated:
	incbin "art/palettes/portrait/defeated.bin"
pal_optionsBackground:
	incbin "art/palettes/options/background.bin"
; MISSING POINTER (Palette)
	incbin "art/palettes/missing/missing3.bin"
pal_titleScreenArle:
	incbin "art/palettes/title/arle.bin"
pal_00002510:
	incbin "art/palettes/unknown/unknown12.bin"
pal_portraitScreenBackground:
	incbin "art/palettes/portraitscreen/background.bin"
pal_staffText:
	incbin "art/palettes/staff/text.bin"
pal_optionTextBlue:
	incbin "art/palettes/options/text_blue.bin"
pal_optionTextRed:
	incbin "art/palettes/options/text_red.bin"
pal_optionTextGreen:
	incbin "art/palettes/options/text_green.bin"
pal_tutorialDemoBGJoystick:
	incbin "art/palettes/tutorial/bg_joystick.bin"
pal_titleScreenBackground:
	incbin "art/palettes/title/background.bin"
; MISSING POINTER (Palette)
	incbin "art/palettes/missing/missing4.bin"
pal_titleScreenLogo_cycle:
	incbin "art/palettes/title/logo_blue.bin"
	incbin "art/palettes/title/logo_green.bin"
	incbin "art/palettes/title/logo_red.bin"
	incbin "art/palettes/title/logo_yellow.bin"
	incbin "art/palettes/title/logo_lightBlue.bin"
	incbin "art/palettes/title/logo_purple.bin"
pal_ruinsBattle:
	incbin "art/palettes/boards/ruins.bin"
pal_ruinsBattleSatan:
	incbin "art/palettes/boards/ruins_satan.bin"


; These values relate to when a battle begins (when carbuncle pops the baloon)
Anim_CarbuncleBalloonPop:
	dc.b	$06
	dc.b	$09 
	dc.b	$04
	dc.b	$0A 
	dc.b	$08
	dc.b	$10 
	dc.b	$0C
	dc.b	$11 
	dc.b	$04
	dc.b	$12 
	dc.b	$07
	dc.b	$13 
	dc.b	$0A
	dc.b	$14 
	dc.b	$10
	dc.b	$15 
	dc.b	$0A
	dc.b	$16 
	dc.b	$02
	dc.b	$17 
	dc.b	$08
	dc.b	$19 
	dc.b	$01
	dc.b	$09 
	dc.b	$FE
	dc.b	$00
loc_0000274A:
	dc.b    $00, $09, $FE, $00 
loc_0000274E:
	dc.l	loc_000027D2
	dc.l	loc_000027DE
	dc.l	loc_000027EA
	dc.l	loc_000027F4
	dc.l	loc_000027FE
	dc.l	loc_00002806
	dc.l	loc_0000280E
	dc.l	loc_0000283E
	dc.l	loc_00002846
	dc.l	loc_0000284E
	dc.l	loc_00002856
	dc.l	loc_0000285E
	dc.l	loc_0000286C
	dc.l	loc_00002888
	dc.l	loc_00002894
	dc.l	loc_000028A8
	dc.l	loc_000028BE
	dc.l	loc_000028CA
	dc.l	loc_000028DA
	dc.l	loc_000028FA
	dc.l	loc_00002914
	dc.l	loc_00002920
	dc.l	loc_00002934
	dc.l	loc_00002940
	dc.l	loc_0000294C
	dc.l	loc_00002960
	dc.l	loc_0000298E
	dc.l	loc_000029AA
	dc.l	loc_000029C6
	dc.l	loc_000029CE
	dc.l	loc_000027CA
loc_000027CA:
	dc.b	$00, $03 
	dc.b	$F1
	dc.b	$09 
	dc.b	$03
	dc.b	$0A 
	dc.b	$FE
	dc.b	$00 
loc_000027D2:
	dc.b	$00, $04, $06, $42, $06, $07, $06, $42, $06, $08, $FE, $00 
loc_000027DE:
	dc.b	$00, $04, $06, $41, $06, $04, $06, $41, $06, $05, $FE, $00 
loc_000027EA:
	dc.b	$00, $03, $08, $37, $08, $38, $08, $44, $FE, $00 
loc_000027F4:
	dc.b	$00, $03, $08, $3B, $08, $3C, $08, $43, $FE, $00 
loc_000027FE:
	dc.b	$00, $08, $04, $0B, $04, $3B, $FE, $00 
loc_00002806:
	dc.b	$00, $08, $04, $0B, $04, $37, $FE, $00 
loc_0000280E:
	dc.b	$00, $00, $08, $0B, $08, $3B, $08, $38, $04, $39, $04, $3A, $04, $39, $04, $3A, $04, $39, $04, $3A, $08, $38, $08, $3B, $08, $0B, $08, $37, $08, $3C, $04, $3D 
	dc.b	$04, $3E, $04, $3D, $04, $3E, $04, $3D, $04, $3E, $08, $3C, $08, $37, $FE, $00 ;0x20
loc_0000283E:
	dc.b	$00, $04, $03, $00, $03, $09, $FE, $00 
loc_00002846:
	dc.b	$00, $02 
	dc.b	$20
	dc.b	$0B 
	dc.b	$18
	dc.b	$0D 
	dc.b	$FE
	dc.b	$00 
loc_0000284E:
	dc.b	$00, $01 
	dc.b	$08
	dc.b	$0B 
	dc.b	$20
	dc.b	$0C 
	dc.b	$FE
	dc.b	$00 
loc_00002856:
	dc.b	$00, $03, $0C, $09, $12, $0A, $FE, $00 
loc_0000285E:
	dc.b	$00, $00, $10, $09, $08, $33, $20, $34, $08, $33, $10, $09, $FE, $00 
loc_0000286C:
	dc.b	$00, $00 
	dc.b	$08
	dc.b	$0B 
	dc.b	$08
	dc.b	$21 
	dc.b	$10
	dc.b	$20 
	dc.b	$04
	dc.b	$22 
	dc.b	$04
	dc.b	$23 
	dc.b	$04
	dc.b	$22 
	dc.b	$04
	dc.b	$23 
	dc.b	$04
	dc.b	$22 
	dc.b	$04
	dc.b	$23 
	dc.b	$02
	dc.b	$22 
	dc.b	$02
	dc.b	$23 
	dc.b	$08
	dc.b	$20 
	dc.b	$FE
	dc.b	$00 
loc_00002888:
	dc.b	$00, $02 
	dc.b	$10
	dc.b	$09 
	dc.b	$0E
	dc.b	$0E 
	dc.b	$10
	dc.b	$09 
	dc.b	$0E
	dc.b	$0F 
	dc.b	$FE
	dc.b	$00 
loc_00002894:
	dc.b	$00, $02 
	dc.b	$10
	dc.b	$09 
	dc.b	$08
	dc.b	$0E 
	dc.b	$0C
	dc.b	$35 
	dc.b	$08
	dc.b	$0E 
	dc.b	$10
	dc.b	$09 
	dc.b	$08
	dc.b	$0F 
	dc.b	$0C
	dc.b	$36 
	dc.b	$08
	dc.b	$0F 
	dc.b	$FE
	dc.b	$00 
loc_000028A8:
	dc.b	$00, $00 
	dc.b	$22
	dc.b	$27 
	dc.b	$26
	dc.b	$28 
	dc.b	$22
	dc.b	$27 
	dc.b	$26
	dc.b	$28 
	dc.b	$22
	dc.b	$27 
	dc.b	$30
	dc.b	$28 
	dc.b	$08
	dc.b	$29 
	dc.b	$20
	dc.b	$2A 
	dc.b	$08
	dc.b	$0B 
	dc.b	$FE
	dc.b	$00 
loc_000028BE:
	dc.b	$00, $00 
	dc.b	$10
	dc.b	$09 
	dc.b	$10
	dc.b	$1A 
	dc.b	$0C
	dc.b	$1B 
	dc.b	$10
	dc.b	$1A 
	dc.b	$FE
	dc.b	$00 
loc_000028CA:
	dc.b	$00, $00 
	dc.b	$10
	dc.b	$09 
	dc.b	$10
	dc.b	$1A 
	dc.b	$0C
	dc.b	$1B 
	dc.b	$18
	dc.b	$30 
	dc.b	$0C
	dc.b	$1B 
	dc.b	$10
	dc.b	$1A 
	dc.b	$FE
	dc.b	$00 
loc_000028DA:
	dc.b	$00, $00 
	dc.b	$08
	dc.b	$09 
	dc.b	$10
	dc.b	$1A 
	dc.b	$06
	dc.b	$2D 
	dc.b	$08
	dc.b	$2E 
	dc.b	$08
	dc.b	$2F 
	dc.b	$08
	dc.b	$2E 
	dc.b	$08
	dc.b	$2F 
	dc.b	$08
	dc.b	$2E 
	dc.b	$08
	dc.b	$2F 
	dc.b	$08
	dc.b	$2E 
	dc.b	$08
	dc.b	$2F 
	dc.b	$06
	dc.b	$2D 
	dc.b	$04
	dc.b	$1A 
	dc.b	$04
	dc.b	$09 
	dc.b	$FE
	dc.b	$00 
loc_000028FA:
	dc.b	$00, $00 
	dc.b	$18
	dc.b	$2B 
	dc.b	$18
	dc.b	$2C 
	dc.b	$18
	dc.b	$2B 
	dc.b	$18
	dc.b	$2C 
	dc.b	$18
	dc.b	$2B 
	dc.b	$18
	dc.b	$2C 
	dc.b	$18
	dc.b	$2B 
	dc.b	$18
	dc.b	$2C 
	dc.b	$18
	dc.b	$2B 
	dc.b	$18
	dc.b	$2C 
	dc.b	$08
	dc.b	$32 
	dc.b	$FE
	dc.b	$00 
loc_00002914:
	dc.b	$00, $02 
	dc.b	$10
	dc.b	$09 
	dc.b	$0C
	dc.b	$0E 
	dc.b	$10
	dc.b	$09 
	dc.b	$0C
	dc.b	$0F 
	dc.b	$FE
	dc.b	$00 
loc_00002920:
	dc.b	$00, $02 
	dc.b	$10
	dc.b	$09 
	dc.b	$0C
	dc.b	$0E 
	dc.b	$08
	dc.b	$35 
	dc.b	$0C
	dc.b	$0E 
	dc.b	$10
	dc.b	$09 
	dc.b	$0C
	dc.b	$0F 
	dc.b	$08
	dc.b	$36 
	dc.b	$0C
	dc.b	$0F 
	dc.b	$FE
	dc.b	$00 
loc_00002934:
	dc.b	$00, $00 
	dc.b	$10
	dc.b	$09 
	dc.b	$10
	dc.b	$0C 
	dc.b	$10
	dc.b	$0B 
	dc.b	$20
	dc.b	$40 
	dc.b	$FE
	dc.b	$00 
loc_00002940:
	dc.b	$00, $02 
	dc.b	$0C
	dc.b	$0E 
	dc.b	$0A
	dc.b	$35 
	dc.b	$0C
	dc.b	$0F 
	dc.b	$0A
	dc.b	$36 
	dc.b	$FE
	dc.b	$00 
loc_0000294C:
	dc.b	$00, $02 
	dc.b	$08
	dc.b	$09 
	dc.b	$08
	dc.b	$1C 
	dc.b	$0C
	dc.b	$1D 
	dc.b	$08
	dc.b	$1C 
	dc.b	$08
	dc.b	$09 
	dc.b	$08
	dc.b	$1E 
	dc.b	$0C
	dc.b	$1F 
	dc.b	$08
	dc.b	$1E 
	dc.b	$FE
	dc.b	$00 
loc_00002960:
	dc.b	$00, $00 
	dc.b	$08
	dc.b	$09 
	dc.b	$08
	dc.b	$0C 
	dc.b	$08
	dc.b	$0B 
	dc.b	$02
	dc.b	$40 
	dc.b	$02
	dc.b	$24 
	dc.b	$02
	dc.b	$26 
	dc.b	$02
	dc.b	$25 
	dc.b	$02
	dc.b	$0D 
	dc.b	$02
	dc.b	$24 
	dc.b	$02
	dc.b	$26 
	dc.b	$02
	dc.b	$25 
	dc.b	$02
	dc.b	$0D 
	dc.b	$02
	dc.b	$24 
	dc.b	$02
	dc.b	$26 
	dc.b	$02
	dc.b	$25 
	dc.b	$02
	dc.b	$0D 
	dc.b	$02
	dc.b	$24 
	dc.b	$02
	dc.b	$26 
	dc.b	$02
	dc.b	$25 
	dc.b	$08
	dc.b	$0B 
	dc.b	$08
	dc.b	$0C 
	dc.b	$FE
	dc.b	$00 
loc_0000298E:
	dc.b	$00, $00, $04, $0D, $04, $24, $04, $26, $04, $25, $03, $0D, $03, $24, $03, $26, $03, $25, $02, $0D, $02, $24, $02, $26, $02, $25, $FE, $00 
loc_000029AA:
	dc.b	$00, $00 
	dc.b	$04
	dc.b	$0D 
	dc.b	$04
	dc.b	$25 
	dc.b	$04
	dc.b	$26 
	dc.b	$04
	dc.b	$24 
	dc.b	$03
	dc.b	$0D 
	dc.b	$03
	dc.b	$25 
	dc.b	$03
	dc.b	$26 
	dc.b	$03
	dc.b	$24 
	dc.b	$02
	dc.b	$0D 
	dc.b	$02
	dc.b	$25 
	dc.b	$02
	dc.b	$26 
	dc.b	$02
	dc.b	$24 
	dc.b	$FE
	dc.b	$00 
loc_000029C6:
	dc.b	$00, $04, $06, $26, $06, $3F, $FE, $00 
loc_000029CE:
	dc.b	$00, $00 
	dc.b	$20
	dc.b	$1A 
	dc.b	$40
	dc.b	$1B 
	dc.b	$FE
	dc.b	$00 

; ---------- File Start: game/object_system.asm ----------

ObjSys_Init:
	MOVE.w	#$03FF, D1
	LEA	ObjectBuffer, A0
	MOVEQ	#0, D0
@Loop:
	MOVE.l	D0, (A0)+
	DBF	D1, @Loop
	
	LEA	$00FF0AD6, A2
	MOVE.w	#3, D0
@Loop2:
	CLR.w	(A2)
	ADDA.l	#$00000082, A2
	DBF	D0, @Loop2
	RTS
	
ObjSys_UpdateObjs:
	MOVE.b	$00FF0144, D0 ; Check for lowest prio mask
	ROL.b	#1, D0
	ANDI.b	#1, D0
	EORI.b	#1, D0

	MOVE.b	$00FF0145, D1 ; Check for second lowest prio mask
	ROL.b	#2, D1
	ANDI.b	#2, D1
	EORI.b	#2, D1

	OR.b	D0, D1
	ORI.b	#$0C, D1 ; The two highest prio masks are always enabled.

	LEA	ObjectBuffer, A0
	MOVE.w	#$003F, D0
loc_00002A30:
	MOVE.b	$0(A0), D2
	AND.b	D1, D2
	BEQ.w	@SkipObject ; Skip if the object doesn't have a high enough prio.
	MOVEM.l	D1/D0, -(A7)
	MOVEA.l	$2(A0), A1
	JSR	(A1)
	MOVEM.l	(A7)+, D0/D1
@SkipObject:
	ADDA.l	#$00000040, A0
	DBF	D0, loc_00002A30
	RTS

ObjSys_InitObjWithFunc:
	BSR.w	loc_00002AB0
	BCC.w	loc_00002AA4
	MOVEM.l	A0/D0, -(A7)
	LEA	ObjectBuffer, A0
	MOVE.w	#$003F, D0
loc_00002A6A:
	BTST.b	#7, $1(A0)
	BEQ.w	loc_00002A88
	ADDA.l	#$00000040, A0
	DBF	D0, loc_00002A6A
	MOVEM.l	(A7)+, D0/A0
	ORI	#1, SR
	RTS
loc_00002A88:
	MOVE.l	A1, $2(A0)
	MOVEA.l	A0, A1
	ADDA.l	#6, A0
	MOVE.w	#$001C, D0
loc_00002A98:
	MOVE.w	#0, (A0)+
	DBF	D0, loc_00002A98
	MOVEM.l	(A7)+, D0/A0
loc_00002AA4:
	ORI.b	#$80, $1(A1)
	ANDI	#$FFFE, SR
	RTS

loc_00002AB0:
	MOVEM.l	A0/D0, -(A7)
	LEA	ObjectBuffer, A0
	MOVE.w	#$003F, D0
loc_00002ABE:
	TST.w	$0(A0)
	BEQ.w	loc_00002ADA
	ADDA.l	#$00000040, A0
	DBF	D0, loc_00002ABE
	MOVEM.l	(A7)+, D0/A0
	ORI	#1, SR
	RTS
loc_00002ADA:
	ORI.w	#$FF00, D0
	MOVE.w	D0, $0(A0)
	MOVE.l	A1, $2(A0)
	MOVEA.l	A0, A1
	MOVEM.l	(A7)+, D0/A0
	ANDI	#$FFFE, SR
	RTS
	
ObjSys_DeleteObjectA0:
	MOVEM.l	A2, -(A7)
	MOVEA.l	A0, A2
	BRA.w	_ObjSys_DeleteObject
ObjSys_DeleteObjectA1:
	MOVEM.l	A2, -(A7)
	MOVEA.l	A1, A2
_ObjSys_DeleteObject:
	MOVEM.l	D1/D0, -(A7)
	MOVEQ	#0, D0
	MOVE.w	#$000F, D1
@Loop:
	MOVE.l	D0, (A2)+
	DBF	D1, @Loop
	MOVEM.l	(A7)+, D0/D1
	MOVEM.l	(A7)+, A2
	RTS


ObjSys_SetObjNextOpTimer:
	MOVE.w	D0, $24(A0)
	MOVE.l	(A7)+, $2(A0)
	RTS

ObjSys_UpdateObjNextOpTimer:
	TST.w	$24(A0)
	BEQ.w	@SetUpdNextOpcode
	SUBQ.w	#1, $24(A0)
	BEQ.w	@SetUpdNextOpcode
	MOVE.l	(A7)+, D0
	RTS
@SetUpdNextOpcode:
	MOVE.l	(A7)+, $2(A0)
	RTS

loc_00002B40:
	MOVE.b	rPad1Press, D0
	OR.b	rPad2Press, D0
	ANDI.b	#$F0, D0
	BNE.w	loc_00002B68
	TST.w	$24(A0)
	BEQ.w	loc_00002B68
	SUBQ.w	#1, $24(A0)
	BEQ.w	loc_00002B68
	MOVE.l	(A7)+, D0
	RTS
loc_00002B68:
	CLR.w	$24(A0)
	MOVE.l	(A7)+, $2(A0)
	RTS
	
ObjSys_UpdateObjAnim:
	TST.b	Obj_AnmTmr(A0)
	BEQ.w	@AnimTmrExpired
	SUBQ.b	#1, Obj_AnmTmr(A0)
	RTS
@AnimTmrExpired:
	MOVEA.l	Obj_Anim(A0), A2
	CMPI.b	#$FE, (A2) ; Check if Anim has ended
	BCS.w	@UpdateAnimFrame ; Less than FE
	BNE.w	@HandleAnimJump ; Is FF
	ORI	#1, SR ; If it ends up being equal to FE, we don't do anything.
	RTS
@HandleAnimJump:
	MOVEA.l	$2(A2), A3 ; Load Jump Location
	MOVEA.l	A3, A2
	BSR.w	@UpdateAnimFrame
	ORI	#1, SR ; Return 1 in the carry flag
	RTS
@UpdateAnimFrame:
	MOVE.b	(A2)+, D0
	CMPI.b	#$F0, D0
	BCS.w	@AnimLengthLessThanF0
	BSR.w	@AnimLengthGEF0
@AnimLengthLessThanF0:
	MOVE.b	D0, Obj_AnmTmr(A0) ; Update animation length
	MOVE.b	(A2)+, D0 ; Load animation frame
	MOVE.b	D0, Obj_AnmFrm(A0) ; Store animation frame
	MOVE.l	A2, Obj_Anim(A0) ; Store back the updated animation pointer
	ANDI	#$FFFE, SR ; Return 0 in the carry flag
	RTS
@AnimLengthGEF0:
	CLR.w	D1
	MOVE.b	D0, D1 ; Load anim length into D1
	LSL.b	#3, D1
	ANDI.b	#$38, D1
	BSR.w	UpdateRNG
	ANDI.b	#7, D0
	CLR.w	D2
	MOVE.b	D0, D2
	ADD.w	D1, D2
	MOVE.b	loc_00002BEA(PC,D2.w), D0
	ORI	#1, SR
	RTS
loc_00002BEA:
	dc.b 	$30, $60, $02, $6C, $40, $46, $50, $5C
	dc.b 	$30, $60, $20, $6C, $40, $46, $50, $5C
	dc.b 	$00, $00, $00, $00, $00, $46, $50, $5C
	dc.b 	$80, $A0, $60, $78, $BD, $AA, $B4, $C0
	dc.b 	$00, $00, $00, $00, $20, $10, $0C, $30
	dc.b 	$30, $60, $00, $6C, $40, $46, $50, $5C
	dc.b 	$30, $60, $00, $6C, $40, $46, $50, $5C
	dc.b 	$30, $60, $00, $6C, $40, $46, $50, $5C
	
	
	
ObjSys_UpdatePosInterpMove:
	MOVE.b	Obj_RndrFlgs(A0), D0
	BSR.w	ObjSys_MoveX
	BSR.w	ObjSys_MoveY
	BSR.w	ObjSys_InterpolateX
	BSR.w	ObjSys_InterpolateY
	ANDI	#$FFFE, SR
	RTS
	
ObjSys_MoveX:
	BTST.l	#1, D0
	BNE.w	@MoveXEnabled
	RTS
@MoveXEnabled:
	MOVE.l	Obj_XPos(A0), D1
	MOVE.l	Obj_XMove(A0), D2
	ADD.l	D2, D1
	BTST.l	#5, D0
	BNE.w	@SkipBoundsCheck
	SWAP	D1
	CMPI.w	#$0080, D1
	BCS.w	@OffScreen
	CMPI.w	#$01C0, D1
	BCC.w	@OffScreen
	SWAP	D1
@SkipBoundsCheck:
	MOVE.l	D1, Obj_XPos(A0)
	RTS
@OffScreen:
	MOVEM.l	(A7)+, D0
	MOVE.b	#0, D0
	ORI	#1, SR
	RTS
	
ObjSys_MoveY:
	BTST.l	#0, D0
	BNE.w	@IsEnabled
	RTS
@IsEnabled:
	MOVE.l	Obj_YPos(A0), D1
	MOVE.l	Obj_YMove(A0), D2
	ADD.l	D2, D1
	BTST.l	#4, D0
	BNE.w	@SkipBoundsCheck
	SWAP	D1
	CMPI.w	#$0080, D1
	BCS.w	@OffScreen
	CMPI.w	#$0160, D1
	BCC.w	@OffScreen
	SWAP	D1
@SkipBoundsCheck:
	MOVE.l	D1, Obj_YPos(A0)
	RTS
@OffScreen:
	MOVEM.l	(A7)+, D0
	MOVE.b	#$FF, D0
	ORI	#1, SR
	RTS
	
ObjSys_InterpolateX:
	BTST.l	#3, D0
	BNE.w	@IsEnabled
	RTS
@IsEnabled:
	MOVE.w	Obj_XPos(A0), D1
	CMP.w	$1E(A0), D1
	BCS.w	@AddTowardsTarget
	BNE.w	@SubTowardsTarget
	RTS
@AddTowardsTarget:
	CLR.l	D1
	MOVE.w	$1A(A0), D1
	ADD.l	D1, $12(A0)
	RTS
@SubTowardsTarget:
	CLR.l	D1
	MOVE.w	$1A(A0), D1
	SUB.l	D1, $12(A0)
	RTS
	
ObjSys_InterpolateY:
	BTST.l	#2, D0
	BNE.w	@IsEnabled
	RTS
@IsEnabled:
	MOVE.w	Obj_YPos(A0), D1
	CMP.w	$20(A0), D1
	BCS.w	@AddTowardsTarget
	BNE.w	@SubTowardsTarget
	RTS
@AddTowardsTarget:
	CLR.l	D1
	MOVE.w	$1C(A0), D1
	ADD.l	D1, $16(A0)
	RTS
@SubTowardsTarget:
	CLR.l	D1
	MOVE.w	$1C(A0), D1
	SUB.l	D1, $16(A0)
	RTS

; ---------- File End: game/object_system.asm ----------

loc_00002D34:
	CMPI.b	#cutID_ZohDaimaoh, rOnePlayer_CurCutscene
	BNE.w	SndDrv_PlayPlacePuyo
	TST.b	sPlayer_IsCpu(A0)
	BEQ.w	SndDrv_PlayPlacePuyo
	MOVE.b	#sfxID_MajorGarbagePuyoFall1, D0
	JSR	SndDrv_QueueSoundEffect
	MOVEM.l	A1, -(A7)
	LEA	loc_00002D8A, A1
	BSR.w	loc_00002AB0
	BCS.w	loc_00002D84
	MOVE.w	#$0400, $38(A1)
	MOVE.l	#$00FF0606, $32(A1)
	TST.b	rCurMainPlayer
	BEQ.w	loc_00002D84
	MOVE.l	#$00FF05D6, $32(A1)
loc_00002D84:
	MOVEM.l	(A7)+, A1
	RTS
loc_00002D8A:
	move.b $36(a0), d0
	move.w $38(a0), d1
	movea.l $32(a0), a1
	move.w #5, d3
loc_00002D9A:
	andi.b #$7F, d0
	bsr.w	SignedSinWithMul
	swap d2
	move.w d2, (a1)+
	clr.w (a1)+
	addi.b #$48, d0
	dbf d3, loc_00002D9A
	addi.b #$28, $36(a0)
	subi.w #$20, $38(a0)
	bcs.w	ObjSys_DeleteObjectA0
	rts
	
SndDrv_PlayPlacePuyo:
	MOVE.b	#sfxID_PlacePuyo, D0
	CMPI.b	#cutID_Satan, rOnePlayer_CurCutscene
	BNE.w	@NotSatan
	MOVE.b	#sfxID_SatanPlacePuyo, D0
@NotSatan:
	JMP	SndDrv_QueueSoundEffect
	
SndDrv_PlayMovePuyo:
	MOVE.b	#sfxID_MovePuyo, D0
	CMPI.b	#cutID_Satan, rOnePlayer_CurCutscene
	BNE.w	@NotSatan
	MOVE.b	#sfxID_SatanMovePuyo, D0
@NotSatan:
	JMP	SndDrv_QueueSoundEffect
	
SndDrv_PlayRotatePuyo:
	MOVE.b	#sfxID_RotatePuyo, D0
	CMPI.b	#cutID_Satan, rOnePlayer_CurCutscene
	BNE.w	@NotSatan
	MOVE.b	#sfxID_SatanRotatePuyo, D0
@NotSatan:
	JMP	SndDrv_QueueSoundEffect
	
Battle_PlayWarningMusicIfStoryMode:
	TST.b	rCurGameMode
	BEQ.w	@IsStoryMode
	RTS
@IsStoryMode:
	TST.b	sPlayer_IsCpu(A0)
	BEQ.w	@IsNotCpu
	RTS
	
@IsNotCpu:
	CMPI.b	#cutID_Satan, rOnePlayer_CurCutscene
	BEQ.w	OnePlayer_LoadBattleMusic
	CMPI.b	#musID_Warning, $00FF111A
	BEQ.w	@WarningAlreadyPlaying
	CMPI.w	#$003C, $00FF1F1C
	BCC.w	@TriggerWarningMusic
	RTS
@TriggerWarningMusic:
	MOVE.b	#musID_Warning, D0
	MOVE.b	D0, $00FF111A
	JSR	SndDrv_PlayClearEffect
	JMP	SndDrv_PlayMusicId
@WarningAlreadyPlaying:
	CMPI.w	#$0036, $00FF1F1C
	BCS.w	OnePlayer_LoadBattleMusic
	RTS
	
OnePlayer_LoadBattleMusic:
	CLR.w	D1
	MOVE.b	rOnePlayer_CurStage, D1
	MOVE.b	@BattleMusicTable(PC,D1.w), D0
	CMP.b	$00FF111A, D0
	BNE.w	@MusicNotYetQueued
	RTS
@MusicNotYetQueued:
	MOVE.b	D0, $00FF111A
	JSR	SndDrv_PlayClearEffect
	JMP	SndDrv_PlayMusicId
@BattleMusicTable:
	dc.b    musID_Morning
	dc.b    musID_Morning
	dc.b    musID_Morning
	dc.b    musID_Theme
	dc.b    musID_Theme
	dc.b    musID_Theme
	dc.b    musID_Theme
	dc.b    musID_Theme
	dc.b    musID_Theme
	dc.b    musID_Theme
	dc.b    musID_Theme
	dc.b    musID_Sticker
	dc.b    musID_Sticker
	dc.b    musID_Sticker
	dc.b    musID_Sticker
	dc.b    musID_Final
loc_00002EAA:
	dc.b	$04, $04, $04 
	dc.b	$05
	dc.b	$05
	dc.b	$05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05 
loc_00002EBA:
	MOVE.b	#4, D2
	CMPI.b	#1, rCurGameMode
	BEQ.w	@IsVSMode
	CLR.w	D1
	MOVE.b	rOnePlayer_CurStage, D1
	MOVE.b	loc_00002EAA(PC,D1.w), D2
@IsVSMode:
	MOVE.w	#$00FF, D1
	CLR.w	D0
	LEA	$00FF111C, A1
	LEA	loc_00002F8C, A2
loc_00002EE8:
	MOVE.b	(A2,D0.w), (A1)+
	ADDQ.b	#1, D0
	CMP.b	D2, D0
	BCS.w	loc_00002EF6
	CLR.b	D0
loc_00002EF6:
	DBF	D1, loc_00002EE8
	MOVE.w	#$00FF, D1
	LEA	$00FF111C, A1
loc_00002F04:
	JSR	UpdateRNG
	ANDI.w	#$00FF, D0
	MOVE.b	(A1,D0.w), D2
	MOVE.b	(A1,D1.w), (A1,D0.w)
	MOVE.b	D2, (A1,D1.w)
	DBF	D1, loc_00002F04
	MOVE.w	#$00FF, D1
	LEA	$00FF121C, A2
loc_00002F2A:
	MOVE.b	(A1)+, (A2)+
	DBF	D1, loc_00002F2A
	CMPI.b	#1, rCurGameMode
	BEQ.w	@IsVSMode
	RTS
@IsVSMode:
	MOVE.w	#$00F7, D1
	CLR.w	D0
	LEA	$00FF1224, A1
	LEA	loc_00002F8C, A2
loc_00002F50:
	MOVE.b	(A2,D0.w), (A1)+
	ADDQ.b	#1, D0
	CMPI.b	#5, D0
	BCS.w	loc_00002F60
	CLR.b	D0
loc_00002F60:
	DBF	D1, loc_00002F50
	MOVE.w	#$00F7, D1
	LEA	$00FF1224, A1
loc_00002F6E:
	MOVE.w	#$00F8, D0
	JSR	loc_00001202
	MOVE.b	(A1,D0.w), D2
	MOVE.b	(A1,D1.w), (A1,D0.w)
	MOVE.b	D2, (A1,D1.w)
	DBF	D1, loc_00002F6E
	RTS
loc_00002F8C:
	dc.b	$00, $01, $03, $04, $05, $06, $02, $00 
loc_00002F94:
	CLR.w	D1
	MOVE.b	$2B(A0), D1
	CMPI.b	#5, D1
	BCS.w	loc_00002FA6
	MOVE.b	#4, D1
loc_00002FA6:
	LSL.w	#1, D1
	MOVE.w	loc_00002FAE(PC,D1.w), D0
	RTS
loc_00002FAE:
	dc.w 	$000C, $0008, $0004, $0002, $0000


OnePlayer_AdvanceNextStage:
	CMPI.b	#stgID_Satan, rOnePlayer_CurStage
	BCC.w	@AtFinalStage
	ADDQ.b	#1, rOnePlayer_CurStage
	CLR.w	D0
	MOVE.b	rOnePlayer_CurCutscene, D0
	LEA	rOnePlayer_DefeatedEnemyTbl, A1
	MOVE.b	#$FF, (A1,D0.w)
	MOVE.b	#0, rBytecode_Ret
	CMPI.b	#stgID_Draco, rOnePlayer_CurStage
	BNE.w	@NotAtDraco
	MOVE.b	#2, rBytecode_Ret
@NotAtDraco:
	RTS
@AtFinalStage:
	MOVE.b	#1, rBytecode_Ret
	RTS
	
	
loc_00003006:
	LEA	loc_00003010, A1
	BRA.w	ObjSys_InitObjWithFunc
loc_00003010:
	MOVE.b	#$FF, $8(A0)
	MOVE.l	#loc_00003048, $32(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BSR.w	ObjSys_UpdateObjAnim
	MOVE.b	$9(A0), D0
	CMP.b	$8(A0), D0
	BNE.w	loc_00003034
	RTS
loc_00003034:
	MOVE.b	D0, $8(A0)
	MOVE.w	#$8A00, D0
	MOVE.b	$8(A0), D0
	SWAP	D0
	JMP	Video_QueueBgMapSpecial
loc_00003048:
	dc.b	$F3
	dc.b	$00 
	dc.b	$02
	dc.b	$04 
	dc.b	$04
	dc.b	$05 
	dc.b	$02
	dc.b	$04 
	dc.b	$FF
	dc.b	$00 
	dc.l	loc_00003048

Battle_LoadObjects:
	MOVE.w	#$CB1E, $00FF18A8
	TST.b	rCurMainPlayer
	BEQ.w	loc_00003070
	MOVE.w	#$CC22, $00FF18A8
loc_00003070:
	CLR.w	rFrameTimer
	CLR.w	rMinuteTimer+2
	CLR.b	$00FF1883
	TST.b	rCurGameMode
	BNE.w	@NotStoryMode
	CLR.b	$00FF111A
	BSR.w	OnePlayer_LoadBattleMusic
@NotStoryMode:
	BSR.w	Video_ClearScrollTables
	MOVE.w	#$8B00, D0
	MOVE.b	rVDPRegBTbl+rvtMode3, D0
	ORI.b	#4, D0
	MOVE.b	D0, rVDPRegBTbl+rvtMode3
	
	; Init Player
	LEA	Battle_PlayerObjStart, A1
	BSR.w	ObjSys_InitObjWithFunc
	MOVE.b	#$F1, $0(A1)
	MOVE.b	#0, sPlayer_IsCpu(A1)
	MOVE.b	#3, $7(A1)
	MOVE.l	$00FF187A, $A(A1)
	MOVE.w	$00FF187E, $16(A1)
	MOVEA.l	A1, A2
	
	; Init 2nd Player / CPU
	LEA	Battle_PlayerObjStart, A1
	BSR.w	ObjSys_InitObjWithFunc
	MOVE.b	#$F2, $0(A1)
	MOVE.b	#1, sPlayer_IsCpu(A1)
	MOVE.b	#3, $7(A1)
	MOVE.l	A1, sPlayer_Opponent(A2)
	MOVE.l	A2, sPlayer_Opponent(A1)

	BSR.w	Battle_LoadCarbuncleObj
	BSR.w	loc_00003006
	JSR	loc_0000F57C
	BSR.w	loc_00003130
	CMPI.b	#2, rCurGameMode
	BNE.w	@NotEndless
	MOVE.l	#$800F0000, D0
	JSR	Video_QueueBgMapSpecial
	BSR.w	loc_00007F5E
@NotEndless:
	RTS
loc_00003130:
	MOVE.l	#$80000000, D0
	MOVE.b	rCurGameMode, D1
	ANDI.b	#3, D1
	BNE.w	@IsStoryOrTutorialMode
	MOVE.l	#$80060000, D0
@IsStoryOrTutorialMode:
	JMP	Video_QueueBgMapSpecial
loc_00003150:
	MOVE.b	rCurGameMode, D2
	BTST.l	#2, D2
	BNE.w	@NotTutorialMode
	CLR.w	D0
	MOVE.b	$2A(A0), D0
	LEA	$00FF0144, A1
	MOVE.b	#$7F, (A1,D0.w)
@NotTutorialMode:
	RTS
	
Battle_PlayerObjStart:
	JSR	loc_0000F134
	BSR.w	loc_00003A04 ; Load pieces into piece queue?
	MOVE.b	$00FF1888, D0
	CMP.b	$2A(A0), D0
	BEQ.w	loc_0000319A
	BTST.b	#GameModeID_VS, rCurGameMode
	BEQ.w	loc_0000319A
	BRA.w	loc_00006D56

loc_0000319A:
	CLR.w	D0
	MOVE.b	sPlayer_IsCpu(A0), D0
	LEA	$00FF18C8, A1
	MOVE.b	#0, (A1,D0.w)
	BSR.w	loc_00004B26
	ORI	#$0700, SR
	ANDI	#$F8FF, SR
	CLR.l	D0
	BSR.w	loc_00008832
	CLR.w	D1
	BSR.w	loc_000080EA
	BSR.w	loc_000080C8
	BSET.b	#0, $7(A0)
	BSR.w	loc_000033EA
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BTST.b	#0, $7(A0)
	BEQ.w	loc_000031E2
	RTS
loc_000031E2:
	BSR.w	loc_000088E0
	BSR.w	loc_000087B6
	MOVE.w	#1, D1
	BSR.w	loc_000080EA
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BTST.b	#1, $7(A0)
	BEQ.w	loc_00003202
	RTS
loc_00003202:
	BSR.w	loc_00003150
loc_00003206:
	CLR.b	$9(A0)
	LEA	$00FF18D0, A1
	CLR.w	D0
	MOVE.b	$2A(A0), D0
	MOVE.b	#0, (A1,D0.w)
	BSR.w	loc_00003BB2
	BSR.w	loc_000083FC
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BTST.b	#2, $7(A0)
	BEQ.w	loc_00003234
	RTS
loc_00003234:
	JSR	loc_0000FDD8
	JSR	loc_000074A0
	BSR.w	loc_00007F1A
	BSR.w	Battle_PlayWarningMusicIfStoryMode
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVE.b	#0, $00FF1C2C
	JSR	loc_0000FEB8
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVE.b	#$FF, $00FF1C2C
	JSR	loc_0000FEB8
	BSR.w	ObjSys_UpdateObjNextOpTimer
	CLR.w	D0
	MOVE.b	$2A(A0), D0
	LEA	$00FF1C28, A1
	CLR.b	(A1,D0.w)
	JSR	loc_0000F9E8
	TST.b	debug_puyoDrop
	BEQ.w	@SkipUselessFunc
	JSR	Battle_PlayerObj_UselessFunc
@SkipUselessFunc:
	BSR.w	ObjSys_UpdateObjNextOpTimer
	TST.b	debug_puyoDrop
	BEQ.w	loc_000032B2
	BSR.w	loc_00004C0A
	BTST.l	#5, D0
	BNE.w	loc_000032B2
	RTS
loc_000032B2:
	BSR.w	loc_0000436E
	BCS.w	loc_00006490
	JSR	loc_0000F1E6
	BSR.w	ObjSys_UpdateObjNextOpTimer
	ADDQ.b	#1, $26(A0)
	MOVE.b	$7(A0), D0
	ANDI.b	#3, D0
	BEQ.w	loc_000032EC
	BTST.b	#3, $7(A0)
	BNE.w	loc_000032E0
	RTS
loc_000032E0:
	BCLR.b	#3, $7(A0)
	MOVEQ	#1, D0
	BRA.w	loc_00008832
loc_000032EC:
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BSR.w	loc_00004EAA
	MOVE.w	D1, $26(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	ORI	#$0700, SR
	BSR.w	loc_00004CCC
	ANDI	#$F8FF, SR
	BSR.w	ObjSys_UpdateObjNextOpTimer
	TST.w	$26(A0)
	BNE.w	loc_00003330
	BSR.w	loc_00002F94
	BSR.w	ObjSys_SetObjNextOpTimer
	BSR.w	ObjSys_UpdateObjNextOpTimer
	TST.b	$9(A0)
	BEQ.w	loc_00003206
	BSR.w	loc_00008572
	BRA.w	loc_00003206
loc_00003330:
	LEA	$00FF18D0, A1
	CLR.w	D0
	MOVE.b	$2A(A0), D0
	MOVE.b	#$FF, (A1,D0.w)
	JSR	loc_0000F110
	BSR.w	loc_00004E12
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BSR.w	loc_0000863E
	BSR.w	loc_00008628
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BSR.w	loc_00003EF6
	MOVE.w	#$0018, D0
	BSR.w	ObjSys_SetObjNextOpTimer
	BSR.w	loc_00003F0E
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BSR.w	loc_000087A2
	BSR.w	loc_00003F62
	JSR	loc_0001DC50
	MOVE.w	#$0018, D0
	BSR.w	ObjSys_SetObjNextOpTimer
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BSR.w	loc_00004302
	BSET.b	#4, $7(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BTST.b	#4, $7(A0)
	BEQ.w	loc_000033A6
	BRA.w	loc_0000435E
loc_000033A6:
	BSR.w	loc_00008836
	BSR.w	loc_0000888A
	BSR.w	ObjSys_UpdateObjNextOpTimer
	ADDQ.b	#1, $9(A0)
	BCC.w	loc_000033C0
	MOVE.b	#$FF, $9(A0)
loc_000033C0:
	BRA.w	loc_000032EC
loc_000033C4:
	BCLR.b	#0, $7(A0)
	CLR.w	D0
	MOVE.b	rOnePlayer_CurStage, D0
	MOVE.b	loc_000033DA(PC,D0.w), $8(A0)
	RTS
loc_000033DA:
	dc.b 	$07, $09, $0B, $08, $09, $0A, $0B, $0C, $0D, $0E, $0F, $11, $11, $12, $12, $13
loc_000033EA:
	MOVE.b	rCurGameMode, D0
	ANDI.b	#3, D0
	BEQ.b	loc_000033C4
	LEA	loc_0000343C, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCC.w	loc_00003406
	RTS
loc_00003406:
	MOVE.b	#$FF, $7(A1)
	MOVE.b	$2A(A0), $2A(A1)
	MOVE.l	A0, $2E(A1)
	CLR.w	D0
	MOVE.b	$2A(A0), D0
	LSL.w	#2, D0
	MOVE.w	loc_00003434(PC,D0.w), $A(A1)
	MOVE.w	loc_00003436(PC,D0.w), D2
	MOVE.w	#5, $26(A1)
	MOVEA.l	A1, A2
	BRA.w	loc_00003642
loc_00003434:
	dc.w	$00A0 
loc_00003436:
	dc.w	$00E4, $0180, $015C 
loc_0000343C:
	MOVE.w	#$8000, D0
	MOVE.b	$2A(A0), D0
	ADDQ.b	#3, D0
	SWAP	D0
	CLR.w	D0
	JSR	Video_QueueBgMapSpecial
	MOVE.w	#7, $28(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVE.w	#$8300, D0
	MOVE.b	$2A(A0), D0
	SWAP	D0
	MOVE.w	$28(A0), D0
	JSR	Video_QueueBgMapSpecial
	SUBQ.w	#1, $28(A0)
	BCS.w	loc_00003478
	RTS
loc_00003478:
	CLR.w	D0
	MOVE.b	$2A(A0), D0
	LSL.w	#1, D0
	LEA	$00FF010E, A1
	MOVE.w	(A1,D0.w), $26(A0)
	MOVE.w	#$00C0, $E(A0)
	MOVE.w	#$8800, D0
	MOVE.b	$2A(A0), D0
	SWAP	D0
	MOVE.w	#$8000, D0
	MOVE.b	$27(A0), D0
	JSR	Video_QueueBgMapSpecial
	MOVE.b	#sfxID_6C, D0
	JSR	SndDrv_QueueSoundEffect
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVE.w	#$0180, $28(A0)
	MOVE.w	#$0080, D4
	MOVE.w	#$CC0A, D5
	MOVE.w	#$8500, D6
	TST.b	$2A(A0)
	BEQ.w	loc_000034DA
	MOVE.w	#$CC3A, D5
	MOVE.w	#$A500, D6
loc_000034DA:
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BSR.w	loc_00004C0A
	ANDI.b	#$F0, D0
	BNE.w	loc_00003568
	BSR.w	loc_00004C0A
	BTST.l	#0, D0
	BNE.w	loc_00003500
	BTST.l	#1, D0
	BNE.w	loc_00003510
	RTS
loc_00003500:
	MOVE.w	#$FFFF, D1
	TST.w	$26(A0)
	BEQ.w	loc_00003566
	BRA.w	loc_0000351E
loc_00003510:
	MOVE.w	#1, D1
	CMPI.w	#4, $26(A0)
	BCC.w	loc_00003566
loc_0000351E:
	CMPI.b	#2, rCurGameMode
	BNE.w	@NotEndlessMode
	ASL.b	#1, D1
@NotEndlessMode:
	MOVE.w	#$8800, D0
	MOVE.b	$2A(A0), D0
	SWAP	D0
	MOVE.w	$26(A0), D0
	JSR	Video_QueueBgMapSpecial
	ADD.w	D1, $26(A0)
	MOVE.w	#$8800, D0
	MOVE.b	$2A(A0), D0
	SWAP	D0
	MOVE.w	#$8000, D0
	MOVE.b	$27(A0), D0
	JSR	Video_QueueBgMapSpecial
	MOVE.b	#sfxID_ChangeSelection, D0
	JSR	SndDrv_QueueSoundEffect
loc_00003566:
	RTS
loc_00003568:
	MOVE.b	#sfxID_ConfirmSelection, D0
	JSR	SndDrv_QueueSoundEffect
	CLR.w	$28(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVE.w	#$0018, $28(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVE.w	#$8800, D0
	MOVE.b	$2A(A0), D0
	SWAP	D0
	MOVE.w	$26(A0), D0
	MOVE.w	$28(A0), D1
	ANDI.b	#2, D1
	ROR.w	#2, D1
	OR.w	D1, D0
	JSR	Video_QueueBgMapSpecial
	SUBQ.w	#1, $28(A0)
	BEQ.w	loc_000035AE
	RTS
loc_000035AE:
	MOVEA.l	$2E(A0), A1
	MOVE.w	$26(A0), D0
	MOVE.b	D0, $2B(A1)
	CLR.b	$8(A1)
	CLR.w	D0
	MOVE.b	$2A(A0), D0
	LSL.w	#1, D0
	LEA	$00FF010E, A1
	MOVE.w	$26(A0), (A1,D0.w)
	CLR.b	$7(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	CLR.w	$26(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVE.w	#$8300, D0
	MOVE.b	$2A(A0), D0
	SWAP	D0
	MOVE.w	$26(A0), D0
	JSR	Video_QueueBgMapSpecial
	ADDQ.w	#1, $26(A0)
	CMPI.w	#8, $26(A0)
	BCC.w	loc_00003606
	RTS
loc_00003606:
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVE.w	#$8300, D0
	MOVE.b	$2A(A0), D0
	SWAP	D0
	MOVE.b	#$FF, D0
	JSR	Video_QueueBgMapSpecial
	MOVE.w	#$8000, D0
	MOVE.b	$2A(A0), D0
	ADDQ.b	#3, D0
	SWAP	D0
	MOVE.w	#$FF00, D0
	JSR	Video_QueueBgMapSpecial
	MOVEA.l	$2E(A0), A1
	BCLR.b	#0, $7(A1)
	BRA.w	ObjSys_DeleteObjectA0
loc_00003642:
	MOVE.w	#4, D0
	MOVE.w	#$0108, D1
	BTST.b	#1, rCurGameMode
	BNE.w	loc_0000365A
	MOVE.w	#$0120, D1
loc_0000365A:
	LEA	loc_000036E2, A1
	BSR.w	loc_00002AB0
	BCS.w	loc_000036CA
	MOVE.b	$2A(A0), $2A(A1)
	MOVE.l	A2, $2E(A1)
	MOVE.b	#$80, $6(A1)
	MOVE.b	#$21, $8(A1)
	MOVE.b	D0, $9(A1)
	MOVE.w	D2, $32(A1)
	MOVE.w	D1, $34(A1)
	MOVE.b	#$80, $36(A1)
	MOVEA.l	A1, A3
	LEA	loc_000038AE, A1
	BSR.w	loc_00002AB0
	BCS.w	loc_000036CA
	MOVE.l	A2, $2E(A1)
	MOVE.l	A3, $32(A1)
	MOVE.b	#$80, $6(A1)
	MOVE.b	#$21, $8(A1)
	MOVE.b	D0, $9(A1)
	ADDQ.b	#5, $9(A1)
	MOVE.w	D2, $A(A1)
	MOVE.w	D1, $E(A1)
	ADDI.w	#$0010, $E(A1)
loc_000036CA:
	SUBI.w	#$0010, D1
	BTST.b	#1, rCurGameMode
	BNE.w	loc_000036DC
	SUBQ.w	#8, D1
loc_000036DC:
	DBF	D0, loc_0000365A
	RTS
loc_000036E2:
	MOVEA.l	$2E(A0), A1
	TST.b	$7(A1)
	BEQ.w	loc_000037DE
	MOVE.b	#0, D1
	MOVE.b	$9(A0), D0
	CMP.b	$27(A1), D0
	BEQ.w	loc_00003702
	MOVE.b	#$80, D1
loc_00003702:
	MOVE.b	$36(A0), D0
	EOR.b	D1, D0
	BPL.w	loc_00003724
	ORI.b	#1, D1
	MOVE.b	D1, $36(A0)
	CLR.l	$12(A0)
	CLR.w	D0
	MOVE.b	$2A(A0), D0
	ROR.w	#1, D0
	MOVE.w	D0, $1E(A0)
loc_00003724:
	MOVE.b	$36(A0), D0
	ANDI.b	#$7F, D0
	BNE.w	loc_00003766
	BTST.b	#7, $36(A0)
	BEQ.w	loc_0000373C
	RTS
loc_0000373C:
	ADDQ.b	#8, $26(A0)
	MOVE.b	$9(A0), D0
	ADD.b	D0, $26(A0)
	MOVE.b	$26(A0), D0
	ORI.b	#$80, D0
	MOVE.w	#$0800, D1
	JSR	SignedSinWithMul
	SWAP	D2
	ADD.w	$34(A0), D2
	MOVE.w	D2, $E(A0)
	RTS
loc_00003766:
	SUBQ.b	#1, $36(A0)
	MOVE.b	$36(A0), D0
	BMI.w	loc_000037B8
	LSL.b	#1, D0
	NEG.b	D0
	MOVE.w	$34(A0), D1
	SUBI.w	#$0078, D1
	LSL.w	#8, D1
	JSR	SignedSinWithMul
	SWAP	D2
	ADD.w	$34(A0), D2
	MOVE.w	D2, $E(A0)
	MOVE.w	#$3000, D1
	JSR	SignedCosWithMul
	SWAP	D2
	SUBI.w	#$0030, D2
	TST.b	$2A(A0)
	BEQ.w	loc_000037AA
	NEG.w	D2
loc_000037AA:
	ADD.w	$32(A0), D2
	MOVE.w	D2, $A(A0)
	CLR.b	$26(A0)
	RTS
loc_000037B8:
	ANDI.b	#$7F, D0
	BEQ.w	loc_000037D6
	MOVE.b	#$8A, $6(A0)
	MOVE.w	#$4000, $1A(A0)
	BSR.w	ObjSys_UpdatePosInterpMove
	BCS.w	loc_000037D6
	RTS
loc_000037D6:
	MOVE.w	#$0078, $E(A0)
	RTS
loc_000037DE:
	BRA.w	ObjSys_DeleteObjectA0
loc_000037E2:
	cmpi.b #1, (rCurGameMode).l
	bne.w ObjSys_DeleteObjectA0
	move.b #0, d1
	move.b $9(a0), d0
	cmp.b $27(a1), d0
	bne.w ObjSys_DeleteObjectA0
	move.b #$B3, $6(a0)
	move.b $2a(a1), $2a(a0)
	move.l #$10C0000, d0
	tst.b $2a(a0)
	beq.w loc_0000381E
	move.l #$1340000, d0
loc_0000381E:
	sub.l $a(a0), d0
	asr.l #6, d0
	move.l d0, $12(a0)
	move.l #$00E80000, d0
	sub.l $e(a0), d0
	asr.l #6, d0
	move.l d0, $16(a0)
	move.b #$FC, $36(a0)
	move.l $a(a0), $1e(a0)
	bsr.w ObjSys_UpdateObjNextOpTimer
	move.l $1e(a0), $a(a0)
	bsr.w ObjSys_UpdatePosInterpMove
	move.l $a(a0), $1e(a0)
	move.b $36(a0), d0
	move.w #$4000, d1
	jsr SignedSinWithMul
	swap d2
	tst.b $2a(a0)
	beq.w loc_00003872
	neg.w d2
loc_00003872:
	add.w d2, $a(a0)
	subq.b #4, $36(a0)
	bcs.w loc_00003880
	rts
loc_00003880:
	bsr.w ObjSys_UpdateObjNextOpTimer
	addq.b #8, $36(a0)
	move.b $9(a0), d0
	add.b d0, $36(a0)
	move.b $36(a0), d0
	ori.b #$80, d0
	move.w #$800, d1
	jsr SignedSinWithMul
	swap d2
	addi.w #$E8, d2
	move.w d2, $e(a0)
	rts
loc_000038AE:
	MOVEA.l	$2E(A0), A1
	TST.b	$7(A1)
	BEQ.w	ObjSys_DeleteObjectA0
	MOVE.b	#$80, D0
	MOVEA.l	$32(A0), A1
	TST.b	$36(A1)
	BEQ.w	loc_000038CC
	CLR.b	D0
loc_000038CC:
	MOVE.b	D0, $6(A0)
	RTS
loc_000038D2:
	MOVEA.l	$32(A0), A1
	MOVE.b	$26(A1), D0
	MOVE.b	$27(A1), D1
	MOVEM.l	D1/D0, -(A7)
	MOVE.w	$28(A1), $26(A1)
	MOVE.w	$2A(A1), $28(A1)
	BSR.w	loc_00003904
	MOVE.b	D0, $2A(A1)
	MOVE.b	D1, $2B(A1)
	MOVEM.l	(A7)+, D0/D1
	ADDQ.w	#1, $1E(A1)
	RTS
loc_00003904:
	MOVE.b	rCurGameMode, D0
	ANDI.b	#3, D0
	BEQ.w	loc_000039A4
	CMPI.b	#1, D0
	BEQ.w	loc_000039D4
	CLR.w	D1
	MOVE.b	$2B(A0), D1
	CMPI.b	#5, D1
	BCS.w	loc_0000392C
	MOVE.b	#4, D1
loc_0000392C:
	CLR.w	D0
	MOVE.b	loc_00003964(PC,D1.w), D0
	MOVEM.l	D2, -(A7)
	MOVE.w	D0, D1
	JSR	loc_00001202
	MOVE.b	loc_0000396A(PC,D0.w), D2
	MOVE.b	D2, D0
	EXG	D0, D1
	JSR	loc_00001202
	MOVE.b	loc_0000396A(PC,D0.w), D2
	MOVE.b	D2, D0
	MOVEM.l	(A7)+, D2
	CMPI.b	#2, rCurGameMode
	BEQ.w	loc_00003970
	RTS
loc_00003964:
	dc.b	$04, $05, $05, $05, $05, $00 
loc_0000396A:
	dc.b	$00, $01, $03, $04, $05, $02 
loc_00003970:
	MOVEM.l	D2, -(A7)
	MOVE.w	$20(A1), D2
	CMP.w	$1E(A1), D2
	BCC.w	loc_0000399E
	CLR.w	$1E(A1)
	ADDI.w	#$000C, $20(A1)
	BCC.w	loc_00003994
	MOVE.w	#$FFFF, $20(A1)
loc_00003994:
	MOVE.b	$7(A1), D0
	ADDI.b	#$19, D0
	MOVE.b	D0, D1
loc_0000399E:
	MOVEM.l	(A7)+, D2
	RTS
loc_000039A4:
	MOVEM.l	A2/D2, -(A7)
	CLR.w	D2
	MOVE.b	$20(A1), D2
	LEA	$00FF111C, A2
	TST.b	$2A(A0)
	BEQ.w	loc_000039C2
	LEA	$00FF121C, A2
loc_000039C2:
	MOVE.b	(A2,D2.w), D0
	MOVE.b	$1(A2,D2.w), D1
	ADDQ.b	#2, $20(A1)
	MOVEM.l	(A7)+, D2/A2
	RTS
loc_000039D4:
	MOVEM.l	A2/D2, -(A7)
	CLR.w	D2
	MOVE.b	$20(A1), D2
	LEA	$00FF111C, A2
	TST.b	$2B(A0)
	BEQ.w	loc_000039F2
	LEA	$00FF121C, A2
loc_000039F2:
	MOVE.b	(A2,D2.w), D0
	MOVE.b	$1(A2,D2.w), D1
	ADDQ.b	#2, $20(A1)
	MOVEM.l	(A7)+, D2/A2
	RTS

loc_00003A04:
	CLR.w	D3
	CLR.w	D4
loc_00003A08:
	LEA	loc_00003AE2, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCC.w	loc_00003A18
	RTS
loc_00003A18:
	MOVE.l	A1, $32(A0)
	CMPI.b	#2, rCurGameMode
	BNE.w	@NotEndlessMode
	MOVE.w	#$FFFF, $20(A1)
@NotEndlessMode:
	MOVE.b	rCurGameMode, D0
	OR.b	$2A(A0), D0
	CMPI.b	#5, D0
	BNE.w	loc_00003A40
loc_00003A40:
	MOVE.w	#4, D2
	MOVEM.l	D4/D3, -(A7)
loc_00003A48:
	BSR.w	loc_00003904
	MOVE.b	D0, $26(A1,D2.w)
	MOVE.b	D1, $27(A1,D2.w)
	SUBQ.w	#2, D2
	BCC.b	loc_00003A48
	MOVEA.l	A1, A2
	MOVEM.l	(A7)+, D3/D4
	CLR.w	D0
	MOVE.b	rCurGameMode, D0
	ANDI.b	#3, D0
	LSL.b	#1, D0
	OR.b	$2A(A0), D0
	MOVE.b	rCurMainPlayer, D1
	EOR.b	D1, D0
	LSL.b	#2, D0
	MOVE.w	loc_00003AE4(PC,D0.w), D1
	MOVE.w	loc_00003AE6(PC,D0.w), D2
	ADD.w	D3, D1
	ADD.w	D4, D2

	LEA	Battle_ObjNextPuyoStart, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCC.w	@InitSuccess
	RTS
@InitSuccess:
	MOVE.l	A2, $2E(A1)
	MOVE.b	#$80, $6(A1) ; Make object renderable
	MOVE.w	D1, Obj_XPos(A1) ; Init x and y pos
	MOVE.w	D2, Obj_YPos(A1)
	SUBI.w	#$0010, D2 ; Move y pos up by 16 for next obj
	MOVE.b	#$FF, $36(A1) ; Set backup sprite map id to dummy value
	LEA	Battle_ObjNextPuyoStart, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCC.w	@InitSuccess2
	RTS
@InitSuccess2:
	MOVE.l	A2, $2E(A1)
	MOVE.b	#$80, $6(A1) ; Make obj renderable
	MOVE.b	#1, $7(A1) ; Identify obj as upper half
	MOVE.w	D1, Obj_XPos(A1) ; Set screen coords
	MOVE.w	D2, Obj_YPos(A1)
	MOVE.b	#$FF, $36(A1) ; Set backup sprite map id to dummy value
	RTS
loc_00003AE2:
	RTS
loc_00003AE4:
	dc.w	$0108
loc_00003AE6:
	dc.w	$00C6
	dc.w	$0138
	dc.w	$00C6
	dc.w	$0108
	dc.w	$00C6
	dc.w	$0138
	dc.w	$00C6
	dc.w	$0108
	dc.w	$00C6
	dc.w	$0138
	dc.w	$00C6
	dc.w	$0108
	dc.w	$00C6
	dc.w	$0138
	dc.w	$00C6

Battle_ObjNextPuyoStart:
	MOVEA.l	$2E(A0), A1
	CLR.w	D1

	MOVE.b	$7(A0), D1
	MOVE.b	$26(A1,D1.w), D0
	MOVE.b	D0, Obj_SprMap(A0)

	CMP.b	$36(A0), D0
	BEQ.w	@ApplyRenderingFlags ; If our current sprite map has not changed, skip updating animation
	
    MOVE.b	D0, $36(A0) ; If it was changed, update the backup value and go set the correct animation
	CLR.w	$22(A0)
	BSR.w	@UpdateAnim
@ApplyRenderingFlags:
	MOVE.b	#$80, $6(A0) ; Set object to render
	TST.b	$7(A0)
	BEQ.w	@RunAnim ; If obj is the lower half, always render
	CMPI.b	#SprMapID_Carbuncle, Obj_SprMap(A0)
	BCS.w	@RunAnim ; If obj is upper half, and sprite is not big puyo or carbuncle, always render.
	MOVE.b	#0, $6(A0) ; Disable upper half rendering
@RunAnim:
	BRA.w	ObjSys_UpdateObjAnim
@UpdateAnim:
	MOVE.l	#@Anim_PuyoBounce, $32(A0)
	CMPI.b	#$19, $8(A0)
	BEQ.w	@IsSpecialCarbuncle
	BCC.w	@IsSpecialBigPuyo
	RTS
@IsSpecialCarbuncle:
	MOVE.l	#loc_000075A6, $32(A0)
	RTS
@IsSpecialBigPuyo:
	MOVE.l	#@Anim_BigPuyo, $32(A0)
	RTS
@Anim_PuyoBounce:
	dc.b	$F0
	dc.b	$00 
	dc.b	$01
	dc.b	$02 
	dc.b	$00
	dc.b	$00 
	dc.b	$02
	dc.b	$03 
	dc.b	$00
	dc.b	$00 
	dc.b	$01
	dc.b	$02 
	dc.b	$00
	dc.b	$00 
	dc.b	$02
	dc.b	$03 
	dc.b	$FF
	dc.b	$00 
	dc.l	@Anim_PuyoBounce
; This used to be the anim for the carbuncle piece.  Identical to anim at loc_000075A6
@dead_Anim_CarbunclePiece:
	dc.b	$04, $00, $05, $01, $04, $00, $05, $02, $FF, $00
	dc.l    @dead_Anim_CarbunclePiece
@Anim_BigPuyo:
	dc.b    $F0, $00, $01, $01, $00, $00, $01, $02, $00, $00, $01, $01, $00, $00, $01, $02, $FF, $00 
	dc.l	@Anim_BigPuyo

loc_00003BB2:
	TST.w	$14(A0)
	BNE.w	loc_00003BBC
	RTS
loc_00003BBC:
	BSR.w	loc_00005022
	ADDA.l	#$0000000C, A2
	LEA	$00FF18B4, A3
	BSR.w	loc_00003CE0
	BSR.w	loc_00003D0E
	BSR.w	loc_00003D38
	SUB.w	D7, $14(A0)
	LEA	loc_00003DBE, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCC.w	loc_00003BEC
	RTS
loc_00003BEC:
	MOVE.b	$0(A0), $0(A1)
	MOVE.b	#1, $20(A1)
	MOVE.l	A0, $2E(A1)
	MOVEA.l	A1, A2
	MOVE.b	$2A(A0), $2A(A1)
	BSET.b	#2, $7(A0)
	MOVE.w	#2, D0
	TST.b	rCurGameMode
	BNE.w	loc_00003C2A
	CMPI.b	#3, $00FF0104
	BCC.w	loc_00003C2A
	MOVE.b	$00FF0104, D0
loc_00003C2A:
	LSL.w	#1, D0
	MOVE.w	loc_00003C4A(PC,D0.w), D3
	MOVE.w	#5, D2
	BSR.w	loc_00005064
loc_00003C38:
	TST.b	$C(A3,D2.w)
	BEQ.w	loc_00003C44
	BSR.w	loc_00003C50
loc_00003C44:
	DBF	D2, loc_00003C38
	RTS
loc_00003C4A:
	dc.w	$0003, $0002, $0000
loc_00003C50:
	LEA	loc_00003D84, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCC.w	loc_00003C60
	RTS
loc_00003C60:
	MOVE.b	$0(A0), $0(A1)
	MOVE.b	$2A(A0), $2A(A1)
	MOVE.b	#$85, $6(A1)
	MOVE.b	#6, $8(A1)
	MOVE.b	$C(A3,D2.w), D4
	ADDI.b	#$13, D4
	MOVE.b	D4, $9(A1)
	MOVE.l	A2, $2E(A1)
	ADDQ.w	#1, $26(A2)
	ADDQ.b	#1, $20(A2)
	JSR	loc_0000F0D2
	MOVE.w	D2, D4
	MOVE.w	D4, $1A(A1)
	LSL.w	#4, D4
	ADD.w	D0, D4
	ADDQ.w	#8, D4
	MOVE.w	D4, $A(A1)
	MOVE.w	#1, $1C(A1)
	MOVE.w	#$FFFF, D4
	LSL.w	#4, D4
	ADD.w	D1, D4
	ADDQ.w	#8, D4
	MOVE.w	D4, $E(A1)
	SUBI.w	#$000F, D4
	MOVE.w	D4, $20(A1)
	MOVE.w	D2, D4
	LSL.w	#1, D4
	MOVE.w	loc_00003CD4(PC,D4.w), D5
	MOVE.w	D5, $1E(A1)
	MOVE.w	D3, $16(A1)
	RTS
loc_00003CD4:
	dc.w	$2400, $2600, $2000, $2A00, $2200, $2800 
loc_00003CE0:
	MOVE.w	#5, D0
loc_00003CE4:
	MOVE.b	D0, (A3,D0.w)
	DBF	D0, loc_00003CE4
	MOVE.w	#5, D1
loc_00003CF0:
	MOVE.w	#6, D0
	JSR	loc_00001202
	MOVE.b	(A3,D0.w), D2
	MOVE.b	(A3,D1.w), (A3,D0.w)
	MOVE.b	D2, (A3,D1.w)
	DBF	D1, loc_00003CF0
	RTS
loc_00003D0E:
	MOVE.w	#5, D0
loc_00003D12:
	CLR.b	D1
	MOVE.w	D0, D2
	LSL.w	#1, D2
	MOVE.w	#$000C, D3
loc_00003D1C:
	TST.b	(A2,D2.w)
	BNE.w	loc_00003D26
	ADDQ.b	#1, D1
loc_00003D26:
	ADDI.w	#$000C, D2
	DBF	D3, loc_00003D1C
	MOVE.b	D1, $6(A3,D0.w)
	DBF	D0, loc_00003D12
	RTS
loc_00003D38:
	MOVE.w	#5, D0
loc_00003D3C:
	CLR.b	$C(A3,D0.w)
	DBF	D0, loc_00003D3C
	MOVE.w	$14(A0), D0
	CMPI.w	#$001F, D0
	BCS.w	loc_00003D54
	MOVE.w	#$001E, D0
loc_00003D54:
	SUBQ.w	#1, D0
	CLR.w	D1
	CLR.w	D7
loc_00003D5A:
	CLR.w	D2
	MOVE.b	(A3,D1.w), D2
	MOVE.b	$C(A3,D2.w), D3
	CMP.b	$6(A3,D2.w), D3
	BCC.w	loc_00003D72
	ADDQ.b	#1, $C(A3,D2.w)
	ADDQ.w	#1, D7
loc_00003D72:
	ADDQ.b	#1, D1
	CMPI.b	#6, D1
	BCS.w	loc_00003D7E
	CLR.b	D1
loc_00003D7E:
	DBF	D0, loc_00003D5A
	RTS
loc_00003D84:
	BSR.w	loc_00003E84
	BCS.w	loc_00003D8E
	RTS
loc_00003D8E:
	CLR.w	D0
	MOVE.b	$9(A0), D0
	SUBI.w	#$0014, D0
loc_00003D98:
	MOVEM.l	D0, -(A7)
	BSR.w	loc_00004ACC
	MOVEM.l	(A7)+, D0
	SUBQ.w	#1, $1C(A0)
	DBF	D0, loc_00003D98
	MOVEA.l	$2E(A0), A1
	SUBQ.w	#1, $26(A1)
	MOVE.b	$9(A0), $9(A1)
	BRA.w	loc_00004576
loc_00003DBE:
	MOVE.w	$26(A0), $28(A0)
	BSR.w	loc_00005022
	ANDI.w	#$007F, D0
	MOVE.w	D0, $2C(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVE.w	$26(A0), D0
	CMP.w	$28(A0), D0
	BEQ.w	loc_00003E26
	MOVE.w	D0, $28(A0)
	MOVE.w	$20(A0), $38(A0)
	BTST.b	#0, $7(A0)
	BNE.w	loc_00003E26
	CLR.b	D0
	MOVE.b	$2A(A0), D0
	EORI.b	#1, D0
	CMPI.b	#$14, $9(A0)
	BNE.w	@DontPlayMinorFall
	CMPI.b	#cutID_Satan, rOnePlayer_CurCutscene
	BEQ.w	@DontPlayMinorFall
	SUBQ.b	#2, D0
@DontPlayMinorFall:
	ADDI.b	#sfxID_MajorGarbagePuyoFall1, D0
	JSR	SndDrv_QueueSoundEffect
	BSET.b	#0, $7(A0)
loc_00003E26:
	MOVE.b	$36(A0), D0
	MOVE.w	$38(A0), D1
	MOVE.w	$2C(A0), D3
	MOVE.w	#5, D4
	LEA	rScrollYScanFront, A2
loc_00003E3C:
	ANDI.b	#$7F, D0
	JSR	SignedSinWithMul
	SWAP	D2
	MOVE.w	D2, (A2,D3.w)
	ADDI.b	#$20, D0
	ADDQ.w	#4, D3
	DBF	D4, loc_00003E3C
	ADDI.b	#$18, $36(A0)
	TST.w	$38(A0)
	BEQ.w	loc_00003E6C
	SUBI.w	#$0040, $38(A0)
	RTS
loc_00003E6C:
	TST.w	$26(A0)
	BEQ.w	loc_00003E76
	RTS
loc_00003E76:
	MOVEA.l	$2E(A0), A1
	BCLR.b	#2, $7(A1)
	BRA.w	ObjSys_DeleteObjectA0
loc_00003E84:
	MOVE.l	$E(A0), D0
	MOVE.l	$16(A0), D1
	ADD.l	D0, D1
	MOVE.l	D0, D2
	SWAP	D2
	MOVE.l	D1, D3
	SWAP	D3
	SUB.w	$20(A0), D2
	SUB.w	$20(A0), D3
	EOR.l	D2, D3
	BTST.l	#4, D3
	BEQ.w	loc_00003ECC
	MOVE.b	#2, D0
	BSR.w	loc_0000483E
	BTST.l	#0, D0
	BEQ.w	loc_00003EC8
	SWAP	D1
	ANDI.b	#$F8, D1
	MOVE.w	D1, $E(A0)
	ORI	#1, SR
	RTS
loc_00003EC8:
	ADDQ.w	#1, $1C(A0)
loc_00003ECC:
	MOVE.l	D1, $E(A0)
	CLR.l	D0
	MOVE.w	$1E(A0), D0
	MOVE.l	$16(A0), D1
	ADD.l	D0, D1
	CMPI.l	#$00080000, D1
	BCS.w	loc_00003EEC
	MOVE.l	#$00080000, D1
loc_00003EEC:
	MOVE.l	D1, $16(A0)
	ANDI	#$FFFE, SR
	RTS
loc_00003EF6:
	BSR.w	loc_00005022
	MOVEA.l	A2, A3
	ADDA.l	#$00000138, A3
	MOVE.w	#$0053, D0
loc_00003F06:
	MOVE.w	(A2)+, (A3)+
	DBF	D0, loc_00003F06
	RTS
loc_00003F0E:
	BSR.w	loc_00005022
	ADDA.l	#$00000018, A2
	MOVEA.l	A2, A3
	ADDA.l	#$00000090, A3
	MOVEA.l	A3, A4
	ADDA.l	#$000000A8, A4
	CLR.w	D0
	MOVE.b	$25(A0), D1
	ANDI.b	#1, D1
	EORI.b	#1, D1
	CLR.b	D2
	SUB.b	D1, D2
loc_00003F3A:
	MOVE.b	(A3,D0.w), D1
	BMI.w	loc_00003F4C
	MOVE.b	(A4,D0.w), D3
	AND.b	D2, D3
	MOVE.b	D3, (A2,D0.w)
loc_00003F4C:
	ADDQ.w	#2, D0
	CMPI.w	#$0090, D0
	BCS.b	loc_00003F3A
	ORI	#$0700, SR
	BSR.w	loc_00004CCC
	ANDI	#$F8FF, SR
	RTS
loc_00003F62:
	BSR.w	loc_00005022
	BSR.w	loc_00005064
	ADDQ.w	#8, D0
	MOVE.w	D0, D2
	ADDQ.w	#8, D1
	MOVE.w	D1, D3
	ADDA.l	#$00000018, A2
	MOVEA.l	A2, A3
	ADDA.l	#$00000090, A3
	MOVEA.l	A3, A4
	ADDA.l	#$000000A8, A4
	CLR.w	D4
	CLR.b	D5
	CLR.w	D6
loc_00003F8E:
	MOVE.b	(A3,D4.w), D7
	BMI.w	loc_00003FAA
	BTST.l	#6, D7
	BEQ.w	loc_00003FA6
	BSR.w	loc_00004088
	BRA.w	loc_00003FAA
loc_00003FA6:
	BSR.w	loc_0000402A
loc_00003FAA:
	ADDI.w	#$0010, D2
	ADDQ.b	#1, D5
	CMPI.b	#6, D5
	BCS.w	loc_00003FC0
	CLR.b	D5
	MOVE.w	D0, D2
	ADDI.w	#$0010, D3
loc_00003FC0:
	ADDQ.w	#2, D4
	CMPI.w	#$0090, D4
	BCS.b	loc_00003F8E
	BTST.b	#1, rCurGameMode
	BNE.w	loc_00003FF6
	CLR.w	D1
	CMPI.b	#1, $9(A0)
	BNE.w	loc_00003FF6
	MOVE.b	#$80, D0
	TST.b	$2A(A0)
	BEQ.w	loc_00003FF0
	MOVE.b	#pcmID_Yattana, D0
loc_00003FF0:
	JSR	SndDrv_PlayVoice
loc_00003FF6:
	CLR.w	D1
	MOVE.b	$9(A0), D1
	CMPI.b	#7, D1
	BCS.w	@NotMaxCombo
	MOVE.b	#6, D1
@NotMaxCombo:
	MOVE.b	@ComboSFXTable(PC,D1.w), D0
	CMPI.b	#cutID_Satan, rOnePlayer_CurCutscene
	BNE.w	@NotSatanStage
	MOVE.b	#sfxID_SatanPuyoClear, D0
@NotSatanStage:
	JMP	SndDrv_QueueSoundEffect
@ComboSFXTable:
	dc.b	sfxID_PuyoClear1
	dc.b	sfxID_PuyoClear2
	dc.b	sfxID_PuyoClear3
	dc.b	sfxID_PuyoClear4
	dc.b	sfxID_PuyoClear5
	dc.b	sfxID_PuyoClear6
	dc.b	sfxID_PuyoClear7
	even
loc_0000402A:
	LEA	loc_000040BC, A1
	BSR.w	loc_00002AB0
	BCC.w	loc_0000403A
	RTS
loc_0000403A:
	MOVE.b	$0(A0), $0(A1)
	MOVE.b	$2A(A0), $2A(A1)
	MOVE.b	#$80, $6(A1)
	MOVE.b	#8, $9(A1)
	MOVE.w	D2, $A(A1)
	MOVE.w	D3, $E(A1)
	MOVE.w	D2, $00FF18CA
	MOVE.w	D3, $00FF18CC
	MOVE.l	#loc_000040D2, $32(A1)
	MOVE.w	D6, $24(A1)
	ADDQ.w	#4, D6
	ANDI.w	#$000F, D6
	MOVE.b	(A4,D4.w), D7
	LSR.b	#4, D7
	ANDI.b	#7, D7
	MOVE.b	D7, $8(A1)
	RTS
loc_00004088:
	LEA	loc_000042EE, A1
	BSR.w	loc_00002AB0
	BCC.w	loc_00004098
	RTS
loc_00004098:
	MOVE.b	$0(A0), $0(A1)
	MOVE.b	#$80, $6(A1)
	MOVE.b	#6, $8(A1)
	MOVE.w	D2, $A(A1)
	MOVE.w	D3, $E(A1)
	MOVE.l	#loc_000042F8, $32(A1)
	RTS
loc_000040BC:
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BSR.w	btl_loadClearParticles
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BSR.w	ObjSys_UpdateObjAnim
	BCS.w	ObjSys_DeleteObjectA0
	RTS
loc_000040D2:
	dc.b	$08
	dc.b	$08 
	dc.b	$01
	dc.b	$04 
	dc.b	$01
	dc.b	$05 
	dc.b	$01
	dc.b	$06 
	dc.b	$FE
	dc.b	$00 
	
btl_loadClearParticles:
	MOVE.b	rCurGameMode, D2
	ANDI.b	#3, D2
	BNE.w	btl_loadPartNormal
	TST.b	$2A(A0)
	BEQ.w	btl_loadPartNormal
	CLR.w	D0
	MOVE.b	rOnePlayer_CurCutscene, D0
	LSL.b	#2, D0
	MOVEA.l	tbl_loadClearParticles(PC,D0.w), A1
	JMP	(A1)
tbl_loadClearParticles:
	dc.l	btl_loadPartNormal 
	dc.l	btl_loadPartNormal
	dc.l	btl_loadPartNormal 
	dc.l	btl_loadPartNormal
	dc.l	btl_loadPartNormal 
	dc.l    btl_loadPartWitch
	dc.l    btl_loadPartNormal
	dc.l    btl_loadPartHarpy
	dc.l    btl_loadPartNormal
	dc.l    btl_loadPartNormal
	dc.l    btl_loadPartNormal
	dc.l    btl_loadPartNormal
	dc.l    btl_loadPartNormal
	dc.l    btl_loadPartNormal
	dc.l    btl_loadPartNormal
	dc.l    btl_loadPartNormal
	
btl_loadPartHarpy:
	LEA loc_00004190, A1
	BSR.w loc_00002AB0
	BCS.b loc_0000418E
	MOVE.b $00(A0), $00(A1)
	MOVE.b #$10, $08(A1)
	BSR.w  UpdateRNG
	ANDI.b #3, D0
	ADDI.b #$F, D0
	MOVE.b D0, $09(A1)
	MOVE.w $0A(A0), $0A(A1)
	MOVE.w $0E(A0), $0E(A1)
	MOVE.w #$1400, $1C(A1)
	MOVE.w #$FFFE, $16(A1)
	MOVE.w #-1, $20(A1)
	MOVE.w #$20, $26(A1)
loc_0000418E:
	RTS
loc_00004190:
	move.w #4, d0
	bsr.w ObjSys_SetObjNextOpTimer
loc_00004198:
	bsr.w ObjSys_UpdateObjNextOpTimer
	move.b #$85, $6(a0)
	bsr.w ObjSys_UpdatePosInterpMove
loc_000041A6:
	subq.w #1, $26(a0)
	beq.w loc_000041B0
	rts
loc_000041B0:
	jmp ObjSys_DeleteObjectA0
	
btl_loadPartWitch:
	MOVE.b #$20, D0
	MOVE.w #$180, D1
	MOVE.w #3, D3
loc_000041C2:
	LEA loc_00004218, A1
	BSR.w loc_00002AB0
	BCS.b loc_00004212
	MOVE.b $00(A0), $00(A1)
	MOVE.b #$6, $08(A1)
	MOVE.b #$F, $09(A1)
	MOVE.w $0A(A0), $0A(A1)
	MOVE.w $0E(A0), $0E(A1)
	MOVE.w #$18, $26(A1)
	MOVEM.l D0,-(SP)
	JSR SignedSinWithMul
	MOVE.l D2, $12(A1)
	JSR SignedCosWithMul
	MOVE.l D2, $16(A1)
	MOVEM.l (SP)+,D0
	ADDI.b  #$40, D0
loc_00004212:
	DBF D3, loc_000041C2
	RTS
loc_00004218:
	move.w #4, d0
	bsr.w ObjSys_SetObjNextOpTimer
loc_00004220:
	bsr.w ObjSys_UpdateObjNextOpTimer
	move.b #$83, $6(a0)
loc_0000422A:
	jsr ObjSys_UpdatePosInterpMove
	subq.w #1, $26(a0)
	beq.w loc_0000432A
	rts
loc_0000432A:
	move.w #4, d0
loc_0000423E:
	bsr.w ObjSys_SetObjNextOpTimer
	bsr.w ObjSys_UpdateObjNextOpTimer
	jmp ObjSys_DeleteObjectA0
	
btl_loadPartNormal:
	MOVE.w	#3, D3
	MOVE.w	#$0400, D1
loc_00004254:
	LEA	loc_000042BE, A1
	BSR.w	loc_00002AB0
	BCS.b	loc_000042B8
	MOVE.b	$0(A0), $0(A1)
	MOVE.b	$8(A0), $8(A1)
	MOVE.b	#6, $9(A1)
	MOVE.w	$A(A0), $A(A1)
	MOVE.w	$E(A0), $E(A1)
	MOVE.w	#$4000, $1C(A1)
	MOVE.w	#$FFFF, $20(A1)
	MOVE.l	#loc_000042E2, $32(A1)
	MOVE.b	D3, D2
	ROR.b	#4, D2
	ADDI.b	#$64, D2
	BSR.w	UpdateRNG
	ANDI.b	#7, D0
	ADD.b	D2, D0
	JSR	SignedSinWithMul
	MOVE.l	D2, $12(A1)
	JSR	SignedCosWithMul
	MOVE.l	D2, $16(A1)
loc_000042B8:
	DBF	D3, loc_00004254
	RTS
loc_000042BE:
	MOVE.w	#4, D0
	BSR.w	ObjSys_SetObjNextOpTimer
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVE.b	#$87, $6(A0)
	BSR.w	ObjSys_UpdateObjAnim
	BCS.w	ObjSys_DeleteObjectA0
	BSR.w	ObjSys_UpdatePosInterpMove
	BCS.w	ObjSys_DeleteObjectA0
	RTS
loc_000042E2:
	dc.b	$01
	dc.b	$06 
	dc.b	$03
	dc.b	$05 
	dc.b	$06
	dc.b	$04 
	dc.b	$03
	dc.b	$05 
	dc.b	$04
	dc.b	$06 
	dc.b	$FE
	dc.b	$00 
loc_000042EE:
	BSR.w	ObjSys_UpdateObjAnim
	BCS.w	ObjSys_DeleteObjectA0
	RTS
loc_000042F8:
	dc.b	$06
	dc.b	$00 
	dc.b	$06
	dc.b	$01 
	dc.b	$06
	dc.b	$02 
	dc.b	$06
	dc.b	$03 
	dc.b	$FE
	dc.b	$00 
loc_00004302:
	BSR.w	loc_00005022
	MOVEA.l	A2, A3
	ADDA.l	#$0000000C, A2
	ADDA.l	#$000001E0, A3
	MOVE.w	#$009A, D0
loc_00004318:
	MOVE.w	D0, D1
	MOVE.w	D0, D2
	CLR.w	D3
loc_0000431E:
	CLR.w	(A3,D1.w)
	ADDI.w	#$0100, D3
	TST.b	(A2,D1.w)
	BEQ.w	loc_0000434E
	MOVE.w	(A2,D1.w), D4
	CLR.b	(A2,D1.w)
	ANDI.w	#$FF00, D4
	MOVE.w	D4, (A2,D2.w)
	SUBI.w	#$000C, D2
	SUBI.w	#$0100, D3
	BEQ.w	loc_0000434E
	MOVE.w	D3, (A3,D1.w)
loc_0000434E:
	SUBI.w	#$000C, D1
	BCC.b	loc_0000431E
	SUBQ.w	#2, D0
	CMPI.w	#$0090, D0
	BCC.b	loc_00004318
	RTS
loc_0000435E:
	MOVE.l	A0, D0
	SWAP	D0
	MOVE.w	#$8900, D0
	SWAP	D0
	JMP	Video_QueueBgMapSpecial
loc_0000436E:
	BSR.w	loc_000038D2
	CMPI.b	#$19, D0
	BEQ.w	loc_00007558
	CMPI.b	#$1A, D1
	BEQ.w	loc_000078BA
	MOVEM.l	D1/D0, -(A7)
	BSR.w	loc_00005022
	MOVEM.l	(A7)+, D0/D1
	TST.b	$1C(A2)
	BEQ.w	loc_0000439C
	ORI	#1, SR
	RTS
loc_0000439C:
	LEA	loc_00004450, A1
	BSR.w	ObjSys_InitObjWithFunc
	MOVE.b	$0(A0), $0(A1)
	MOVE.l	A0, $2E(A1)
	MOVE.l	#loc_00004446, $32(A1)
	MOVE.b	$2A(A0), $2A(A1)
	MOVE.b	D0, $8(A1)
	MOVE.w	#2, $1A(A1)
	MOVE.w	#2, $1C(A1)
	MOVE.w	#0, $1E(A1)
	MOVE.w	#0, $20(A1)
	ORI.b	#1, $7(A0)
	MOVEA.l	A1, A2
	
	LEA	loc_000049BE, A1
	BSR.w	ObjSys_InitObjWithFunc
	MOVE.b	$0(A0), $0(A1)
	MOVE.l	A2, $2E(A1)
	MOVE.l	#loc_0000442E, $32(A1)
	MOVE.b	$2A(A0), $2A(A1)
	MOVE.b	D1, $8(A1)
	MOVE.b	#0, $2B(A1)
	MOVE.l	A1, $36(A2)
	ORI.b	#2, $7(A0)
	ANDI	#$FFFE, SR
	RTS
loc_0000441E:
	dc.b	$01
	dc.b	$02 
	dc.b	$00
	dc.b	$00 
	dc.b	$02
	dc.b	$03 
	dc.b	$00
	dc.b	$00 
	dc.b	$01
	dc.b	$02 
	dc.b	$00
	dc.b	$00 
	dc.b	$02
	dc.b	$03 
	dc.b	$00
	dc.b	$00 
loc_0000442E:
	dc.b	$FE
	dc.b	$00 
loc_00004430:
	dc.b	$01
	dc.b	$02 
	dc.b	$00
	dc.b	$00 
	dc.b	$02
	dc.b	$03 
	dc.b	$00
	dc.b	$00 
	dc.b	$01
	dc.b	$02 
	dc.b	$00
	dc.b	$00 
	dc.b	$02
	dc.b	$03 
	dc.b	$00
	dc.b	$00 
	dc.b	$FF
	dc.b	$00 
	dc.l	loc_00004446
loc_00004446:
	dc.b	$0A
	dc.b	$01 
	dc.b	$08
	dc.b	$00 
	dc.b	$FF
	dc.b	$00 
	dc.l	loc_00004446
loc_00004450:
	BSR.w	loc_00004986
	MOVE.b	#$80, $6(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVEA.l	$2E(A0), A1
	BTST.b	#0, $7(A1)
	BEQ.w	loc_00004484
	BSR.w	ObjSys_UpdateObjAnim
	BSR.w	loc_000045AA
	BSR.w	loc_000048CE
	BSR.w	loc_00004624
	BCS.w	loc_0000449A
	BRA.w	loc_00004986
loc_00004484:
	MOVE.b	#0, $6(A0)
	MOVEA.l	$36(A0), A1
	MOVE.b	#0, $6(A1)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	RTS
loc_0000449A:
	BSR.w	loc_00004986
	BSR.w	loc_00004820
	ORI.b	#4, D0
	MOVE.b	D0, $7(A0)
	BTST.l	#0, D0
	BNE.w	loc_000044EA
	MOVE.w	$E(A0), D0
	SUBI.w	#$000F, D0
	MOVE.w	D0, $20(A0)
	MOVE.w	#$3000, $1E(A0)
	MOVE.w	#1, $16(A0)
	MOVE.b	#0, $9(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BSR.w	loc_00003E84
	BCS.w	loc_000044DE
	RTS
loc_000044DE:
	BSR.w	SndDrv_PlayPlacePuyo
	MOVE.l	#loc_0000441E, $32(A0)
loc_000044EA:
	CLR.b	$22(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BSR.w	ObjSys_UpdateObjAnim
	BCS.w	loc_000044FC
	RTS
loc_000044FC:
	MOVEA.l	$2E(A0), A1
	BCLR.b	#0, $7(A1)
	BSR.w	loc_00004ACC
loc_0000450A:
	MOVE.b	#7, $9(A0)
	MOVE.w	#$0018, D0
	BSR.w	ObjSys_SetObjNextOpTimer
	CLR.w	D0
	MOVE.b	$2A(A0), D0
	LEA	$00FF18C8, A1
	TST.b	(A1,D0.w)
	BNE.w	ObjSys_DeleteObjectA0
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVE.b	#6, $26(A0)
	CLR.b	$28(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVE.b	$2A(A0), D0
	LEA	$00FF18C8, A1
	TST.b	(A1,D0.w)
	BNE.w	ObjSys_DeleteObjectA0
	ADDQ.b	#1, $28(A0)
	CMPI.b	#4, $28(A0)
	BCC.w	loc_00004560
	RTS
loc_00004560:
	CLR.b	$28(A0)
	SUBQ.w	#1, $A(A0)
	SUBQ.w	#1, $E(A0)
	SUBQ.b	#1, $26(A0)
	BEQ.w	ObjSys_DeleteObjectA0
	RTS
loc_00004576:
	CMPI.b	#$15, $9(A0)
	BCC.w	ObjSys_DeleteObjectA0
	ADDQ.b	#6, $9(A0)
	MOVE.w	#$0030, $26(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVE.b	$2A(A0), D0
	LEA	$00FF18C8, A1
	TST.b	(A1,D0.w)
	BNE.w	ObjSys_DeleteObjectA0
	SUBQ.w	#1, $26(A0)
	BEQ.w	ObjSys_DeleteObjectA0
	RTS
loc_000045AA:
	TST.w	$1E(A0)
	BEQ.w	loc_000045C8
	MOVE.w	#8, D0
	BTST.b	#7, $1E(A0)
	BNE.w	loc_000045C2
	NEG.w	D0
loc_000045C2:
	ADD.w	D0, $1E(A0)
	RTS
loc_000045C8:
	BTST.b	#3, $7(A0)
	BEQ.w	loc_000045D4
	RTS
loc_000045D4:
	BSR.w	loc_00004C0A
	BTST.l	#2, D1
	BNE.w	loc_000045EA
	BTST.l	#3, D1
	BNE.w	loc_000045FA
	RTS
loc_000045EA:
	MOVE.b	#3, D0
	MOVE.w	#$FFFF, D2
	MOVE.w	#8, D3
	BRA.w	loc_00004606
loc_000045FA:
	MOVE.b	#1, D0
	MOVE.w	#1, D2
	MOVE.w	#$FFF8, D3
loc_00004606:
	BSR.w	loc_0000483E
	TST.b	D0
	BEQ.w	loc_00004612
	RTS
loc_00004612:
	MOVE.w	$1A(A0), D0
	ADD.w	D2, D0
	MOVE.w	D0, $1A(A0)
	MOVE.w	D3, $1E(A0)
	BRA.w	SndDrv_PlayMovePuyo
loc_00004624:
	BTST.b	#3, $7(A0)
	BNE.w	loc_000046FE
	MOVEA.l	$2E(A0), A1
	MOVE.w	$1A(A1), D1
	CMPI.w	#$8001, D1
	BCC.w	loc_0000476C
	BSR.w	loc_00004C0A
	LSR.w	#8, D0
	ANDI.b	#$0E, D0
	CMPI.b	#2, D0
	BNE.w	loc_00004664
	MOVE.w	#$8000, D1
	MOVE.w	rFrameCount, D2
	LSL.b	#3, D2
	ANDI.b	#8, D2
	OR.b	D2, $7(A1)
loc_00004664:
	MOVE.w	$20(A0), D0
	ADD.w	D0, D1
	BCS.w	loc_000046B4
	MOVE.w	D1, $20(A0)
	EOR.w	D1, D0
	BPL.w	loc_000046AE
	BSR.w	loc_00004820
	TST.b	D0
	BEQ.w	loc_000046AE
	MOVE.b	D0, D2
	BSR.w	loc_00002D34
	BTST.l	#0, D2
	BEQ.w	loc_00004694
	BSR.w	loc_000047D2
loc_00004694:
	BTST.l	#1, D2
	BEQ.w	loc_000046A0
	BSR.w	loc_000047F8
loc_000046A0:
	ADDQ.w	#1, $26(A0)
	CMPI.w	#8, $26(A0)
	BCC.w	loc_000046FE
loc_000046AE:
	ANDI	#$FFFE, SR
	RTS
loc_000046B4:
	BSR.w	loc_00004820
	TST.b	D0
	BNE.w	loc_000046CC
	CLR.w	$20(A0)
	ADDQ.w	#1, $1C(A0)
	ANDI	#$FFFE, SR
	RTS
loc_000046CC:
	TST.w	$28(A0)
	BNE.w	loc_000046DE
	BSR.w	loc_00004724
	ANDI	#$FFFE, SR
	RTS
loc_000046DE:
	SUBQ.w	#1, $28(A0)
	BEQ.w	loc_000046FE
	BSR.w	loc_00004C0A
	LSR.w	#8, D0
	ANDI.b	#$0E, D0
	CMPI.b	#2, D0
	BEQ.w	loc_000046FE
	ANDI	#$FFFE, SR
	RTS
loc_000046FE:
	BSET.b	#3, $7(A0)
	TST.w	$1E(A0)
	BNE.w	loc_0000471E
	MOVEA.l	$36(A0), A1
	TST.b	$38(A1)
	BNE.w	loc_0000471E
	ORI	#1, SR
	RTS
loc_0000471E:
	ANDI	#$FFFE, SR
	RTS
	
loc_00004724:
	MOVEA.l	$2E(A0), A1
	CMPI.b	#8, $2B(A1)
	CLR.w	D0
	MOVE.b	$1A(A0), D0
	BPL.w	loc_0000473C
	MOVE.b	#$7F, D0
loc_0000473C:
	LSR.b	#3, D0
	NEG.w	D0
	ADDI.w	#$0020, D0
	MOVE.w	D0, $28(A0)
	RTS

; Dead Code
dead_0000474A:
	clr.w d0
	move.b $2B(a1), d0
	subq.b #8, d0
	lsr.b #2, d0
	cmpi.b #8, d0
	bcs.w dead_00004760
	move.b #7, d0
dead_00004760:
	neg.w d0
	addi.w #$11, d0
	move.w d0, $28(a0)
	rts
	
loc_0000476C:
	MOVE.w	$20(A0), D2
	ADD.w	D1, $20(A0)
	BCS.w	loc_0000477A
	RTS
loc_0000477A:
	BSR.w	loc_00004820
	TST.b	D0
	BNE.w	loc_00004794
	ADDQ.w	#1, $1C(A0)
	ANDI.b	#$FE, $21(A0)
	ANDI	#$FFFE, SR
	RTS
loc_00004794:
	CMPI.w	#$FFFF, D2
	BEQ.w	loc_000047C8
	MOVE.b	D0, D2
	BSR.w	loc_00002D34
	BTST.l	#0, D2
	BEQ.w	loc_000047AE
	BSR.w	loc_000047D2
loc_000047AE:
	BTST.l	#1, D2
	BEQ.w	loc_000047BA
	BSR.w	loc_000047F8
loc_000047BA:
	ADDQ.w	#1, $26(A0)
	CMPI.w	#8, $26(A0)
	BCC.w	loc_000046FE
loc_000047C8:
	MOVE.w	#$FFFF, $20(A0)
	BRA.w	loc_000046CC
loc_000047D2:
	CMPI.b	#$19, $8(A0)
	BEQ.w	loc_000047F6
	MOVE.l	#loc_00007A8A, $32(A0)
	CMPI.b	#$1A, $8(A0)
	BEQ.w	loc_000047F6
	MOVE.l	#loc_00004430, $32(A0)
loc_000047F6:
	RTS
loc_000047F8:
	CMPI.b	#$19, $8(A0)
	BEQ.w	loc_0000481E
	BCS.w	loc_00004812
	MOVE.l	#loc_00007A8A, $32(A0)
	BRA.w	loc_0000481E
loc_00004812:
	MOVEA.l	$36(A0), A1
	MOVE.l	#loc_0000441E, $32(A1)
loc_0000481E:
	RTS
loc_00004820:
	MOVE.b	#2, D0
	BSR.w	loc_0000483E
	TST.b	D0
	BEQ.w	loc_0000483C
	BTST.b	#0, $2B(A0)
	BNE.w	loc_0000483C
	ORI.b	#3, D0
loc_0000483C:
	RTS
loc_0000483E:
	MOVEM.l	A2/D7/D6/D5/D4/D3/D2/D1, -(A7)
	MOVE.b	#3, D7
	CLR.w	D2
	MOVE.b	D0, D2
	LSL.b	#2, D2
	CLR.w	D3
	MOVE.b	$2B(A0), D3
	LSL.b	#2, D3
	MOVE.w	$1A(A0), D0
	ADD.w	loc_000048BE(PC,D2.w), D0
	MOVE.w	$1C(A0), D1
	ADD.w	loc_000048C0(PC,D2.w), D1
	CMPI.w	#6, D0
	BCC.w	loc_0000488E
	CMPI.w	#$000E, D1
	BCC.w	loc_0000488E
	MOVEM.l	D1/D0, -(A7)
	BSR.w	loc_00004FE4
	MOVE.b	(A2,D1.w), D4
	MOVEM.l	(A7)+, D0/D1
	TST.b	D4
	BNE.w	loc_0000488E
	ANDI.b	#$FE, D7
loc_0000488E:
	ADD.w	loc_000048BE(PC,D3.w), D0
	ADD.w	loc_000048C0(PC,D3.w), D1
	CMPI.w	#6, D0
	BCC.w	loc_000048B6
	CMPI.w	#$000E, D1
	BCC.w	loc_000048B6
	BSR.w	loc_00004FE4
	TST.b	(A2,D1.w)
	BNE.w	loc_000048B6
	ANDI.b	#$FD, D7
loc_000048B6:
	MOVE.b	D7, D0
	MOVEM.l	(A7)+, D1/D2/D3/D4/D5/D6/D7/A2
	RTS
loc_000048BE:
	dc.w	$0000
loc_000048C0:
	dc.w	$FFFF, $0001, $0000, $0000, $0001, $FFFF, $0000 
loc_000048CE:
	MOVEA.l	$36(A0), A1
	TST.b	$38(A1)
	BEQ.w	loc_000048DA
loc_000048DA:
	BTST.b	#3, $7(A0)
	BEQ.w	loc_000048E6
	RTS
loc_000048E6:
	BSR.w	loc_00004C0A
	BSR.w	loc_00004C5C
	BTST.l	#6, D0
	BNE.w	loc_00004900
	BTST.l	#5, D0
	BNE.w	loc_0000490C
	RTS
loc_00004900:
	MOVE.b	#$FF, D0
	MOVE.b	#$F8, D1
	BRA.w	loc_00004914
loc_0000490C:
	MOVE.b	#1, D0
	MOVE.b	#8, D1
loc_00004914:
	ADD.b	$2B(A0), D0
	ANDI.b	#3, D0
	MOVE.b	D0, D2
	BSR.w	loc_0000483E
	BTST.l	#0, D0
	BEQ.w	loc_00004960
	MOVE.b	D2, D0
	EORI.b	#2, D0
	BSR.w	loc_0000483E
	BTST.l	#0, D0
	BEQ.w	loc_0000493E
	RTS
loc_0000493E:
	CLR.w	D0
	MOVE.b	D2, D0
	LSL.b	#2, D0
	MOVE.w	loc_00004976(PC,D0.w), D3
	MOVE.w	loc_00004978(PC,D0.w), D4
	ADD.w	D3, $1A(A0)
	ADD.w	D4, $1C(A0)
	TST.w	D4
	BEQ.w	loc_00004960
	MOVE.w	#$7FFE, $20(A0)
loc_00004960:
	MOVE.b	$2B(A0), D0
	ROR.b	#2, D0
	MOVE.b	D0, $36(A1)
	MOVE.b	D2, $2B(A0)
	MOVE.b	D1, $38(A1)
	BRA.w	SndDrv_PlayRotatePuyo
loc_00004976:
	dc.w	$0000 
loc_00004978:
	dc.w	$0001, $FFFF, $0000, $0000, $FFFF, $0001, $0000 
loc_00004986:
	BSR.w	loc_00005064
	MOVE.w	$1A(A0), D2
	LSL.w	#4, D2
	ADD.w	D2, D0
	MOVE.w	$1E(A0), D2
	ADD.w	D2, D0
	ADDQ.w	#8, D0
	MOVE.w	D0, $A(A0)
	MOVE.w	$1C(A0), D2
	SUBQ.w	#2, D2
	LSL.w	#4, D2
	ADD.w	D2, D1
	ADDQ.w	#8, D1
	MOVE.w	$20(A0), D2
	ROL.w	#4, D2
	ANDI.w	#8, D2
	ADD.w	D2, D1
	SUBQ.w	#8, D1
	MOVE.w	D1, $E(A0)
	RTS
loc_000049BE:
	BSR.w	loc_00004A9C
	MOVE.b	#$80, $6(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BSR.w	ObjSys_UpdateObjAnim
	BSR.w	loc_00004A7A
	BSR.w	loc_00004A9C
	MOVEA.l	$2E(A0), A1
	BTST.b	#2, $7(A1)
	BNE.w	loc_000049E8
	RTS
loc_000049E8:
	MOVE.w	$1A(A1), D0
	MOVE.w	$1C(A1), D1
	CLR.w	D2
	MOVE.b	$2B(A1), D2
	LSL.b	#2, D2
	LEA	loc_000048BE, A2
	ADD.w	(A2,D2.w), D0
	ADD.w	$2(A2,D2.w), D1
	MOVE.w	D0, $1A(A0)
	MOVE.w	D1, $1C(A0)
	MOVE.l	$2E(A1), $2E(A0)
	MOVE.b	$7(A1), $7(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BTST.b	#1, $7(A0)
	BNE.w	loc_00004A5A
	MOVE.w	$E(A0), D0
	SUBI.w	#$000F, D0
	MOVE.w	D0, $20(A0)
	MOVE.w	#$3000, $1E(A0)
	MOVE.w	#1, $16(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BSR.w	loc_00003E84
	BCS.w	loc_00004A4E
	RTS
loc_00004A4E:
	BSR.w	SndDrv_PlayPlacePuyo
	MOVE.l	#loc_0000441E, $32(A0)
loc_00004A5A:
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BSR.w	ObjSys_UpdateObjAnim
	BCS.w	loc_00004A68
	RTS
loc_00004A68:
	MOVEA.l	$2E(A0), A1
	BCLR.b	#1, $7(A1)
	BSR.w	loc_00004ACC
	BRA.w	loc_0000450A
loc_00004A7A:
	MOVE.b	$38(A0), D0
	BNE.w	loc_00004A84
	RTS
loc_00004A84:
	ADD.b	D0, $36(A0)
	MOVE.b	$36(A0), D0
	ANDI.b	#$3F, D0
	BEQ.w	loc_00004A96
	RTS
loc_00004A96:
	CLR.b	$38(A0)
	RTS
loc_00004A9C:
	MOVEA.l	$2E(A0), A1
	MOVE.b	$36(A0), D0
	MOVE.w	#$1000, D1
	JSR	SignedSinWithMul
	SWAP	D2
	ADD.w	$A(A1), D2
	MOVE.w	D2, $A(A0)
	JSR	SignedCosWithMul
	SWAP	D2
	NEG.w	D2
	ADD.w	$E(A1), D2
	MOVE.w	D2, $E(A0)
	RTS
loc_00004ACC:
	MOVE.b	$2A(A0), D0
	LEA	$00FF18C8, A1
	TST.b	(A1,D0.w)
	BEQ.w	loc_00004AE0
	RTS
loc_00004AE0:
	MOVE.w	$1A(A0), D0
	MOVE.w	$1C(A0), D1
	BSR.w	loc_00004FE4
	MOVE.b	$8(A0), D2
	LSL.b	#4, D2
	BSET.l	#7, D2
	CMPI.b	#$E0, D2
	BNE.w	loc_00004B02
	ORI.b	#$0D, D2
loc_00004B02:
	MOVE.b	D2, (A2,D1.w)
	MOVE.b	D2, $1(A2,D1.w)
	CMPI.w	#2, $1C(A0)
	BCS.w	loc_00004B24
	MOVE.w	D0, D1
	MOVE.b	D2, D0
	ORI	#$0700, SR
	BSR.w	loc_00004D06
	ANDI	#$F8FF, SR
loc_00004B24:
	RTS
loc_00004B26:
	BSR.w	loc_00005022
	MOVE.w	#$0053, D0
loc_00004B2E:
	MOVE.w	#$00FF, (A2)+
	DBF	D0, loc_00004B2E
	RTS
	
; In prototype footage of the game, the record screen makes mention of a mission mode not seen in the final arcade
; or megadrive releases.  This mission mode also doesn't appear to have been selectable in the prototype's title screen.
; This seems to be a remnant of what was finished for it.

; To see this code in action, uncomment the RTS above this comment, and in RAM, set rMissionMode_CurBoard (FF1889) to 
; values 1, 2, or 3.  Then, load into endless mode (or any mode), select any difficulty, and place a puyo.
	tst.b (rMissionMode_CurBoard)
	bne.w @LoadTable
	rts
@LoadTable:
	MOVEM.l	A2, -(A7)
	suba.l #$48, a2
	clr.w d0
	move.b (rMissionMode_CurBoard), d0
	subq.b #1, d0
	mulu.w #$26, d0
	lea (MissionMode_BoardTable), a1
	adda.w d0, a1
	move.w #$23, d0
@LoadTableLoop:
	move.b (a1)+, (a2)+
	move.b #$FF, (a2)+
	dbf d0, @LoadTableLoop
	movea.l $32(a0), a2
	move.w (a1)+, $26(a2)
	MOVEM.l	(A7)+, A2
	rts
MissionMode_BoardTable:
	; Board 1
	dc.b	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $80, $90, $00, $00, $00, $00, $80, $90, $00, $00, $00, $00, $D0, $80, $90, $00, $00, $D0, $D0, $80, $90, $00, $00, $05, $03
	; Board 2
	dc.b	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $B0, $C0, $00, $00, $00, $00, $D0, $B0, $C0, $00, $00, $00, $D0, $B0, $C0, $00, $00, $00, $D0, $B0, $C0, $00, $00, $05, $04 
	; Board 3
	dc.b	$00, $00, $00, $C0, $00, $00, $00, $00, $00, $90, $00, $00, $00, $00, $80, $90, $00, $B0, $00, $00, $D0, $80, $00, $B0, $00, $D0, $80, $90, $00, $C0, $C0, $D0, $80, $90, $B0, $B0, $05, $00

GetMainControllerHeld:
	MOVE.w	rPad1Held, D0
	TST.b	rCurMainPlayer
	BEQ.w	@P1IsMain
	MOVE.w	rPad2Held, D0
@P1IsMain:
	RTS
loc_00004C0A:
	MOVEM.l	A2/D2, -(A7)
	CLR.w	D2
	MOVE.b	$2A(A0), D2
	MOVE.b	rCurMainPlayer, D0
	EOR.b	D0, D2
	MULU.w	#6, D2
	LEA	rPad1Held, A2
	MOVE.w	(A2,D2.w), D0
	MOVE.b	$2(A2,D2.w), D1
	MOVE.b	rCurGameMode, D2
	BTST.l	#2, D2
	BNE.w	loc_00004C50
	LSL.b	#1, D2
	OR.b	$2A(A0), D2
	EORI.b	#1, D2
	AND.b	debug_CpuPlayer, D2
	BNE.w	loc_00004C56
loc_00004C50:
	JSR	loc_0001009C
loc_00004C56:
	MOVEM.l	(A7)+, D2/A2
	RTS
loc_00004C5C:
	MOVE.b	rCurGameMode, D2
	BTST.l	#2, D2
	BNE.w	loc_00004CC2
	LSL.b	#1, D2
	OR.b	$2A(A0), D2
	EORI.b	#1, D2
	AND.b	debug_CpuPlayer, D2
	BEQ.w	loc_00004CC2
	MOVEM.l	A3/A2, -(A7)
	CLR.w	D1
	MOVE.b	$2A(A0), D1
	MOVE.b	rCurMainPlayer, D2
	LEA	rOption_Player1AButton, A2
	EOR.b	D2, D1
	BEQ.w	loc_00004CA0
	LEA	rOption_Player2AButton, A2
loc_00004CA0:
	LEA	loc_00004CC4, A3
	CLR.w	D1
loc_00004CA8:
	MOVE.b	(A3)+, D2
	BMI.w	loc_00004CBA
	AND.b	D0, D2
	BEQ.w	loc_00004CB6
	OR.b	(A2), D1
loc_00004CB6:
	ADDQ.l	#1, A2
	BRA.b	loc_00004CA8
loc_00004CBA:
	MOVE.b	(A3,D1.w), D0
	MOVEM.l	(A7)+, A2/A3
loc_00004CC2:
	RTS
loc_00004CC4:
	dc.b	$40, $10, $20, $FF, $00, $40, $20, $40 
loc_00004CCC:
	BSR.w	loc_00005022
	MOVE.w	D0, D1
	MOVEQ	#0, D2
	MOVEQ	#0, D3
loc_00004CD6:
	MOVE.b	$18(A2,D2.w), D0
	CMP.b	$19(A2,D2.w), D0
	BEQ.w	loc_00004CEA
	MOVE.b	D0, $19(A2,D2.w)
	BSR.w	loc_00004D06
loc_00004CEA:
	ADDQ.w	#4, D1
	ADDQ.w	#1, D3
	CMPI.w	#6, D3
	BCS.w	loc_00004CFC
	CLR.w	D3
	ADDI.w	#$00E8, D1
loc_00004CFC:
	ADDQ.w	#2, D2
	CMPI.w	#$0090, D2
	BCS.b	loc_00004CD6
	RTS
loc_00004D06:
	MOVEM.l	D3/D2/D1/D0, -(A7)
	BSR.w	loc_00004D88
	MOVE.w	#2, D3
	CMPI.w	#$83FE, D0
	BNE.w	loc_00004D1C
	CLR.w	D3
loc_00004D1C:
	MOVE.w	D1, D2
	ANDI.w	#$3FFF, D2
	ORI.w	#$4000, D2
	MOVE.w	D2, vdpControl1
	MOVE.w	D1, D2
	LSL.l	#2, D2
	SWAP	D2
	ANDI.w	#3, D2
	MOVE.w	D2, vdpControl1
	MOVE.w	D0, D2
	MOVE.w	D2, vdpData1
	ADD.w	D3, D2
	MOVE.w	D2, vdpData1
	MOVE.w	D1, D2
	ADDI.w	#$0080, D2
	ANDI.w	#$3FFF, D2
	ORI.w	#$4000, D2
	MOVE.w	D2, vdpControl1
	MOVE.w	D1, D2
	LSL.l	#2, D2
	SWAP	D2
	ANDI.w	#3, D2
	MOVE.w	D2, vdpControl1
	MOVE.w	D0, D2
	ADDQ.w	#1, D2
	MOVE.w	D2, vdpData1
	ADD.w	D3, D2
	MOVE.w	D2, vdpData1
	MOVEM.l	(A7)+, D0/D1/D2/D3
	RTS
loc_00004D88:
	MOVEM.l	D4/D3/D2/D1, -(A7)
	MOVE.w	#$83FE, D1
	OR.b	D0, D0
	BEQ.w	loc_00004DE8
	MOVE.w	#$8000, D1
	CLR.b	D1
	CLR.w	D2
	MOVE.b	D0, D2
	LSR.b	#4, D2
	ANDI.b	#7, D2
	MULU.w	#$0015, D2
	CLR.w	D3
	MOVE.b	D0, D3
	ANDI.b	#$0F, D3
	OR.b	D0, D0
	BMI.w	loc_00004DBE
	MOVE.b	loc_00004E0C(PC,D3.w), D4
	MOVE.b	D4, D3
loc_00004DBE:
	ADD.b	D3, D2
	LSL.w	#2, D2
	ADDI.w	#$0100, D2
	OR.w	D2, D1
	CLR.w	D2
	MOVE.b	D0, D2
	LSR.b	#3, D2
	ANDI.b	#$0E, D2
	CMPI.b	#$0C, D2
	BNE.w	loc_00004DE4
	MOVE.b	D0, D2
	ANDI.b	#7, D2
	ADDQ.b	#6, D2
	LSL.b	#1, D2
loc_00004DE4:
	OR.w	loc_00004DF0(PC,D2.w), D1
loc_00004DE8:
	MOVE.w	D1, D0
	MOVEM.l	(A7)+, D1/D2/D3/D4
	RTS
loc_00004DF0:
	dc.w 	$0000, $0000, $4000, $4000, $2000, $2000, $4000
	dc.w 	$4000, $4000, $4000, $4000, $4000, $4000, $4000
loc_00004E0C:
	dc.b	$00 
	dc.b	$00
	dc.b	$10
	dc.b	$11
	dc.b	$12, $14 
loc_00004E12:
	BSR.w	loc_00005022
	ADDA.l	#$00000018, A2
	MOVEA.l	A2, A3
	ADDA.l	#$00000090, A3
	CLR.w	D0
	CLR.b	D1
loc_00004E28:
	MOVE.b	(A2,D0.w), D3
	ANDI.b	#$60, D3
	CMPI.b	#$60, D3
	BNE.w	loc_00004E3C
	BSR.w	loc_00004E52
loc_00004E3C:
	ADDQ.b	#1, D1
	CMPI.b	#6, D1
	BCS.w	loc_00004E48
	CLR.b	D1
loc_00004E48:
	ADDQ.w	#2, D0
	CMPI.w	#$0090, D0
	BCS.b	loc_00004E28
	RTS
loc_00004E52:
	MOVE.w	#6, D2
	CLR.b	D3
loc_00004E58:
	CLR.w	D4
	MOVE.b	D1, D4
	ADD.w	loc_00004EA2(PC,D2.w), D4
	CMPI.w	#$FFFE, D4
	BEQ.w	loc_00004E8C
	CMPI.w	#7, D4
	BEQ.w	loc_00004E8C
	MOVE.w	D0, D4
	ADD.w	loc_00004EA2(PC,D2.w), D4
	CMPI.w	#$0090, D4
	BCC.w	loc_00004E8C
	MOVE.b	(A3,D4.w), D5
	ANDI.b	#$C0, D5
	BNE.w	loc_00004E8C
	ADDQ.b	#1, D3
loc_00004E8C:
	SUBQ.w	#2, D2
	BCC.b	loc_00004E58
	TST.b	D3
	BNE.w	loc_00004E98
	RTS
loc_00004E98:
	ORI.b	#$40, D3
	MOVE.b	D3, (A3,D0.w)
	RTS
loc_00004EA2:
	dc.w	$000C, $FFF4, $0002, $FFFE 
loc_00004EAA:
	BSR.w	loc_00005022
	ADDA.l	#$00000018, A2
	MOVEA.l	A2, A3
	ADDA.l	#$00000090, A3
	MOVEA.l	A3, A4
	ADDA.l	#$00000090, A4
	MOVEA.l	A3, A5
	CLR.l	D1
	MOVE.w	#$0023, D0
loc_00004ECC:
	MOVE.l	D1, (A5)+
	DBF	D0, loc_00004ECC
	CLR.w	D0
	CLR.w	D1
loc_00004ED6:
	TST.b	(A3,D0.w)
	BNE.b	loc_00004EF0
	MOVE.b	#$80, (A3,D0.w)
	MOVE.b	(A2,D0.w), D3
	BEQ.b	loc_00004EF0
	CMPI.b	#$E0, D3
	BCC.b	loc_00004EF0
	BSR.b	loc_00004EFA
loc_00004EF0:
	ADDQ.w	#2, D0
	CMPI.w	#$0090, D0
	BCS.b	loc_00004ED6
	RTS
loc_00004EFA:
	MOVEM.l	D1/D0, -(A7)
	CLR.w	D3
	MOVE.w	#2, D4
	MOVE.w	D0, (A4)
loc_00004F06:
	CLR.l	D5
	MOVE.w	(A4,D3.w), D5
	LSR.w	#1, D5
	DIVU.w	#6, D5
	SWAP	D5
	MOVE.b	D5, D2
	MOVE.w	(A4,D3.w), D5
	ANDI.b	#$F0, (A2,D5.w)
	CLR.b	D6
	MOVE.w	#6, D7
loc_00004F26:
	LSL.b	#1, D6
	CLR.w	D0
	MOVE.b	D2, D0
	ADD.w	loc_00004F90(PC,D7.w), D0
	CMPI.w	#$FFFE, D0
	BEQ.b	loc_00004F6C
	CMPI.w	#7, D0
	BEQ.b	loc_00004F6C
	MOVE.w	D5, D0
	ADD.w	loc_00004F90(PC,D7.w), D0
	CMPI.w	#$0090, D0
	BCC.b	loc_00004F6C
	MOVE.b	(A2,D0.w), D1
	ANDI.b	#$F0, D1
	BEQ.b	loc_00004F6C
	CMP.b	(A2,D5.w), D1
	BNE.b	loc_00004F6C
	ADDQ.b	#1, D6
	TST.b	(A3,D0.w)
	BNE.b	loc_00004F6C
	MOVE.b	#$80, (A3,D0.w)
	MOVE.w	D0, (A4,D4.w)
	ADDQ.w	#2, D4
loc_00004F6C:
	SUBQ.w	#2, D7
	BCC.b	loc_00004F26
	OR.b	D6, (A2,D5.w)
	ADDQ.w	#2, D3
	CMP.w	D4, D3
	BCS.b	loc_00004F06
	MOVEM.l	(A7)+, D0/D1
	CMPI.w	#8, D4
	BCC.w	loc_00004FB0
	CMPI.w	#4, D4
	BCC.w	loc_00004F98
	RTS
loc_00004F90:
	dc.w	$000C, $FFF4, $0002, $FFFE 
loc_00004F98:
	MOVE.b	D4, D2
	SUBQ.w	#2, D4
	LSR.b	#1, D2
	ORI.b	#$80, D2
loc_00004FA2:
	MOVE.w	(A4,D4.w), D3
	MOVE.b	D2, (A3,D3.w)
	SUBQ.w	#2, D4
	BCC.b	loc_00004FA2
	RTS
loc_00004FB0:
	ADDQ.w	#1, D1
	MOVE.w	D4, D2
	SUBQ.w	#2, D2
loc_00004FB6:
	MOVE.w	(A4,D2.w), D3
	MOVE.b	D1, (A3,D3.w)
	SUBQ.w	#2, D2
	BCC.b	loc_00004FB6
	MOVEA.l	A4, A5
	ADDA.l	#$000000A8, A5
	MOVE.w	D1, D2
	SUBQ.w	#1, D2
	LSL.w	#1, D2
	LSR.b	#1, D4
	MOVE.b	(A2,D3.w), D5
	ANDI.b	#$70, D5
	MOVE.b	D4, (A5,D2.w)
	MOVE.b	D5, $1(A5,D2.w)
	RTS
loc_00004FE4:
	MOVEM.l	D3/D2, -(A7)
	MOVE.w	D0, D2
	MOVE.w	D1, D3
	BSR.w	loc_00005022
	LSL.b	#1, D3
	MOVE.w	D2, D1
	ADD.w	D3, D1
	ADD.w	D3, D1
	ADD.w	D3, D1
	LSL.b	#1, D1
	LSL.b	#2, D2
	SUBQ.b	#4, D3
	LSL.w	#7, D3
	ADD.w	D2, D0
	ADD.w	D3, D0
	MOVEM.l	(A7)+, D2/D3
	RTS
loc_0000500C:
	MOVEM.l	D1/D0, -(A7)
	MOVE.b	$2A(A0), D0
	MOVE.b	rCurMainPlayer, D1
	EOR.b	D1, D0
	MOVEM.l	(A7)+, D0/D1
	RTS

loc_00005022:
	MOVEM.l	D1, -(A7)
	CLR.w	D1
	MOVE.b	rCurMainPlayer, D1
	LSL.b	#1, D1
	OR.b	$2A(A0), D1
	LSL.b	#3, D1
	MOVEA.l	loc_00005044(PC,D1.w), A2
	MOVE.w	loc_00005044+4(PC,D1.w), D0
	MOVEM.l	(A7)+, D1
	RTS
loc_00005044:
	dc.l	$00FF1C80, $C1040000
	dc.l  $00FF1FEA, $C1340000
	dc.l  $00FF1C80, $C1340000
	dc.l  $00FF1FEA, $C1040000

loc_00005064:
	CLR.w	D1
	MOVE.b	rCurGameMode, D1
	ANDI.b	#3, D1
	LSL.b	#1, D1
	OR.b	$2A(A0), D1
	MOVE.b	rCurMainPlayer, D0
	EOR.b	D0, D1
	LSL.b	#2, D1
	MOVE.w	loc_0000508A(PC,D1.w), D0
	MOVE.w	loc_0000508C(PC,D1.w), D1
	RTS
loc_0000508A:
	dc.w	$0090
loc_0000508C:
	dc.w 	$0090, $0150, $0090, $0090, $0090
	dc.w 	$0150, $0090, $0090, $0090, $0150
	dc.w 	$0090, $0090, $0090, $0150, $0090

Battle_LoadCarbuncleObj:
	CLR.w	$00FF18C6
	LEA	@UpdateStart, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCC.w	@AllocSuccess
	RTS
@AllocSuccess:
	MOVE.b	#$80, $6(A1)
	MOVE.b	#SprMapID_Carbuncle, Obj_SprMap(A1)
	MOVE.b	#9, Obj_AnmFrm(A1)
	MOVE.b	#$FF, $36(A1)
	MOVE.l	A2, $2E(A1)
	CLR.w	D0
	MOVE.b	rCurGameMode, D0
	ANDI.b	#3, D0
	LSL.b	#3, D0
	MOVE.w	@XYAnimTbl(PC,D0.w), Obj_XPos(A1)
	MOVE.w	@XYAnimTbl+2(PC,D0.w), Obj_YPos(A1)
	MOVE.w	@XYAnimTbl+2(PC,D0.w), $20(A1)
	MOVE.l	@XYAnimTbl+4(PC,D0.w), Obj_Anim(A1)
	RTS
@XYAnimTbl:
	dc.w	$0140
	dc.w	$0128
	dc.l	Anim_CarbuncleBalloonPop
	dc.w 	$0120
	dc.w	$0108
	dc.l    Anim_CarbuncleBalloonPop
	dc.w 	$0120
	dc.w	$010C
	dc.l    loc_0000274A
	dc.w 	$0120
	dc.w	$0108
	dc.l    loc_0000274A
@UpdateStart:
	CMPI.b	#1, rCurGameMode
	BNE.w	loc_0000514A
	MOVEA.l	$2E(A0), A1
	MOVEA.l	$2E(A1), A2
	MOVE.b	$7(A1), D0
	OR.b	$7(A2), D0
	BTST.l	#0, D0
	BEQ.w	loc_0000514A
	RTS
loc_0000514A:
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BSR.w	ObjSys_UpdateObjAnim
	BCS.w	loc_000051A0
	MOVE.b	rPad1Held, D0
	OR.b	rPad2Held, D0
	ANDI.b	#$F0, D0
	BEQ.w	loc_0000516E
	CLR.w	$22(A0)
loc_0000516E:
	CMPI.b	#$17, $9(A0)
	BEQ.w	loc_0000517A
	RTS
loc_0000517A:
	MOVE.b	#sfxID_CarbuncleBalloonPop, D0
	JSR	SndDrv_QueueSoundEffect
	MOVEA.l	$2E(A0), A1
	MOVEA.l	$2E(A1), A2
	MOVE.w	$14(A1), D0
	ADD.w	$14(A2), D0
	CMPI.w	#$0025, D0
	BCC.w	loc_000051A0
	BSR.w	loc_00005500
loc_000051A0:
	MOVEA.l	$2E(A0), A1
	MOVEA.l	$2E(A1), A2
	BCLR.b	#1, $7(A1)
	BCLR.b	#1, $7(A2)
loc_000051B4:
	BSR.w	ObjSys_UpdateObjNextOpTimer
	TST.b	$00FF18C6
	BMI.w	loc_00005262
	MOVE.b	$00FF0144, D0
	AND.b	$00FF0145, D0
	BMI.w	loc_000053DC
	BSR.w	loc_000054C4
	BSR.w	ObjSys_UpdateObjAnim
	BCC.w	loc_00005218
	TST.w	$26(A0)
	BEQ.w	loc_000051F6
	SUBQ.w	#1, $26(A0)
	MOVE.l	$2E(A0), D0
	MOVE.l	D0, $32(A0)
	BRA.w	loc_00005218
loc_000051F6:
	BSR.w	loc_0000543E
	BSR.w	loc_0000547C
	LSL.w	#2, D0
	LEA	loc_0000274E, A1
	MOVEA.l	(A1,D0.w), A2
	MOVE.w	(A2)+, D0
	MOVE.w	D0, $26(A0)
	MOVE.l	A2, $32(A0)
	MOVE.l	A2, $2E(A0)
loc_00005218:
	CLR.w	D0
	MOVE.b	$9(A0), D0
	CMP.b	$36(A0), D0
	BEQ.w	loc_00005258
	MOVE.b	D0, $36(A0)
	CMPI.b	#$40, D0
	BCS.w	loc_00005258
	BNE.w	loc_00005246
	BSET.b	#0, $7(A0)
	MOVE.w	#$0020, $28(A0)
	BRA.w	loc_00005258
loc_00005246:
	SUBI.b	#$41, D0
	LSL.b	#1, D0
	MOVE.w	loc_0000525A(PC,D0.w), D1
	ADD.w	D1, $A(A0)
	BSR.w	loc_000054A2
loc_00005258:
	RTS
loc_0000525A:
	dc.w 	$FFFE, $0002, $FFFC, $0004
loc_00005262:
	LEA	loc_000052BA, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCC.w	loc_0000527A
	CLR.w	$00FF18C6
	BRA.w	loc_000051B4
loc_0000527A:
	MOVE.l	A0, $2E(A1)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	TST.b	$00FF18C7
	BEQ.w	loc_0000528E
	RTS
loc_0000528E:
	ANDI.b	#$7F, $6(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	TST.b	$00FF18C7
	BNE.w	loc_000052A4
	RTS
loc_000052A4:
	ORI.b	#$80, $6(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	TST.b	$00FF18C7
	BEQ.w	loc_000051B4
	RTS
	
loc_000052BA:
	MOVE.l	#$000053D2, $32(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVEA.l	$2E(A0), A1	
	BSR.w	ObjSys_UpdateObjAnim	
	BCS.w	loc_000052DA	
	MOVE.b	$9(A0), $9(A1)	
	RTS	
loc_000052DA:
	MOVE.b	#5, $6(A0)	
	MOVE.w	$A(A1), $A(A0)	
	MOVE.w	$A(A1), $36(A0)	
	MOVE.w	$E(A1), $E(A0)	
	MOVE.w	$E(A1), $38(A0)	
	MOVE.w	#$FFFF, $16(A0)	
	MOVE.w	#$0A00, $1A(A0)	
	MOVE.w	#$1800, $1C(A0)	
	MOVE.b	#sfxID_NoBonus, D0	
	JSR	SndDrv_QueueSoundEffect	
	BSR.w	ObjSys_UpdateObjNextOpTimer	
	MOVEA.l	$2E(A0), A1	
	BSR.w	ObjSys_UpdatePosInterpMove	
	BCS.w	loc_00005332	
	MOVE.w	$A(A0), $A(A1)	
	MOVE.w	$E(A0), $E(A1)	
	RTS	
loc_00005332:
	CLR.b	$00FF18C7	
	BSR.w	ObjSys_UpdateObjNextOpTimer	
	TST.b	$00FF18C7	
	BNE.w	loc_00005348	
	RTS	
loc_00005348:
	MOVE.b	#5, $6(A0)	
	MOVE.w	$36(A0), $A(A0)	
	CLR.l	$16(A0)	
	MOVE.w	#$FFFF, $20(A0)	
	MOVE.w	#$1800, $1C(A0)	
	MOVE.l	#$000053C4, $32(A0)	
	BSR.w	ObjSys_UpdateObjNextOpTimer	
	MOVEA.l	$2E(A0), A1	
	BSR.w	ObjSys_UpdatePosInterpMove	
	BSR.w	ObjSys_UpdateObjAnim	
	MOVE.b	$9(A0), $9(A1)	
	MOVE.w	$A(A0), $A(A1)	
	MOVE.w	$E(A0), D0	
	MOVE.w	D0, $E(A1)	
	CMP.w	$38(A0), D0	
	BCC.w	loc_0000539A	
	RTS	
loc_0000539A:
	MOVE.b	#$0D, $9(A1)	
	MOVE.w	$36(A0), $A(A1)	
	MOVE.w	$38(A0), $E(A1)	
	MOVE.b	#$FF, $36(A1)	
	CLR.w	$00FF18C6	
	MOVE.b	#sfxID_PlacePuyo, D0	
	BSR.w	SndDrv_QueueSoundEffect	
	BRA.w	ObjSys_DeleteObjectA0	
loc_000053C4:
	dc.b	$01, $0D, $01, $24, $01, $26, $01, $25, $FF, $00
	dc.l    loc_000053C4
	dc.b    $08, $09, $12, $0C, $02, $0B, $01, $0D, $FE, $00
loc_000053DC:
	LEA	loc_0000540C, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCS.w	loc_000051B4
	MOVE.l	A0, $2E(A1)
	MOVE.l	#loc_0000542C, $32(A1)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVE.b	$00FF0144, D0
	AND.b	$00FF0145, D0
	BPL.w	loc_000051B4
	RTS
loc_0000540C:
	move.b ($00FF0144).l, d0
	and.b ($00FF0145).l, d0
	bpl.w ObjSys_DeleteObjectA0
	bsr.w ObjSys_UpdateObjAnim
	movea.l $2e(a0), a1
	move.b $9(a0), $9(a1)
	rts
loc_0000542C:
	dc.b	$14, $2B, $16, $2C, $18, $2B, $12, $2C, $15, $2B, $17, $2C, $FF, $00
	dc.l    loc_0000542C
loc_0000543E:
	EORI.b	#2, $7(A0)
	BTST.b	#1, $7(A0)
	BEQ.w	loc_00005454
	MOVE.w	#$001E, D0
	RTS
loc_00005454:
	MOVE.w	#$001E, D0
	MOVE.w	#0, D1
	MOVE.b	rCurGameMode, D2
	ANDI.b	#3, D2
	BNE.w	loc_00005472
	MOVE.w	#$0016, D0
	MOVE.w	#8, D1
loc_00005472:
	JSR	loc_00001202
	ADD.w	D1, D0
	RTS
loc_0000547C:
	CMPI.b	#4, D0
	BCS.w	loc_00005486
	RTS
loc_00005486:
	MOVE.l	#$00008000, D1
	BTST.l	#0, D0
	BEQ.w	loc_00005496
	NEG.l	D1
loc_00005496:
	MOVE.l	D1, $12(A0)
	MOVE.b	#$82, $6(A0)
	RTS
loc_000054A2:
	CMPI.w	#$0108, $A(A0)
	BCC.w	loc_000054B2
	MOVE.w	#$0108, $A(A0)
loc_000054B2:
	CMPI.w	#$0139, $A(A0)
	BCS.w	loc_000054C2
	MOVE.w	#$0138, $A(A0)
loc_000054C2:
	RTS
loc_000054C4:
	BTST.b	#0, $7(A0)
	BNE.w	loc_000054D0
	RTS
loc_000054D0:
	MOVE.w	$28(A0), D0
	LSL.b	#2, D0
	ORI.b	#$80, D0
	MOVE.w	#$1800, D1
	JSR	SignedSinWithMul
	SWAP	D2
	ADD.w	$20(A0), D2
	MOVE.w	D2, $E(A0)
	SUBQ.w	#1, $28(A0)
	BMI.w	loc_000054F8
	RTS
loc_000054F8:
	BCLR.b	#0, $7(A0)
	RTS
loc_00005500:
	CLR.w	rFrameTimer
	MOVE.w	#$001F, D0
loc_0000550A:
	LEA	loc_00005582, A1
	BSR.w	loc_00002AB0
	BCS.w	loc_0000557C
	MOVE.b	#$83, $6(A1)
	MOVE.b	#6, $8(A1)
	MOVE.b	#$0E, $9(A1)
	MOVE.w	$A(A0), $A(A1)
	MOVE.w	$E(A0), $E(A1)
	MOVE.w	#$FFFF, $20(A1)
	MOVE.w	#$2000, $1C(A1)
	MOVEM.l	D0, -(A7)
	LSL.b	#3, D0
	MOVE.b	D0, D3
	MOVE.w	#$00C0, D0
	JSR	loc_00001202
	ADDI.w	#$0280, D0
	MOVE.w	D0, D1
	MOVE.b	D3, D0
	JSR	SignedSinWithMul
	MOVE.l	D2, $12(A1)
	ADDQ.b	#5, D0
	JSR	SignedCosWithMul
	MOVE.l	D2, $16(A1)
	MOVE.w	#$0014, $26(A1)
	MOVEM.l	(A7)+, D0
loc_0000557C:
	DBF	D0, loc_0000550A
	RTS
loc_00005582:
	BSR.w	ObjSys_UpdatePosInterpMove
	BCS.w	ObjSys_DeleteObjectA0
	SUBQ.w	#1, $26(A0)
	RTS

; Dead Code.  Originally, it seems like the particle effects that appear when
; carbuncle pops the balloon at the beginning of a match were supposed to fall
; down instead of spreading out.  Removing the above RTS restores this behavior.
	MOVE.b	#$87, $6(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BSR.w	ObjSys_UpdatePosInterpMove	
	BCS.w	ObjSys_DeleteObjectA0	
	RTS	

loc_000055A4:
	MOVE.w	#$8000, D1
	MOVE.w	#$8500, D2
	BRA.w	loc_000055C4
loc_000055B0:
	move.w #0, d1
	move.w #$9000, d2
	bra.w loc_000055C4
loc_000055BC:
	move.w #$2000, d1
	move.w #$9400, d2
loc_000055C4:
	MOVEM.l	A0/D2, -(A7)
	CLR.w	D0
	MOVE.b	rOnePlayer_CurCutscene, D0
	LSL.w	#2, D0
	MOVEA.l	lookup_portraitArt(PC,D0.w), A0
	MOVE.w	D1, D0
	JSR	System_DecompressComp
	MOVEM.l	(A7)+, D2/A0
	CLR.w	$00FF18AA
	LEA	loc_00005666, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCS.w	loc_00005604
	MOVE.w	D2, $2A(A1)
	MOVE.b	#$FF, $8(A1)
	MOVE.l	A0, $2E(A1)
loc_00005604:
	LEA	loc_00005666, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCS.w	loc_00005620
	MOVE.w	#4, $28(A1)
	MOVE.w	D2, $2A(A1)
	MOVE.l	A0, $2E(A1)
loc_00005620:
	RTS
lookup_portraitArt:
	dc.l	art_portraitSkeletonT
	dc.l	art_portraitSuketoudara
	dc.l	art_portraitZombie
	dc.l	art_portraitDraco
	dc.l	art_portraitNasu
	dc.l	art_portraitWitch
	dc.l	art_portraitSasoriman
	dc.l	art_portraitHarpy
	dc.l	art_portraitZohDaimaoh
	dc.l	art_portraitSchezo
	dc.l	art_portraitMinotauros
	dc.l	art_portraitRulue
	dc.l	art_portraitSatan
	dc.l	art_portraitMummy
	dc.l	art_portraitSukiyapotes
	dc.l	art_portraitPanotty
	dc.l	art_portraitArle
loc_00005666:
	MOVE.w	#$FFFF, $26(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVEA.l	$2E(A0), A1
	CMPI.b	#$90, $2A(A0)
	BNE.w	loc_0000568A
	TST.b	$7(A1)
	BNE.w	loc_0000568A
	BRA.w	ObjSys_DeleteObjectA0
loc_0000568A:
	MOVE.w	$00FF18AA, D0
	CMP.w	$26(A0), D0
	BEQ.w	loc_000056C6
	MOVE.w	D0, $26(A0)
	LEA	tbl_PortraitAnims, A1
	CLR.w	D0
	MOVE.b	rOnePlayer_CurCutscene, D0
	LSL.w	#2, D0
	MOVEA.l	(A1,D0.w), A2
	MOVE.w	$26(A0), D0
	ADD.w	$28(A0), D0
	LSL.w	#2, D0
	MOVE.l	(A2,D0.w), D1
	MOVE.l	D1, $32(A0)
	CLR.b	$22(A0)
loc_000056C6:
	BSR.w	ObjSys_UpdateObjAnim
	MOVE.w	$2A(A0), D0
	MOVE.b	$9(A0), D0
	CMP.b	$8(A0), D0
	BNE.w	loc_000056DC
	RTS
loc_000056DC:
	MOVE.b	D0, $8(A0)
	SWAP	D0
	JMP	Video_QueueBgMapSpecial
tbl_PortraitAnims:
	dc.l	animtbl_PortraitSkeletonT
	dc.l	animtbl_PortraitSuketoudara
	dc.l	animtbl_PortraitZombie
	dc.l	animtbl_PortraitDraco
	dc.l	animtbl_PortraitNasu
	dc.l	animtbl_PortraitWitch
	dc.l	animtbl_PortraitSasoriman
	dc.l	animtbl_PortraitHarpy
	dc.l	animtbl_PortraitZohDaimaoh
	dc.l	animtbl_PortraitSchezo
	dc.l	animtbl_PortraitMinotauros
	dc.l	animtbl_PortraitRulue
	dc.l	animtbl_PortraitSatan
	dc.l	animtbl_PortraitMummy
	dc.l    animtbl_PortraitSukiyapotes
	dc.l    animtbl_PortraitPanotty

	include "anim/portrait/mummy.asm"
	include "anim/portrait/sukiyapotes.asm"
	include "anim/portrait/panotty.asm"
	include "anim/portrait/skeletont.asm"
	include "anim/portrait/suketoudara.asm"
	include "anim/portrait/zombie.asm"
	include "anim/portrait/draco.asm"
	include "anim/portrait/nasu.asm"
	include "anim/portrait/witch.asm"
	include "anim/portrait/sasoriman.asm"
	include "anim/portrait/harpy.asm"
	include "anim/portrait/zohdaimaoh.asm"
	include "anim/portrait/schezo.asm"
	include "anim/portrait/minotauros.asm"
	include "anim/portrait/rulue.asm"
	include "anim/portrait/satan.asm"

loc_00005E06:
	EORI.b	#1, $2A(A0)
	BSR.w	loc_00005064
	EORI.b	#1, $2A(A0)
	ADDI.w	#$0010, D0
	MOVE.w	D0, D3
	MOVE.w	#3, D1
loc_00005E20:
	LEA	loc_00005E92, A1
	BSR.w	loc_00002AB0
	BCS.w	loc_00005E8C
	MOVE.b	#$0F, $6(A1)
	MOVE.b	#$25, $8(A1)
	MOVE.b	D1, $9(A1)
	MOVE.w	D1, D2
	LSL.w	#4, D2
	JSR	UpdateRNG
	ANDI.b	#$0F, D0
	OR.b	D0, D2
	MOVE.w	D2, $26(A1)
	MOVE.w	#$0040, D0
	JSR	loc_00001202
	ADD.w	D3, D0
	MOVE.w	D0, $A(A1)
	MOVE.w	#$0160, $E(A1)
	MOVE.w	#$FFFC, $16(A1)
	MOVE.w	#$FFFF, $20(A1)
	MOVE.w	#$0C00, $1C(A1)
	MOVE.w	$A(A1), $1E(A1)
	MOVE.w	#1, $12(A1)
	MOVE.w	#$2000, $1A(A1)
loc_00005E8C:
	DBF	D1, loc_00005E20
	RTS
loc_00005E92:
	TST.w	$26(A0)
	BEQ.w	loc_00005EA0
	SUBQ.w	#1, $26(A0)
	RTS
loc_00005EA0:
	ORI.b	#$80, $6(A0)
	MOVE.w	#$0040, $26(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BSR.w	ObjSys_UpdatePosInterpMove
	SUBQ.w	#1, $26(A0)
	BEQ.w	loc_00005EBE
	RTS
loc_00005EBE:
	MOVE.b	#0, $6(A0)
	MOVE.w	#8, D0
	BSR.w	ObjSys_SetObjNextOpTimer
	BSR.w	ObjSys_UpdateObjNextOpTimer
loc_00005ED0:
	CLR.w	D0
	MOVE.b	$9(A0), D0
	LSL.w	#2, D0
	MOVEA.l	loc_00005F4A(PC,D0.w), A2
	MOVE.w	#7, D3
loc_00005EE0:
	LEA	loc_00005FEE, A1
	BSR.w	loc_00002AB0
	BCS.w	loc_00005F38
	MOVE.b	#$87, $6(A1)
	MOVE.b	$8(A0), $8(A1)
	MOVE.b	$9(A0), $9(A1)
	MOVE.l	A2, $32(A1)
	MOVE.w	$A(A0), $A(A1)
	MOVE.w	$E(A0), $E(A1)
	MOVE.w	#$FFFF, $20(A1)
	MOVE.w	#$0800, $1C(A1)
	MOVE.b	D3, D0
	LSL.b	#5, D0
	MOVE.w	#$0100, D1
	JSR	SignedSinWithMul
	MOVE.l	D2, $12(A1)
	JSR	SignedCosWithMul
	MOVE.l	D2, $16(A1)
loc_00005F38:
	DBF	D3, loc_00005EE0
	MOVE.b	#sfxID_WinFirework, D0
	JSR	SndDrv_QueueSoundEffect
	BRA.w	ObjSys_DeleteObjectA0
	
loc_00005F4A:
	dc.l    loc_00005F5A
    dc.l    loc_00005F62
    dc.l    loc_00005F6A
    dc.l    loc_00005F72
loc_00005F5A:
    dc.b    $08
    dc.b    $00
    dc.b    $20
    dc.b    $04
    dc.b    $40
    dc.b    $08
    dc.b    $FE
    dc.b    $00
loc_00005F62:
    dc.b    $08
    dc.b    $01
    dc.b    $20
    dc.b    $05
    dc.b    $40
    dc.b    $09
    dc.b    $FE
    dc.b    $00
loc_00005F6A:
    dc.b    $08
    dc.b    $02
    dc.b    $20
    dc.b    $06
    dc.b    $40
    dc.b    $0A
    dc.b    $FE
    dc.b    $00
loc_00005F72:
    dc.b    $08
    dc.b    $03
    dc.b    $20
    dc.b    $07
    dc.b    $40
    dc.b    $0B
    dc.b    $FE
	dc.b	$00
loc_00005F7A:
	lea (loc_00005FD8), a2
	move.w #$a0, d1
	tst.b $2a(a0)
	bne.w loc_00005F90
	move.w #$0160, d1
loc_00005F90:
	move.w #3, d0
loc_00005F94:
	lea (loc_00005FE0), a1
	jsr loc_00002AB0
	bcs.w loc_00005FD2
	move.b #$25, $8(a1)
	move.b d0, $9(a1)
	movem.l D0, -(SP)
	jsr UpdateRNG
	andi.w #$3F, d0
	add.w d1, d0
	move.w d0, $a(a1)
	movem.l (SP)+, d0
	move.w d0, d2
	lsl.w #$4, d2
	move.w d2, $26(a1)
	move.w (a2)+, $e(a1)
loc_00005FD2:
	dbf d0, loc_00005F94
	rts
loc_00005FD8:
	dc.b    $00 ;0x40
	dc.b	$A0, $00, $B8, $00, $B0, $00, $A8
loc_00005FE0:
	tst.w $26(a0)
	beq.w loc_00005ED0
loc_00005FE8:
	subq.w #1, $26(a0)
	rts
loc_00005FEE:
	BSR.w	ObjSys_UpdatePosInterpMove
	BCS.w	ObjSys_DeleteObjectA0
	BSR.w	ObjSys_UpdateObjAnim
	BCS.w	ObjSys_DeleteObjectA0
	RTS
loc_00006000:
	MOVE.w	#$800A, D0
	SWAP	D0
	MOVE.b	$2A(A0), D0
	JMP	Video_QueueBgMapSpecial
loc_00006010:
	LEA	loc_0000601A, A1
	BRA.w	ObjSys_InitObjWithFunc
loc_0000601A:
	MOVE.w	#7, $26(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.w	#$9B00, D0
	MOVE.b	$27(A0), D0
	SWAP	D0
	JSR	Video_QueueBgMapSpecial
	SUBQ.w	#1, $26(A0)
	BEQ.w	loc_00006040
	RTS
loc_00006040:
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.w	#$800C, D0
	SWAP	D0
	MOVE.w	#$0F00, D0
	JMP	Video_QueueBgMapSpecial
loc_00006056:
	MOVEM.l	A0, -(A7)
	LEA	art_winLose, A0
	MOVE.w	#$4000, D0
	JSR	System_DecompressComp
	MOVEM.l	(A7)+, A0
	LEA	loc_000061E2, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCS.w	loc_000060C2
	MOVE.b	#$80, $6(A1)
	MOVE.b	#$27, $8(A1)
	MOVE.l	A0, $2E(A1)
	MOVE.b	$2A(A0), $2A(A1)
	EORI.b	#1, $2A(A1)
	LEA	loc_0000627E, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCS.w	loc_000060C2
	MOVE.b	#$93, $6(A1)
	MOVE.b	#$27, $8(A1)
	MOVE.b	#1, $9(A1)
	MOVE.l	A0, $2E(A1)
	MOVE.b	$2A(A0), $2A(A1)
loc_000060C2:
	RTS
loc_000060C4:
	MOVE.w	#$001F, D0
	LEA	loc_00006192, A2
loc_000060CE:
	LEA	loc_00006142, A1
	JSR	loc_00002AB0
	BCS.w	loc_0000613C
	MOVE.b	$8(A0), $8(A1)
	MOVE.w	$A(A0), $1E(A1)
	MOVE.w	$20(A0), $20(A1)
	ADDQ.w	#8, $20(A1)
	MOVE.b	D0, D1
	LSL.b	#4, D1
	MOVE.b	D0, D2
	LSR.b	#1, D2
	ANDI.b	#8, D2
	OR.b	D2, D1
	MOVE.b	D1, $36(A1)
	MOVE.w	D0, D1
	ANDI.b	#$10, D1
	MOVE.w	#8, D2
	LSL.w	D2, D1
	ADDI.w	#$2000, D1
	MOVE.w	D1, $38(A1)
	MOVE.w	D0, D1
	LSL.b	#2, D1
	ANDI.b	#$0C, D1
	MOVE.l	(A2,D1.w), $32(A1)
	MOVE.b	#1, $12(A1)
	CMPI.b	#$10, D0
	BCC.w	loc_0000613C
	MOVE.b	#$FF, $12(A1)
loc_0000613C:
	DBF	D0, loc_000060CE
	RTS
loc_00006142:
	JSR	ObjSys_UpdateObjAnim
	MOVE.b	#$80, $6(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	JSR	ObjSys_UpdateObjAnim
	MOVE.b	$36(A0), D0
	MOVE.w	$38(A0), D1
	JSR	SignedSinWithMul
	SWAP	D2
	ADD.w	$1E(A0), D2
	MOVE.w	D2, $A(A0)
	ADDI.b	#$28, D0
	ASR.w	#1, D1
	JSR	SignedCosWithMul
	SWAP	D2
	ADD.w	$20(A0), D2
	MOVE.w	D2, $E(A0)
	MOVE.b	$12(A0), D0
	ADD.b	D0, $36(A0)
	RTS
loc_00006192:
	dc.l	loc_000061A6, loc_000061B2, loc_000061BE, loc_000061CA 
	dc.l	loc_000061D6
loc_000061A6:
	dc.b	$04
	dc.b	$03 
	dc.b	$04
	dc.b	$04 
	dc.b	$04
	dc.b	$05 
	dc.b	$FF
	dc.b	$00 
	dc.l	loc_000061A6
loc_000061B2:
	dc.b	$04
	dc.b	$08 
	dc.b	$04
	dc.b	$07 
	dc.b	$04
	dc.b	$06 
	dc.b	$FF
	dc.b	$00 
	dc.l	loc_000061B2
loc_000061BE:
	dc.b	$04
	dc.b	$09 
	dc.b	$04
	dc.b	$0A 
	dc.b	$04
	dc.b	$0B 
	dc.b	$FF
	dc.b	$00 
	dc.l	loc_000061BE
loc_000061CA:
	dc.b	$04
	dc.b	$0E 
	dc.b	$04
	dc.b	$0D 
	dc.b	$04
	dc.b	$0C 
	dc.b	$FF
	dc.b	$00 
	dc.l	loc_000061CA
loc_000061D6:
	dc.b	$04, $0F, $04, $10, $04, $11, $FF, $00 
	dc.l	loc_000061D6
loc_000061E2:
	BSR.w	loc_00005064
	ADDI.w	#$0030, D0
	MOVE.w	D0, $A(A0)
	ADDI.w	#$0040, D1
	MOVE.w	D1, $20(A0)
	BSR.w	loc_000060C4
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVEA.l	$2E(A0), A1
	BTST.b	#2, $7(A1)
	BEQ.w	ObjSys_DeleteObjectA0
	BTST.b	#1, $7(A1)
	BEQ.w	loc_00006238
	MOVE.b	$36(A0), D0
	ORI.b	#$80, D0
	MOVE.w	#$1000, D1
	JSR	SignedSinWithMul
	SWAP	D2
	ADD.w	$20(A0), D2
	MOVE.w	D2, $E(A0)
	ADDQ.b	#4, $36(A0)
	RTS
loc_00006238:
	MOVE.b	#$80, $6(A0)
	MOVE.b	#$29, $8(A0)
	MOVE.l	#loc_00006F22, $32(A0)
	MOVE.w	$20(A0), $E(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	JMP	ObjSys_UpdateObjAnim
loc_0000625C:
	MOVEA.l	$2E(A0), A1
	BTST.b	#2, $7(A1)
	BEQ.w	loc_00006276
	BTST.b	#1, $7(A1)
	BEQ.w	loc_00006276
	RTS
loc_00006276:
	MOVEM.l	(A7)+, D0
	BRA.w	ObjSys_DeleteObjectA0
loc_0000627E:
	BSR.w	loc_00005064
	ADDI.w	#$0020, D0
	MOVE.w	D0, $A(A0)
	ADDI.w	#$FFD0, D1
	MOVE.w	D1, $E(A0)
	MOVE.l	#$00010000, $12(A0)
	MOVE.l	#$00008000, $16(A0)
	MOVE.w	#6, $28(A0)
loc_000062A8:
	MOVE.w	#$0020, $26(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BSR.b	loc_0000625C
	TST.w	$26(A0)
	BEQ.w	loc_000062C8
	JSR	ObjSys_UpdatePosInterpMove
	SUBQ.w	#1, $26(A0)
	RTS
loc_000062C8:
	TST.w	$28(A0)
	BEQ.w	loc_000062E0
	SUBQ.w	#1, $28(A0)
	MOVE.l	$12(A0), D0
	NEG.l	D0
	MOVE.l	D0, $12(A0)
	BRA.b	loc_000062A8
loc_000062E0:
	MOVE.l	$12(A0), D0
	NEG.l	D0
	MOVE.l	D0, $12(A0)
	MOVE.w	#$0010, D0
	BSR.w	ObjSys_SetObjNextOpTimer
	JSR	ObjSys_UpdatePosInterpMove
	BSR.w	ObjSys_UpdateObjNextOpTimer
loc_000062FC:
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BSR.w	loc_0000625C
	CMPI.w	#$0090, $E(A0)
	BCS.w	loc_00006314
	SUBQ.w	#1, $E(A0)
	RTS
loc_00006314:
	MOVE.b	#$85, $6(A0)
	CLR.l	$16(A0)
	MOVE.w	#$2000, $1C(A0)
	MOVE.w	#$FFFF, $20(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BSR.w	loc_0000625C
	JSR	ObjSys_UpdatePosInterpMove
	CMPI.w	#$00D0, $E(A0)
	BCC.w	loc_00006344
	RTS
loc_00006344:
	MOVE.w	#$00D0, $E(A0)
	BRA.b	loc_000062FC
loc_0000634C:
	LEA	loc_0000637C, A1
	JSR	ObjSys_InitObjWithFunc
	BCC.w	loc_0000635E
	RTS
loc_0000635E:
	MOVE.l	A0, $2E(A1)
	MOVE.b	#$27, $8(A1)
	MOVE.b	#2, $9(A1)
	MOVE.w	#$0120, $A(A1)
	MOVE.w	#$010C, $E(A1)
	RTS
loc_0000637C:
	MOVE.w	#$0040, D0
	JSR	loc_00001202
	ADDI.w	#$0020, D0
	MOVE.w	D0, $26(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	TST.w	$26(A0)
	BEQ.w	loc_000063A0
	SUBQ.w	#1, $26(A0)
	RTS
loc_000063A0:
	MOVE.b	#$80, $6(A0)
	MOVE.w	#$0030, D0
	BSR.w	ObjSys_SetObjNextOpTimer
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVE.b	#0, $6(A0)
	BRA.b	loc_0000637C
loc_000063BA:
	BSR.w	loc_00005022
	ADDA.l	#$00000018, A2
	MOVE.w	#$008E, D0
loc_000063C8:
	MOVE.b	(A2,D0.w), D1
	BEQ.w	loc_000063E2
	ANDI.b	#$70, D1
	CMPI.b	#$60, D1
	BEQ.w	loc_000063E2
	ANDI.b	#$F3, (A2,D0.w)
loc_000063E2:
	SUBQ.w	#2, D0
	BCC.b	loc_000063C8
	ORI	#$0700, SR
	BSR.w	loc_00004CCC
	ANDI	#$F8FF, SR
	CLR.w	D3
	LEA	loc_00006F58, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCS.w	loc_00006416
	ADDQ.w	#1, D3
	MOVE.l	A0, $2E(A1)
	MOVE.l	#loc_00006F94, $32(A1)
	MOVE.b	#$FF, $8(A1)
loc_00006416:
	BSR.w	loc_00005022
	ADDA.l	#$00000018, A2
	ANDI.w	#$007F, D0
	MOVE.w	D0, D2
	BSR.w	loc_00005064
	ADDI.w	#$0017, D0
	LEA	loc_00006510, A3
	MOVE.w	#5, D1
loc_00006438:
	LEA	loc_00006FA0, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCS.w	loc_0000647A
	BSR.w	loc_00006E6A
	ADDQ.w	#1, D3
	MOVE.l	A0, $2E(A1)
	MOVE.b	#4, $6(A1)
	MOVE.w	D0, $A(A1)
	MOVE.w	#$2000, $1C(A1)
	MOVE.w	#$FFFF, $20(A1)
	MOVE.w	D2, $32(A1)
	MOVE.w	D1, D4
	LSL.w	#1, D4
	MOVE.w	(A3,D4.w), $24(A1)
	MOVE.w	$C(A3,D4.w), $1A(A1)
loc_0000647A:
	ADDI.w	#$000A, D0
	ADDQ.w	#4, D2
	ADDA.l	#2, A2
	DBF	D1, loc_00006438
	MOVE.w	D3, $26(A0)
	RTS
loc_00006490:
	CMPI.b	#1, rCurGameMode
	BCC.w	loc_000064A6
	JSR	SndDrv_PlayClearEffect
	BSR.w	ObjSys_UpdateObjNextOpTimer
loc_000064A6:
	BSR.w	loc_00006528
	BSR.w	loc_000063BA
	BSR.w	ObjSys_UpdateObjNextOpTimer
	TST.w	$26(A0)
	BEQ.w	loc_000064BC
	RTS
loc_000064BC:
	BSR.w	loc_00004B26
	ORI	#$0700, SR
	BSR.w	loc_00004CCC
	ANDI	#$F8FF, SR
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BSR.w	loc_00005022
	ANDI.w	#$007F, D0
	MOVE.w	#5, D1
	LEA	rScrollYScanFront, A2
loc_000064E2:
	CLR.l	(A2,D0.w)
	ADDQ.w	#4, D0
	DBF	D1, loc_000064E2
	CLR.w	D0
	MOVE.b	rCurGameMode, D0
	ANDI.b	#3, D0
	LSL.b	#2, D0
	MOVEA.l	loc_00006500(PC,D0.w), A2
	JMP	(A2)
loc_00006500:
	dc.l	loc_0000678E
	dc.l	loc_00006B64 
	dc.l	loc_00006D08
	dc.l	loc_00006D08 
loc_00006510:
	dc.w	$0020, $0014, $0000, $0004, $0010, $0024, $0B00, $0900, $0700, $0800, $0A00, $0B00 
loc_00006528:
	CLR.w	D0
	MOVE.b	rCurGameMode, D0
	LSL.b	#2, D0
	MOVEA.l	loc_00006538(PC,D0.w), A2
	JMP	(A2)
loc_00006538:
	dc.l	loc_00006562
	dc.l    loc_00006668
	dc.l    loc_000066E2
	dc.l    loc_000066E2
	dc.l    loc_0000654C
loc_0000654C:
	movea.l $2e(a0), a1
	bsr.w ObjSys_DeleteObjectA1
	clr.b (rBytecode_Ret)
	clr.b (rBytecode_StopRun)
	rts
loc_00006562:
	MOVE.w	#$FFFF, $00FF18C8
	CLR.w	$00FF0144
	MOVE.b	$2A(A0), D0
	EORI.b	#1, D0
	MOVE.b	D0, rBytecode_Ret
	MOVE.b	D0, $00FF0115
	CLR.w	D0
	MOVE.b	$2A(A0), D0
	LSL.b	#1, D0
	ORI.b	#1, D0
	MOVE.w	D0, $00FF18AA
	CLR.l	$00FF187A
	CLR.w	$00FF187E
	TST.b	$2A(A0)
	BNE.w	loc_000065BC
	MOVEA.l	$2E(A0), A1
	BSR.w	ObjSys_DeleteObjectA1
	MOVE.b	#sfxID_Lose, D0
	JMP	SndDrv_QueueSoundEffect
loc_000065BC:
	JSR	loc_0000CE9E
	MOVE.w	rSecondTimer, D0
	CMPI.w	#$03E8, D0
	BCS.w	loc_000065D4
	MOVE.w	#$03E7, D0
loc_000065D4:
	MOVE.w	D0, $16(A0)
	BSR.w	loc_00006722
	MOVE.w	D0, $12(A0)
	MOVEA.l	$2E(A0), A1
	MOVE.l	$A(A1), $A(A0)
	MOVE.l	$A(A1), $00FF187A
	ADD.l	D0, $00FF187A
	CMPI.l	#$05F5E100, $00FF187A
	BCS.w	loc_00006610
	MOVE.l	#$05F5E0FF, $00FF187A
loc_00006610:
	MOVE.w	$16(A1), $00FF187E
	CMPI.b	#stgID_Satan, rOnePlayer_CurStage
	BEQ.w	loc_00006646
	CMPI.b	#stgID_Mummy, rOnePlayer_CurStage
	BEQ.w	loc_00006646
loc_00006630:
	BSR.w	ObjSys_DeleteObjectA1
	BSR.w	loc_00006010
	BSR.w	loc_00005E06
	MOVE.b	#musID_Win, D0
	JMP	SndDrv_PlayMusicId
loc_00006646:
	MOVEM.l	A1/A0, -(A7)
	MOVEA.l	A1, A0
	MOVE.l	$00FF187A, $A(A0)
	MOVE.b	rCurGameMode, $00FF1890
	BSR.w	loc_0000B9FA
	MOVEM.l	(A7)+, A0/A1
	BRA.b	loc_00006630
loc_00006668:
	clr.w d0
	move.b $2a(a0), d0
	lea ($00FF18C8), a1
	move.b #$FF, (a1, d0.w)
	clr.w ($00FF0144)
	movea.l $2E(a0), a1
	bsr.w ObjSys_DeleteObjectA1
	move.b #sfxID_Lose, d0
	jsr SndDrv_PlayMusicId
	bsr.w loc_000066C8
	clr.w d0
	move.b $2a(a0), d0
	eori.b #1, d0
	lea ($00FF0128), a1
	addq.b #1, (a1, d0.w)
	cmpi.b #$64, (a1, d0.w)
	bcs.w loc_000066C4
	clr.w (a1)
	move.b #1, (a1, d0.w)
	move.b #cutID_Satan, (rOnePlayer_CurCutscene)
loc_000066C4:
	bra.w loc_00005F7A
loc_000066C8:
	lea (tbl_cutsceneOrder), a1
	move.w #$F, d0
	jsr loc_00001202
	move.b (a1, d0.w), (rOnePlayer_CurCutscene)
	rts
loc_000066E2:
	clr.w d0
	move.b $2a(a0), d0
	lea ($00FF18C8), a1
	lea ($00FF0144), a2
	move.b #$FF, (a1, d0.w)
	clr.b (a2, d0.w)
	move.b #sfxID_Lose, d0
	jmp SndDrv_QueueSoundEffect
loc_00006708:
	MOVE.w	#$9800, D0
	SWAP	D0
	MOVE.w	$16(A0), D0
	JSR	Video_QueueBgMapSpecial
	MOVE.b	#sfxID_6C, D0
	JMP	SndDrv_QueueSoundEffect
loc_00006722:
	CLR.w	D0
	MOVE.b	$00FF0114, D0
	ADDQ.b	#1, D0
	MULU.w	#$000A, D0
	ADDI.w	#$006E, D0
	SUB.w	$16(A0), D0
	BCC.w	loc_0000673E
	CLR.w	D0
loc_0000673E:
	MULU.w	D0, D0
	MULU.w	#3, D0
	RTS
loc_00006746:
	CLR.l	D0
	MOVE.w	$12(A0), D0
	BNE.w	loc_00006752
	RTS
loc_00006752:
	CMP.w	$28(A0), D0
	BCS.w	loc_0000675E
	MOVE.w	$28(A0), D0
loc_0000675E:
	SUB.w	D0, $12(A0)
	JSR	loc_00008832
	MOVE.b	$27(A0), D0
	ANDI.b	#3, D0
	BNE.w	loc_0000677E
	MOVE.b	#sfxID_2B, D0
	JSR	SndDrv_QueueSoundEffect
loc_0000677E:
	MOVE.w	#$9900, D0
	SWAP	D0
	MOVE.w	$12(A0), D0
	JMP	Video_QueueBgMapSpecial
loc_0000678E:
	TST.b	$2A(A0)
	BEQ.w	loc_00006874
	MOVE.b	#0, $2A(A0)
	MOVE.w	#$0060, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	loc_00002B40
	BSR.w	loc_00006708
	MOVE.w	#$0020, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	ObjSys_UpdateObjNextOpTimer
	TST.w	$12(A0)
	BEQ.w	loc_0000683C
	MOVE.w	#$9900, D0
	SWAP	D0
	MOVE.w	$12(A0), D0
	JSR	Video_QueueBgMapSpecial
	MOVE.b	#sfxID_Bonus, D0
	JSR	SndDrv_QueueSoundEffect
	MOVE.w	$12(A0), D0
	LSR.w	#7, D0
	BNE.w	loc_000067F0
	MOVE.w	#1, D0
loc_000067F0:
	MOVE.w	D0, $28(A0)
	MOVE.w	#$0140, $26(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	BSR.w	loc_00004C0A
	ANDI.b	#$F0, D0
	BNE.w	loc_00006820
	SUBQ.w	#1, $26(A0)
	BEQ.w	loc_00006820
	CMPI.w	#$00C0, $26(A0)
	BCS.w	loc_00006746
	RTS
loc_00006820:
	CLR.l	D0
	MOVE.w	$12(A0), D0
	JSR	loc_00008832
	MOVE.l	#$99000000, D0
	JSR	Video_QueueBgMapSpecial
	BRA.w	loc_00006862
loc_0000683C:
	MOVE.l	#$80050000, D0
	JSR	Video_QueueBgMapSpecial
	MOVE.b	#sfxID_NoBonus, D0
	JSR	SndDrv_QueueSoundEffect
	MOVE.w	#$0080, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	loc_00002B40
loc_00006862:
	CLR.b	$7(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	CLR.b	rBytecode_StopRun
	BRA.w	ObjSys_DeleteObjectA0
loc_00006874:
	MOVE.b	#1, $7(A0)
	BSR.w	loc_00006EB2
	MOVE.w	#$0080, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	loc_00002B40
	MOVE.b	rCurGameMode, $00FF1890
	BSR.w	loc_0000B9FA
	BCC.w	loc_000068A4
	BSR.w	loc_0000B568
loc_000068A4:
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BTST.b	#1, $7(A0)
	BEQ.w	loc_000068B4
	RTS
loc_000068B4:
	BSR.w	loc_00004B26
	ORI	#$0700, SR
	BSR.w	loc_00004CCC
	ANDI	#$F8FF, SR
	CLR.b	$7(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	CLR.b	rBytecode_StopRun
	BRA.w	ObjSys_DeleteObjectA0
loc_000068D6:
	MOVEM.l	A0, -(A7)
	CLR.w	D0
	MOVE.b	rOnePlayer_CurCutscene, D0
	LSL.w	#2, D0
	LEA	Cutscene_ArtTable, A1
	MOVEA.l	(A1,D0.w), A0
	MOVE.w	#$8000, D0
	JSR	System_DecompressComp
	MOVEM.l	(A7)+, A0
	CLR.w	D0
	MOVE.b	rOnePlayer_CurCutscene, D0
	MOVE.b	D0, D1
	ADDI.b	#9, D1
	LEA	loc_000069A4, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCS.w	loc_00006982
	MOVE.l	A0, $2E(A1)
	MOVE.b	#$80, $6(A1)
	MOVE.b	#$FF, $7(A1)
	MOVE.b	D1, $8(A1)
	MOVE.w	#$0180, $A(A1)
	MOVEA.l	A1, A2
	LEA	loc_00006984, A3
	MOVE.b	$2A(A0), $2A(A1)
	BEQ.w	loc_0000694A
	LEA	loc_00006994, A3
loc_0000694A:
	CLR.w	D2
	MOVE.b	rOnePlayer_CurCutscene, D2
	CLR.w	D3
	MOVE.b	(A3,D2.w), D3
	LEA	tbl_CutsceneCharAnims, A3
	LSL.w	#2, D2
	MOVEA.l	(A3,D2.w), A4
	LSL.w	#2, D3
	MOVE.l	(A4,D3.w), $32(A1)
	LEA	loc_000095FC, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCS.w	loc_00006982
	MOVE.l	A2, $2E(A1)
	MOVE.b	D1, $8(A1)
loc_00006982:
	RTS
loc_00006984:
	dc.b	$01, $00, $01, $03, $00, $00, $03, $00, $01, $03, $01, $04, $09, $05, $04, $00 
loc_00006994:
	dc.b	$03, $03, $02, $00, $00, $01, $00, $00, $02, $00, $00, $07, $05, $01, $02, $05 
loc_000069A4:
	MOVE.w	#$0138, $E(A0)
	TST.b	$2A(A0)
	BEQ.w	loc_00006A74
	JSR	ObjSys_UpdateObjAnim
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVEA.l	$2E(A0), A1
	BTST.b	#3, $7(A1)
	BEQ.w	loc_000069CC
	RTS
loc_000069CC:
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVEA.l	$2E(A0), A1
	MOVE.w	$28(A1), D0
	BEQ.w	loc_000069E2
	JMP	ObjSys_UpdateObjAnim
loc_000069E2:
	MOVE.b	#$95, $6(A0)
	MOVE.w	#$1800, $1C(A0)
	MOVE.w	#$FFFF, $20(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	JSR	ObjSys_UpdatePosInterpMove
	CMPI.w	#$01B0, $E(A0)
	BCC.w	loc_00006A0E
	JMP	ObjSys_UpdateObjAnim
loc_00006A0E:
	MOVE.w	#$0018, D0
	BSR.w	ObjSys_SetObjNextOpTimer
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVE.b	#sfxID_MajorGarbagePuyoFall2, D0
	JSR	SndDrv_QueueSoundEffect
	MOVE.w	#$0C00, $38(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVE.b	$36(A0), D0
	MOVE.w	$38(A0), D1
	LEA	$00FF05D6, A1
	MOVE.w	#$0011, D3
loc_00006A40:
	ANDI.b	#$7F, D0
	MOVEM.l	D0, -(A7)
	JSR	SignedSinWithMul
	MOVEM.l	(A7)+, D0
	SWAP	D2
	MOVE.w	D2, (A1)+
	MOVE.w	D2, (A1)+
	ADDI.b	#$83, D0
	DBF	D3, loc_00006A40
	ADDI.b	#$64, $36(A0)
	SUBI.w	#$0040, $38(A0)
	BCS.b	loc_00006A0E
	RTS
; Dead Data?
	dc.b	$60, $00, $C0, $80 
loc_00006A74:
	JSR	ObjSys_UpdateObjAnim
	BSR.w	ObjSys_UpdateObjNextOpTimer
	JMP	ObjSys_UpdateObjAnim
loc_00006A84:
	MOVEM.l	A0, -(A7)
	LEA	art_cutsceneArle, A0
	MOVE.w	#$6000, D0
	JSR	System_DecompressComp
	MOVEM.l	(A7)+, A0
	LEA	loc_000069A4, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCS.w	loc_00006B00
	MOVE.l	A0, $2E(A1)
	MOVE.b	#$80, $6(A1)
	MOVE.b	#$FF, $7(A1)
	MOVE.b	#SprMapID_Arle, Obj_SprMap(A1)
	MOVE.w	#$00C0, Obj_XPos(A1)
	MOVE.l	#loc_00006B02, Obj_Anim(A1)
	MOVE.b	$2A(A0), $2A(A1)
	EORI.b	#1, $2A(A1)
	BEQ.w	loc_00006AE6
	MOVE.l	#loc_00006B0C, Obj_Anim(A1)
loc_00006AE6:
	MOVEA.l	A1, A2
	LEA	Cutscene_ObjArleStart, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCS.w	loc_00006B00
	MOVE.l	A2, $2E(A1)
	MOVE.b	#SprMapID_Arle, Obj_SprMap(A1)
loc_00006B00:
	RTS
loc_00006B02:
	dc.b	$02, $00, $08, $06, $0C, $13, $00, $0B, $FE, $00
loc_00006B0C:
	dc.b    $00, $05, $FE, $00 
loc_00006B10:
	TST.b	$2A(A0)
	BEQ.w	loc_00006B1E
	JMP	loc_000055BC
loc_00006B1E:
	MOVEM.l	A0/D2, -(A7)
	LEA	lookup_portraitArt, A1
	MOVEA.l	$40(A1), A0
	MOVE.w	#$2000, D0
	JSR	System_DecompressComp
	MOVEM.l	(A7)+, D2/A0
	MOVE.b	rOnePlayer_CurCutscene, D0
	MOVEM.l	D0, -(A7)
	MOVE.w	#$9401, D0
	SWAP	D0
	MOVE.b	#cutID_Mummy, rOnePlayer_CurCutscene
	JSR	Video_QueueBgMapSpecial
	MOVEM.l	(A7)+, D0
	MOVE.b	D0, rOnePlayer_CurCutscene
	RTS
loc_00006B64:
	MOVE.w	$0(A0), D0
	MOVE.b	$2A(A0), D1
	MOVEM.l	A0/D1/D0, -(A7)
	JSR	ObjSys_Init
	MOVEM.l	(A7)+, D0/D1/A0
	MOVE.w	D0, $0(A0)
	MOVE.b	D1, $2A(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVE.w	#$0017, D0
	JSR	Video_QueueBgMapFromId
	BSR.w	ObjSys_UpdateObjNextOpTimer
	LEA	palLookupTable, A2
	ADDA.l	#(pal_general-palLookupTable), A2
	MOVE.b	#0, D0
	JSR	Video_LoadPaletteIntoIndex
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BSR.w	loc_00006B10
	MOVE.w	#4, D0
	BSR.w	ObjSys_SetObjNextOpTimer
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVE.w	#2, $00FF18AA
	MOVE.b	#$0E, $7(A0)
	BSR.w	loc_00006056
	JSR	loc_0000837C
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BSR.w	loc_00006A84
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BSR.w	loc_000068D6
	BSR.w	ObjSys_UpdateObjNextOpTimer
	CLR.w	D0
	MOVE.b	$2A(A0), D0
	LEA	$00FF012A, A1
	SUBQ.b	#1, (A1,D0.w)
	BNE.w	loc_00006CEC
	BSR.w	loc_00007F00
	ORI.b	#1, $7(A0)
	BSR.w	loc_00006EB2
	MOVE.w	#$0080, D0
	BSR.w	ObjSys_SetObjNextOpTimer
	BSR.w	loc_00002B40
	MOVE.w	#$0280, $28(A0)
	ANDI.b	#$F7, $7(A0)
	MOVE.w	#$0080, D4
	MOVE.w	#$CCA2, D5
	MOVE.w	#$A500, D6
	JSR	loc_00008198
	BSR.w	ObjSys_UpdateObjNextOpTimer
	JSR	loc_0000634C
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BSR.w	loc_00004C0A
	BTST.l	#7, D0
	BEQ.w	loc_00006C5E
	JSR	Arcade_CheckCoins
	BCS.w	loc_00006C5E
	BRA.w	loc_00006CD2
loc_00006C5E:
	TST.w	$28(A0)
	BEQ.w	loc_00006C9E
	SUBQ.w	#1, $28(A0)
	ANDI.b	#$70, D0
	BEQ.w	loc_00006C78
	ANDI.b	#$C0, $29(A0)
loc_00006C78:
	BSR.w	loc_00006000
	MOVE.w	#$8008, D0
	JSR	Arcade_CheckCoins
	BCS.w	loc_00006C8E
	MOVE.w	#$8009, D0
loc_00006C8E:
	SWAP	D0
	MOVE.w	#$0F00, D0
	MOVE.b	$2A(A0), D0
	JMP	Video_QueueBgMapSpecial
loc_00006C9E:
	BSR.w	loc_00006000
	ANDI.b	#$FD, $7(A0)
	MOVE.w	#3, $00FF18AA
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVE.w	#$0080, D0
	BSR.w	ObjSys_SetObjNextOpTimer
	BSR.w	loc_00002B40
	CLR.b	rBytecode_StopRun
	MOVE.b	#$FF, rBytecode_Ret
	BRA.w	ObjSys_DeleteObjectA0
loc_00006CD2:
	MOVE.b	#sfxID_ConfirmSelection, D0
	JSR	SndDrv_QueueSoundEffect
	CLR.b	rBytecode_StopRun
	CLR.b	rBytecode_Ret
	BRA.w	ObjSys_DeleteObjectA0
loc_00006CEC:
	MOVE.w	#$0100, D0
	BSR.w	ObjSys_SetObjNextOpTimer
	BSR.w	loc_00002B40
	CLR.b	rBytecode_StopRun
	CLR.b	rBytecode_Ret
	BRA.w	ObjSys_DeleteObjectA0
loc_00006D08:
	MOVE.b	#1, $7(A0)
	BSR.w	loc_00006EB2
	MOVE.w	#$00C0, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.b	#1, $00FF1890
	BSR.w	loc_0000B9FA
	BCC.w	loc_00006D36
	BSR.w	loc_0000B568
loc_00006D36:
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BTST.b	#1, $7(A0)
	BEQ.w	loc_00006D46
	RTS

loc_00006D46:
	BSR.w	loc_00004B26
	ORI	#$0700, SR
	BSR.w	loc_00004CCC
	ANDI	#$F8FF, SR
loc_00006D56:
	MOVE.w	#$0080, $26(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVE.b	$00FF1883, D0
	EORI.b	#3, D0
	BEQ.w	loc_00006E16
	BSR.w	loc_00004C0A
	BTST.l	#7, D0
	BEQ.w	loc_00006D88
	JSR	Arcade_CheckCoins
	BCS.w	loc_00006D88
	BRA.w	loc_00006DC8
loc_00006D88:
	SUBQ.w	#1, $26(A0)
	BCC.w	loc_00006DA2
	MOVE.w	#0, $26(A0)
	MOVE.b	$2A(A0), D0
	ADDQ.b	#1, D0
	OR.b	D0, $00FF1883
loc_00006DA2:
	BSR.w	loc_00006000
	MOVE.w	#$8009, D0
	JSR	Arcade_CheckCoins
	BCC.w	loc_00006DB8
	MOVE.b	#7, D0
loc_00006DB8:
	SWAP	D0
	MOVE.w	#$0F00, D0
	MOVE.b	$2A(A0), D0
	JMP	Video_QueueBgMapSpecial
loc_00006DC8:
	MOVE.b	$2A(A0), D0
	ADDQ.b	#1, D0
	NOT.b	D0
	AND.b	D0, $00FF1883
	MOVE.b	#sfxID_ConfirmSelection, D0
	JSR	SndDrv_QueueSoundEffect
	BCLR.b	#0, $7(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVE.w	#$8400, D0
	MOVE.b	$2A(A0), D0
	SWAP	D0
	MOVE.b	#5, D0
	JSR	Video_QueueBgMapSpecial
	BSR.w	loc_00006E2A
	BSR.w	loc_00004B26
	ORI	#$0700, SR
	BSR.w	loc_00004CCC
	ANDI	#$F8FF, SR
	BRA.w	loc_0000319A
loc_00006E16:
	CLR.b	rBytecode_StopRun
	BCLR.b	#0, $7(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BRA.w	ObjSys_DeleteObjectA0
loc_00006E2A:
	CLR.b	$8(A0)
	CLR.b	$2B(A0)
	CLR.l	$A(A0)
	CLR.l	$E(A0)
	CLR.w	$16(A0)
	CLR.w	$18(A0)
	MOVEA.l	$32(A0), A1
	MOVE.w	#$FFFF, $20(A1)
	CLR.w	$1E(A1)
	CLR.b	$7(A1)
	MOVE.w	#4, D2
loc_00006E58:
	BSR.w	loc_00003904
	MOVE.b	D0, $26(A1,D2.w)
	MOVE.b	D1, $27(A1,D2.w)
	SUBQ.w	#2, D2
	BCC.b	loc_00006E58
	RTS
loc_00006E6A:
	MOVEM.l	D2/D1/D0, -(A7)
	MOVE.w	#$000B, D0
	CLR.w	D1
	CLR.b	D2
loc_00006E76:
	MOVE.b	(A2,D1.w), D2
	BEQ.w	loc_00006E8A
	ANDI.b	#$70, D2
	CMPI.b	#$60, D2
	BNE.w	loc_00006EA0
loc_00006E8A:
	ADDI.w	#$000C, D1
	DBF	D0, loc_00006E76
	MOVE.w	#5, D0
	JSR	loc_00001202
	MOVE.b	loc_00006EAC(PC,D0.w), D2
loc_00006EA0:
	LSR.b	#4, D2
	MOVE.b	D2, $8(A1)
	MOVEM.l	(A7)+, D0/D1/D2
	RTS
loc_00006EAC:
	dc.b	$00
	dc.b	$10, $30 
	dc.b	$40
	dc.b	$50, $20 
loc_00006EB2:
	LEA	loc_00006EFA, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCS.w	loc_00006EF8
	MOVE.l	A0, $2E(A1)
	MOVE.b	$2A(A0), $2A(A1)
	MOVE.b	#$80, $6(A1)
	MOVE.b	#SprMapID_GameOverTxt, Obj_SprMap(A1)
	BSR.w	loc_00005064
	ADDI.w	#$0030, D0
	MOVE.w	D0, Obj_XPos(A1)
	ADDI.w	#$0040, D1
	MOVE.w	D1, $20(A1)
	MOVE.w	#$0168, Obj_YPos(A1)
	MOVE.l	#loc_00006F22, Obj_Anim(A1)
loc_00006EF8:
	RTS
loc_00006EFA:
	MOVEM.l	$2E(A0), A1
	BTST.b	#0, $7(A1)
	BEQ.w	ObjSys_DeleteObjectA0
	BSR.w	ObjSys_UpdateObjAnim
	MOVE.w	$20(A0), D0
	CMP.w	$E(A0), D0
	BCS.w	loc_00006F1C
	RTS
loc_00006F1C:
	SUBQ.w	#1, $E(A0)
	RTS
loc_00006F22:
	dc.b	$40
	dc.b	$00 
	dc.b	$01
	dc.b	$01 
	dc.b	$02
	dc.b	$02 
	dc.b	$01
	dc.b	$01 
	dc.b	$20
	dc.b	$00 
	dc.b	$01
	dc.b	$01 
	dc.b	$02
	dc.b	$02 
	dc.b	$01
	dc.b	$01 
	dc.b	$00
	dc.b	$00 
	dc.b	$01
	dc.b	$01 
	dc.b	$02
	dc.b	$02 
	dc.b	$01
	dc.b	$01 
	dc.b	$10
	dc.b	$00 
	dc.b	$01
	dc.b	$01 
	dc.b	$02
	dc.b	$02 
	dc.b	$01
	dc.b	$01 
	dc.b	$60
	dc.b	$00 
	dc.b	$01
	dc.b	$01 
	dc.b	$02
	dc.b	$02 
	dc.b	$01
	dc.b	$01, $00, $00, $01, $01, $02, $02, $01, $01, $FF, $00
	dc.l    loc_00006F22
loc_00006F58:
	BSR.w	ObjSys_UpdateObjAnim
	BCS.w	loc_00006F88
	MOVE.b	$9(A0), D0
	CMP.b	$8(A0), D0
	BNE.w	loc_00006F6E
	RTS
loc_00006F6E:
	MOVE.b	D0, $8(A0)
	MOVEA.l	$2E(A0), A1
	SWAP	D0
	MOVE.w	#$8400, D0
	MOVE.b	$2A(A1), D0
	SWAP	D0
	JMP	Video_QueueBgMapSpecial
loc_00006F88:
	MOVEA.l	$2E(A0), A1
	SUBQ.w	#1, $26(A1)
	BRA.w	ObjSys_DeleteObjectA0
loc_00006F94:
	dc.b	$06
	dc.b	$00 
	dc.b	$05
	dc.b	$01 
	dc.b	$04
	dc.b	$02 
	dc.b	$03
	dc.b	$03 
	dc.b	$02
	dc.b	$04 
	dc.b	$FE
	dc.b	$00 
loc_00006FA0:
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVE.l	$E(A0), D0
	ADD.l	$16(A0), D0
	MOVE.l	D0, $E(A0)
	SWAP	D0
	CMPI.w	#$00D0, D0
	BCC.w	loc_00006FD4
	BSR.w	ObjSys_UpdatePosInterpMove
	MOVE.w	$E(A0), D0
	LEA	rScrollYScanFront, A2
	MOVE.w	$32(A0), D1
	NEG.w	D0
	MOVE.w	D0, (A2,D1.w)
	RTS
loc_00006FD4:
	BSR.w	loc_00006FEC
	BCC.w	loc_00006FE0
	BSR.w	loc_00007010
loc_00006FE0:
	MOVEA.l	$2E(A0), A1
	SUBQ.w	#1, $26(A1)
	BRA.w	ObjSys_DeleteObjectA0
loc_00006FEC:
	MOVEA.l	$2E(A0), A1
	CLR.w	D0
	MOVE.b	rCurGameMode, D0
	LSL.b	#1, D0
	OR.b	$2A(A1), D0
	MOVE.b	loc_00007006(PC,D0.w), D1
	SUBQ.b	#1, D1
	RTS
loc_00007006:
	dc.b 	$00, $FF, $FF, $FF, $00
	dc.b 	$00, $00, $00, $00, $00
loc_00007010:
	BTST.b	#1, rCurGameMode
	BEQ.w	loc_0000701C
loc_0000701C:
	MOVE.w	#3, D0
loc_00007020:
	LEA	loc_000070AA, A1
	BSR.w	loc_00002AB0
	BCC.w	loc_00007030
	RTS
loc_00007030:
	MOVE.w	#$FFFF, $20(A1)
	MOVE.w	$1A(A0), $1C(A1)
	MOVE.w	#$FFFD, $16(A1)
	MOVE.b	$8(A0), $8(A1)
	MOVE.w	#$015F, $E(A1)
	MOVE.b	loc_000070A6(PC,D0.w), $9(A1)
	MOVE.w	$A(A0), $1E(A1)
	MOVE.b	$B(A0), $36(A1)
	MOVE.w	D0, D1
	LSL.w	#2, D1
	ADDQ.w	#1, D1
	MOVE.w	D1, $26(A1)
	DBF	D0, loc_00007020
	MOVEA.l	A1, A2
	LEA	loc_000070F0, A1
	BSR.w	loc_00002AB0
	BCC.w	loc_00007080
	RTS
loc_00007080:
	MOVE.b	#$FF, $7(A2)
	MOVE.l	A2, $2E(A1)
	MOVE.b	#$80, $6(A1)
	MOVE.b	#6, $8(A1)
	MOVE.b	#$11, $9(A1)
	MOVE.l	#loc_0000710E, $32(A1)
	RTS
loc_000070A6:
	dc.b	$08, $04, $05, $06 
loc_000070AA:
	SUBQ.w	#1, $26(A0)
	BEQ.w	loc_000070B4
	RTS
loc_000070B4:
	MOVE.b	#$85, $6(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BSR.w	ObjSys_UpdatePosInterpMove
	BCS.w	loc_000070E4
	MOVE.b	$36(A0), D0
	MOVE.w	#$1000, D1
	JSR	SignedSinWithMul
	SWAP	D2
	ADD.w	$1E(A0), D2
	MOVE.w	D2, $A(A0)
	ADDQ.b	#5, $36(A0)
	RTS
loc_000070E4:
	CLR.b	$7(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BRA.w	ObjSys_DeleteObjectA0
loc_000070F0:
	MOVEA.l	$2E(A0), A1
	TST.b	$7(A1)
	BEQ.w	ObjSys_DeleteObjectA0
	BSR.w	ObjSys_UpdateObjAnim
	MOVE.w	$A(A1), $A(A0)
	MOVE.w	$E(A1), $E(A0)
	RTS
loc_0000710E:
	dc.b	$03
	dc.b	$11 
	dc.b	$01
	dc.b	$12 
	dc.b	$02
	dc.b	$13 
	dc.b	$01
	dc.b	$12 
	dc.b	$FF
	dc.b	$00 
	dc.l	loc_0000710E
	dc.l    loc_00007138
    dc.l    loc_00007146
    dc.l    loc_00007154
    dc.l    loc_00007162
    dc.l    loc_00007170
    dc.l    loc_0000717E
    dc.l    loc_0000718C
loc_00007138:
    dc.b    $F1
    dc.b    $16
    dc.b    $2C
    dc.b    $2C
    dc.b    $00
    dc.b    $1A
    dc.b    $2C
    dc.b    $1E
    dc.b    $16
    dc.b    $38
    dc.b    $00
    dc.b    $00
    dc.b    $00
    dc.b    $00
loc_00007146:
    dc.b    $F2
    dc.b    $1A
    dc.b    $2C
    dc.b    $1E
    dc.b    $16
    dc.b    $38
    dc.b    $00
    dc.b    $00
    dc.b    $00
    dc.b    $00
    dc.b    $00
    dc.b    $00
    dc.b    $00
    dc.b    $00
loc_00007154:
    dc.b    $F3
    dc.b    $20
    dc.b    $16
    dc.b    $1C
    dc.b    $1E
    dc.b    $00
    dc.b    $32
    dc.b    $3E
    dc.b    $3C
    dc.b    $00
    dc.b    $00
    dc.b    $00
    dc.b    $00
    dc.b    $00
loc_00007162:
    dc.b    $F4
    dc.b    $20
    dc.b    $16
    dc.b    $1C
    dc.b    $1E
    dc.b    $00
    dc.b    $26
    dc.b    $30
    dc.b    $00
    dc.b    $00
    dc.b    $00
    dc.b    $00
    dc.b    $00
    dc.b    $00
loc_00007170:
    dc.b    $F5
    dc.b    $38
    dc.b    $1E
    dc.b    $18
    dc.b    $26
    dc.b    $38
    dc.b    $3C
    dc.b    $24
    dc.b    $00
    dc.b    $00
    dc.b    $00
    dc.b    $00
    dc.b    $00
    dc.b    $00
loc_0000717E:
    dc.b    $F6
    dc.b    $34
    dc.b    $16
    dc.b    $3E
    dc.b    $3A
    dc.b    $1E
    dc.b    $00
    dc.b    $32
    dc.b    $30
    dc.b    $00
    dc.b    $00
    dc.b    $00
    dc.b    $00
    dc.b    $00
loc_0000718C:
    dc.b    $F7
    dc.b    $34
    dc.b    $16
    dc.b    $3E
    dc.b    $3A
    dc.b    $1E
    dc.b    $00
    dc.b    $32
    dc.b    $20
    dc.b    $20
    dc.b    $00
    dc.b    $00
    dc.b    $00
    dc.b    $00

; ---------- File Start: game/z80.asm ----------
; This file contains all code related to controlling the Z80 sound driver
SndDrv_LoadDriver:
	MOVE.w	#$0100, Z80BusReq
	BSR.w	SndDrv_ResetZ80
@WaitForZ80:
	BTST.b	#0, Z80BusReq
	BNE.b	@WaitForZ80
	LEA	sound_driver, A0
	LEA	Z80Ram, A1
	MOVE.w	#$13FF, D0
@LoadData: ; 000071C0
	MOVE.b	(A0)+, (A1)+
	DBF	D0, @LoadData
	
	; The sound data must be 8KB aligned in the rom
	MOVE.b	#((sound_bank1>>8)&$80), $00A01F00
	MOVE.b	#((sound_bank1>>16)&$FF), $00A01F01
	MOVE.b	#((sound_bank2>>8)&$80), $00A01F02
	MOVE.b	#((sound_bank2>>16)&$FF), $00A01F03
	
	BSR.w	SndDrv_ResetZ80
	MOVE.w	#0, Z80BusReq
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
SndDrv_Z80DeadCmp:
	CMPI.b	#8, Z80Ram+zrIDQueueCnt
	BCS.w	@deadbranch
	RTS
@deadbranch:
	RTS

SndDrv_ResetZ80:
	MOVE.w	#0, Z80Reset
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	MOVE.w	#$0100, Z80Reset
	RTS

dead_SndDrv_LoadDummyDriver:
	move.w #$100, (Z80BusReq).l
	bsr.b    SndDrv_ResetZ80
@dead_WaitForZ80:
	btst.b #0, (Z80BusReq).l
	bne.b @dead_WaitForZ80
	lea (endOfRom-$2000).l, a0 ; Load the """sound driver"""
	lea (Z80Ram).l, A1
	move.w #$1FFF, d0
@dead_LoadData:
	move.b (a0)+, (a1)+
	dbf d0, @dead_LoadData
	
	MOVE.b	#((sound_bank1>>8)&$80), $00A01F00
	MOVE.b	#((sound_bank1>>16)&$FF), $00A01F01
	MOVE.b	#((sound_bank2>>8)&$80), $00A01F02
	MOVE.b	#((sound_bank2>>16)&$FF), $00A01F03
    
    ; Dummy sound driver, probably used for some form of testing?
	move.b #$C3, (Z80Ram+0).l
	move.b #$0, (Z80Ram+1).l
	move.b #$0, (Z80Ram+2).l
	bsr.w SndDrv_ResetZ80
	move.w #0, (Z80BusReq).l
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	bra.w SndDrv_Z80DeadCmp

SndDrv_QueueSoundEffect:
	MOVEM.l	A2/D1, -(A7)
	LEA	rZ80CurSFXQueue, A2
	MOVE.w	#3, D1
@NextQueueEntry:
	TST.b	(A2,D1.w)
	BEQ.w	@WriteToQueue
	DBF	D1, @NextQueueEntry
	BRA.w	@QueueFull
@WriteToQueue:
	MOVE.b	D0, (A2,D1.w)
@QueueFull:
	MOVEM.l	(A7)+, D1/A2
	RTS
	
SndDrv_PlayMusicId:
	MOVE.b	D0, rZ80CurSong
	RTS
	
SndDrv_PlayFadeOut:
	MOVE.b	#$F3, rZ80CurCmdMain
	MOVE.b	#$20, rZ80CurCmdP1
	MOVE.b	#0, rZ80CurCmdP2
	RTS
SndDrv_PlayClearEffect:
	MOVE.b	#$F2, rZ80CurCmdMain
	MOVE.b	#0, rZ80CurCmdP1
	MOVE.b	#0, rZ80CurCmdP2
	RTS
SndDrv_PlayPauseOn:
	MOVE.b	#$F6, rZ80CurCmdMain
	MOVE.b	#0, rZ80CurCmdP1
	MOVE.b	#0, rZ80CurCmdP2
	RTS
SndDrv_PlayPauseOff:
	MOVE.b	#$F7, rZ80CurCmdMain
	MOVE.b	#0, rZ80CurCmdP1
	MOVE.b	#0, rZ80CurCmdP2
	RTS
	
SndDrv_PlayVoice:
	TST.b	rOption_VoicesEnabled
	BNE.w	SndDrv_PVRet
SndDrv_PlayVoiceAlways:
	MOVE.b	#$FA, rZ80CurCmdMain
	MOVE.b	D0, rZ80CurCmdP1
	MOVE.b	#$FF, rZ80CurCmdP2
SndDrv_PVRet:
	RTS
	
SndDrv_Update:
	MOVE.w	#$0100, Z80BusReq
@WaitZ80Stop:
	BTST.b	#0, Z80BusReq
	BNE.b	@WaitZ80Stop
	CLR.w	rZ80IsBeingUpdated
	MOVE.b	$00A00024, D0
	OR.b	$00A00026, D0
	BNE.w	@SkipUpdate
	BSR.w	SndDrv_UpdateCmdAndPCM
	BSR.w	SndDrv_UpdateMusic
	BSR.w	SndDrv_UpdateSFX
	MOVE.b	$00A00027, D0
	BEQ.w	@SkipUpdate
	TST.b	$00FF013A
	BNE.w	@SkipUpdate
	MOVE.w	#$FFFF, rZ80IsBeingUpdated
@SkipUpdate:
	MOVE.w	#0, Z80BusReq
	RTS

SndDrv_UpdateCmdAndPCM:
	CMPI.b	#8, Z80Ram+zrIDQueueCnt
	BCS.w	@QueueNotFull
	RTS
@QueueNotFull:
	TST.b	rZ80CurCmdMain
	BNE.w	@CmdNonZero
	RTS
@CmdNonZero:
	CLR.w	D0
	MOVE.b	Z80Ram+zrIDQueueCnt, D0
	ADDQ.b	#1, Z80Ram+zrIDQueueCnt
	LEA	Z80Ram, A2
	MOVE.b	rZ80CurCmdMain, (A2,D0.w)
	MOVE.b	rZ80CurCmdP1, $8(A2,D0.w)
	MOVE.b	rZ80CurCmdP2, $10(A2,D0.w)
	CLR.b	rZ80CurCmdMain
	RTS

SndDrv_UpdateMusic:
	CMPI.b	#8, Z80Ram+zrIDQueueCnt
	BCS.w	@QueueNotFull
	RTS
@QueueNotFull:
	TST.b	rZ80CurSong
	BNE.w	@SongIDNotZero
	RTS
@SongIDNotZero:
	CLR.w	D0
	MOVE.b	Z80Ram+zrIDQueueCnt, D0
	ADDQ.b	#1, Z80Ram+zrIDQueueCnt
	LEA	Z80Ram, A2
	MOVE.b	rZ80CurSong, (A2,D0.w)
	CLR.b	rZ80CurSong
	RTS

SndDrv_UpdateSFX:
	LEA	rZ80CurSFXQueue, A2
	LEA	Z80Ram, A3
	MOVE.w	#3, D0
@NextQueueEntry:
	TST.b	(A2,D0.w)
	BEQ.w	@SkipQueueEntry
	CMPI.b	#8, Z80Ram+zrIDQueueCnt
	BCC.w	@SkipQueueEntry
	CLR.w	D1
	MOVE.b	Z80Ram+zrIDQueueCnt, D1
	ADDQ.b	#1, Z80Ram+zrIDQueueCnt
	MOVE.b	(A2,D0.w), (A3,D1.w)
	CLR.b	(A2,D0.w)
@SkipQueueEntry:
	DBF	D0, @NextQueueEntry
	RTS

; ---------- File End: game/z80.asm ----------

loc_000074A0:
	MOVE.b	rCurGameMode, D0
	EORI.b	#2, D0
	OR.b	$2B(A0), D0
	BNE.w	loc_00007504
	MOVEA.l	$32(A0), A1
	TST.b	$7(A1)
	BMI.w	loc_00007504
	CMPI.w	#2, $1E(A1)
	BCS.w	loc_00007504
	JSR	loc_00005022
	MOVEA.l	A2, A3
	ADDA.l	#$00000294, A2
	ADDA.l	#$0000029E, A3
	CMPI.w	#$0036, $8(A2)
	BCC.w	loc_00007506
	MOVE.w	#$000A, D0
	CLR.b	D1
loc_000074EC:
	CMPI.b	#3, (A3,D0.w)
	BCC.w	loc_000074F8
	ADDQ.b	#1, D1
loc_000074F8:
	SUBQ.w	#2, D0
	BCC.b	loc_000074EC
	CMPI.b	#2, D1
	BCC.w	loc_00007506
loc_00007504:
	RTS
	
loc_00007506:
	TST.b	$7(A1)
	BNE.w	loc_0000751C
	JSR	UpdateRNG
	ANDI.b	#1, D0
	MOVE.b	D0, $7(A1)
loc_0000751C:
	MOVE.b	#$19, D0
	ADDI.b	#$41, $7(A1)
	BTST.b	#0, $7(A1)
	BEQ.w	loc_00007534
	MOVE.b	#$1A, D0
loc_00007534:
	MOVE.b	D0, $28(A1)
	MOVE.b	D0, $29(A1)
	CLR.w	$1E(A1)
	RTS
loc_00007542:
	movea.l $2E(a0), a1
	movem.l a0, -(SP)
	movea.l a1, a0
	jsr loc_00008832
	movem.l (SP)+, a0
	rts
loc_00007558:
	LEA	loc_000075D0, A1
	BSR.w	ObjSys_InitObjWithFunc
	; This does not check if the object was successfully created!!!
	MOVE.b	$0(A0), $0(A1)
	MOVE.l	A0, $2E(A1)
	MOVE.b	$2A(A0), $2A(A1)
	MOVE.b	#SprMapID_Carbuncle, Obj_SprMap(A1)
	MOVE.b	#$45, Obj_AnmFrm(A1)
	MOVE.w	#2, $1A(A1)
	MOVE.w	#1, $1C(A1)
	MOVE.w	#0, $1E(A1)
	MOVE.w	#0, $20(A1)
	MOVE.l	#loc_000075A6, Obj_Anim(A1)
	ORI.b	#1, $7(A0)
	RTS
loc_000075A6:
	dc.b	$04, $00, $05, $01, $04, $00
	dc.b	$05, $02, $FF, $00
	dc.l    loc_000075A6
loc_000075B4:
	dc.b    $04, $03, $05, $04, $04, $03, $05, $05, $FF, $00
	dc.l    loc_000075B4
loc_000075C2:
	dc.b    $04, $06, $05, $07
	dc.b	$04, $06, $05, $08, $FF, $00
	dc.l    loc_000075C2
loc_000075D0:
	BSR.w	loc_00004986
	MOVE.b	#$80, $6(A0)
	TST.b	$00FF18C6
	BNE.w	loc_00007616
	MOVE.b	$2A(A0), D0
	ORI.b	#$80, D0
	MOVE.b	D0, $00FF18C6
	MOVE.b	#$FF, $00FF18C7
	BSR.w	ObjSys_UpdateObjNextOpTimer
	TST.b	$00FF18C7	
	BEQ.w	loc_0000760A	
	RTS	
loc_0000760A:
	MOVE.w	#$0010, D0	
	BSR.w	ObjSys_SetObjNextOpTimer	
	BSR.w	ObjSys_UpdateObjNextOpTimer	
loc_00007616:
	BSR.w	ObjSys_UpdateObjNextOpTimer	
	MOVEA.l	$2E(A0), A1	
	BTST.b	#0, $7(A1)	
	BEQ.w	loc_00004484	
	BSR.w	ObjSys_UpdateObjAnim	
	CMPI.w	#3, $1C(A0)	
	BCC.w	loc_0000763C	
	MOVE.b	#$45, $9(A0)	
loc_0000763C:
	BSR.w	loc_000045AA	
	BSR.w	loc_00004624	
	BCS.w	loc_0000764C	
	BRA.w	loc_00004986	
loc_0000764C:
	MOVE.b	#sfxID_PlacePuyo, D0	
	BSR.w	SndDrv_QueueSoundEffect	
	BSR.w	loc_00005022	
	MOVE.w	$1A(A0), D0	
	ADDQ.w	#1, $1C(A0)	
	MOVE.w	$1C(A0), D1	
	CMPI.w	#$000E, D1	
	BCC.w	loc_0000775C	
	MULU.w	#6, D1	
	ADD.w	D1, D0	
	LSL.w	#1, D0	
	MOVE.w	D0, $26(A0)	
	MOVE.b	(A2,D0.w), D1	
	ANDI.b	#$F0, D1	
	CMPI.b	#$E0, D1	
	BCS.w	loc_0000768C	
	MOVE.b	#$80, D1	
loc_0000768C:
	MOVE.b	D1, $36(A0)	
	MOVE.w	#1, $16(A0)	
loc_00007696:
	MOVE.w	#$0010, $28(A0)	
	BSR.w	ObjSys_UpdateObjNextOpTimer	
	MOVE.b	$29(A0), D0	
	ANDI.b	#3, D0	
	BNE.w	loc_000076B4	
	MOVE.b	#sfxID_5E, D0	
	BSR.w	SndDrv_QueueSoundEffect	
loc_000076B4:
	BSR.w	ObjSys_UpdateObjAnim	
	MOVE.w	$12(A0), D0	
	ADD.w	D0, $A(A0)	
	MOVE.w	$16(A0), D0	
	ADD.w	D0, $E(A0)	
	SUBQ.w	#1, $28(A0)	
	BEQ.w	loc_000076D2	
	RTS	
loc_000076D2:
	BSR.w	loc_00005022	
	MOVE.w	$26(A0), D0	
	MOVE.b	$36(A0), (A2,D0.w)	
	ORI	#$0700, SR	
	BSR.w	loc_00004CCC	
	ANDI	#$F8FF, SR	
	BSR.w	loc_000077FE	
	BCC.b	loc_00007696	
	MOVEA.l	$2E(A0), A1	
	BCLR.b	#0, $7(A1)	
	MOVE.b	#$AF, $6(A0)	
	MOVE.l	#$0000774E, $32(A0)	
	MOVE.w	#3, $12(A0)	
	MOVE.w	#0, $16(A0)	
	MOVE.w	#$1A00, $1A(A0)	
	MOVE.w	#$0800, $1C(A0)	
	MOVE.w	$A(A0), $1E(A0)	
	MOVE.w	#0, $20(A0)	
	TST.b	$2A(A0)	
	BEQ.w	loc_0000773C	
	MOVE.w	#$FFFE, $12(A0)	
loc_0000773C:
	BSR.w	ObjSys_UpdateObjNextOpTimer	
	BSR.w	ObjSys_UpdateObjAnim	
	BSR.w	ObjSys_UpdatePosInterpMove	
	BCS.w	loc_000077E0	
	RTS	
loc_0000774E:
	dc.b	$01, $0D, $01, $24, $01, $26, $01, $25, $FF, $00
	dc.l    loc_0000774E
loc_0000775C:
	MOVE.b	#$82, $6(A0)	
	MOVE.w	#$FFFF, $12(A0)	
	MOVE.l	#$000077D4, $32(A0)	
	TST.b	$2A(A0)	
	BEQ.w	loc_00007786	
	MOVE.w	#1, $12(A0)	
	MOVE.l	#$000077C8, $32(A0)	
loc_00007786:
	MOVEA.l	$2E(A0), A1	
	BCLR.b	#0, $7(A1)	
	MOVE.l	#$00002710, D0	
	BSR.w	loc_00007542	
	BSR.w	ObjSys_UpdateObjNextOpTimer	
	BSR.w	ObjSys_UpdateObjAnim	
	CMPI.b	#$43, $9(A0)	
	BCC.w	loc_000077AE	
	RTS	
loc_000077AE:
	MOVE.w	$12(A0), D0	
	ADD.w	D0, $A(A0)	
	MOVE.w	$A(A0), D0	
	SUBI.w	#$0078, D0	
	CMPI.w	#$0150, D0	
	BCC.w	loc_000077E0	
	RTS	
loc_000077C8:
	dc.b	$08, $37, $08, $38, $06, $44, $FF, $00
	dc.l    loc_000077C8
loc_000077D4:
	dc.b    $08, $3B, $08, $3C, $08, $43, $FF, $00
	dc.l    loc_000077D4
loc_000077E0:
	MOVE.b	$2A(A0), D0	
	ORI.b	#$80, D0	
	CMP.b	$00FF18C6, D0	
	BNE.w	ObjSys_DeleteObjectA0	
	MOVE.b	#$FF, $00FF18C7	
	BRA.w	ObjSys_DeleteObjectA0	
loc_000077FE:
	BSR.w	loc_00005022	
	LEA	loc_000078A6, A1	
	EORI.b	#$80, $7(A0)	
	BSR.w	UpdateRNG	
	ANDI.w	#1, D0	
	BSR.w	loc_00007854	
	BCS.w	loc_00007820	
	RTS	
loc_00007820:
	CMPI.w	#$000D, $1C(A0)	
	BCC.w	loc_0000784E	
	ADDQ.w	#1, $1C(A0)	
	ADDI.w	#$000C, $26(A0)	
	MOVE.w	#0, $12(A0)	
	MOVE.w	#1, $16(A0)	
	MOVE.l	#$000075A6, $32(A0)	
	ANDI	#$FFFE, SR	
	RTS	
loc_0000784E:
	ORI	#1, SR	
	RTS	
loc_00007854:
	MOVE.w	D0, D1	
	MULU.w	#$000A, D1	
	MOVE.w	$1A(A0), D2	
	ADD.w	(A1,D1.w), D2	
	CMPI.w	#6, D2	
	BCC.b	loc_0000784E	
	MOVE.w	$26(A0), D3	
	ADD.w	$4(A1,D1.w), D3	
	MOVE.b	(A2,D3.w), D4	
	BPL.b	loc_0000784E	
	ANDI.b	#$F0, D4	
	CMP.b	$36(A0), D4	
	BEQ.b	loc_0000784E	
	MOVE.w	D2, $1A(A0)	
	MOVE.w	D3, $26(A0)	
	MOVE.w	(A1,D1.w), $12(A0)	
	MOVE.w	$2(A1,D1.w), $16(A0)	
	MOVE.l	$6(A1,D1.w), $32(A0)	
	ANDI	#$FFFE, SR	
	RTS
	; Dead Code
	ori     #1, SR
	rts
loc_000078A6:
	dc.b	$FF, $FF, $00, $00, $FF, $FE
	dc.l    loc_000075B4
	dc.b    $00, $01, $00, $00, $00, $02
	dc.l    loc_000075C2
loc_000078BA:
	LEA	loc_00007910, A1
	BSR.w	ObjSys_InitObjWithFunc
	MOVE.b	$0(A0), $0(A1)
	MOVE.l	A0, $2E(A1)
	MOVE.b	$2A(A0), $2A(A1)
	MOVE.b	#SprMapID_BigPuyo, Obj_SprMap(A1)
	MOVE.b	#3, Obj_AnmFrm(A1)
	MOVE.w	#2, $1A(A1)
	MOVE.w	#1, $1C(A1)
	MOVE.w	#0, $1E(A1)
	MOVE.w	#0, $20(A1)
	MOVE.b	#1, $2B(A1)
	MOVE.l	#loc_0000790E, Obj_Anim(A1)
	ORI.b	#1, $7(A0)
	RTS
loc_0000790E:
	dc.b	$FE, $00 
loc_00007910:
	BSR.w	loc_00004986
	ADDQ.w	#8, $A(A0)
	MOVE.b	#$80, $6(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVEA.l	$2E(A0), A1
	BTST.b	#0, $7(A1)
	BEQ.w	loc_00004484
	BSR.w	ObjSys_UpdateObjAnim
	CMPI.w	#3, $1C(A0)
	BCC.w	loc_0000794C
	CMPI.b	#3, $9(A0)
	BCC.w	loc_0000794C
	ADDQ.b	#3, $9(A0)
loc_0000794C:
	BSR.w	loc_000045AA
	BSR.w	loc_00004624
	BCS.w	loc_00007962
	BSR.w	loc_00004986
	ADDQ.w	#8, $A(A0)
	RTS
loc_00007962:
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BSR.w	ObjSys_UpdateObjAnim
	BCS.w	loc_00007988
	CMPI.w	#3, $1C(A0)
	BCC.w	loc_00007986
	CMPI.b	#3, $9(A0)
	BCC.w	loc_00007986
	ADDQ.b	#3, $9(A0)
loc_00007986:
	RTS
loc_00007988:
	BSR.w	loc_00005022
	MOVE.w	$1A(A0), D0
	LSL.w	#1, D0
	CLR.w	(A2,D0.w)
	CLR.w	$2(A2,D0.w)
	CLR.w	$C(A2,D0.w)
	CLR.w	$E(A2,D0.w)
	MOVE.b	#0, $9(A0)
	CMPI.w	#$000D, $1C(A0)
	BCS.w	loc_000079C0
	MOVE.l	#$00002EE0, D0
	BSR.w	loc_00007542
	BRA.w	loc_00007A38
loc_000079C0:
	MOVE.w	$1A(A0), D0
	MOVE.w	$1C(A0), D1
	ADDQ.w	#1, D1
	MULU.w	#6, D1
	ADD.w	D1, D0
	LSL.w	#1, D0
	MOVE.w	D0, $26(A0)
	MOVE.w	$E(A0), $36(A0)
	CLR.w	$1E(A0)
	MOVE.b	#$85, $6(A0)
	MOVE.w	#$1A00, $1C(A0)
	MOVE.w	#$FFFF, $20(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BSR.w	ObjSys_UpdatePosInterpMove
	CMPI.w	#6, $16(A0)
	BCS.w	loc_00007A0C
	MOVE.l	#$00060000, $16(A0)
loc_00007A0C:
	BSR.w	loc_00007A9C
	CMPI.w	#$0148, $E(A0)
	BCC.w	loc_00007A1C
	RTS
loc_00007A1C:
	MOVE.w	#$0148, $E(A0)
	MOVE.l	#loc_00007A8A, $32(A0)
	MOVE.w	#$0080, $26(A0)
	MOVE.b	#sfxID_5F, D0
	BSR.w	SndDrv_QueueSoundEffect
loc_00007A38:
	BSR.w	loc_00007BD2
	MOVE.b	#$B7, $6(A0)
	NEG.l	$16(A0)
	MOVE.w	#$3400, $1C(A0)
	MOVE.w	#$FFFF, $20(A0)
	MOVE.w	#$8000, $14(A0)
	TST.b	$2A(A0)
	BNE.w	loc_00007A64
	NEG.l	$12(A0)
loc_00007A64:
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BSR.w	ObjSys_UpdateObjAnim
	BSR.w	ObjSys_UpdatePosInterpMove
	CMPI.w	#$0170, $E(A0)
	BCC.w	loc_00007A7C
	RTS
loc_00007A7C:
	MOVEA.l	$2E(A0), A1
	BCLR.b	#0, $7(A1)
	BRA.w	ObjSys_DeleteObjectA0
loc_00007A8A:
	dc.b	$02, $01, $01, $00, $03, $02, $01, $00, $03, $01, $01, $00, $02, $02, $01, $00, $FE, $00 
loc_00007A9C:
	MOVE.w	$E(A0), D0
	SUB.w	$36(A0), D0
	LSR.w	#4, D0
	CMP.w	$1E(A0), D0
	BNE.w	loc_00007AB0
	RTS
loc_00007AB0:
	MOVE.w	D0, $1E(A0)
	BSR.w	loc_00005022
	MOVE.w	$26(A0), D0
	MOVEM.l	D0, -(A7)
	BSR.w	loc_00007AEE
	MOVEM.l	(A7)+, D0
	MOVE.w	#$00FF, (A2,D0.w)
	MOVE.w	#$00FF, $2(A2,D0.w)
	ADDI.w	#$000C, $26(A0)
	ORI	#$0700, SR
	BSR.w	loc_00004CCC
	ANDI	#$F8FF, SR
	MOVE.b	#sfxID_62, D0
	BRA.w	SndDrv_QueueSoundEffect
loc_00007AEE:
	MOVE.w	#1, D1
	CLR.l	D5
	CLR.w	D6
	MOVEA.l	$2E(A0), A1
	MOVE.b	$2B(A1), D6
	ADDQ.b	#1, D6
	MULU.w	#$000A, D6
loc_00007B04:
	MOVE.b	(A2,D0.w), D2
	BPL.w	loc_00007B6E
	LSR.b	#4, D2
	ANDI.b	#7, D2
	CMPI.b	#6, D2
	BEQ.w	loc_00007B6E
	MOVE.w	#1, D4
loc_00007B1E:
	LEA	loc_00007B8A, A1
	BSR.w	loc_00002AB0
	BCS.w	loc_00007B68
	MOVE.b	$0(A0), $0(A1)
	MOVE.b	#$83, $6(A1)
	MOVE.b	D2, $8(A1)
	MOVE.b	#4, $9(A1)
	MOVE.w	$A(A0), $A(A1)
	MOVE.w	$E(A0), $E(A1)
	MOVE.w	D1, D3
	EORI.b	#1, D3
	LSL.w	#4, D3
	ADD.w	D3, $A(A1)
	MOVE.w	#8, $28(A1)
	MOVE.l	#loc_00007B7C, $32(A1)
loc_00007B68:
	DBF	D4, loc_00007B1E
	ADD.l	D6, D5
loc_00007B6E:
	ADDQ.w	#2, D0
	DBF	D1, loc_00007B04
	MOVE.l	D5, D0
	BSR.w	loc_00007542
	RTS
loc_00007B7C:
	dc.b	$03, $04, $01, $05, $02, $06, $01, $05, $FF, $00
	dc.l    loc_00007B7C
loc_00007B8A:
	tst.w $26(a0)
	bne.w loc_00007BC2
	tst.w $28(a0)
	beq.w ObjSys_DeleteObjectA0
	subq.w #1, $28(a0)
	move.w $28(a0), d1
	addq.w #1, d1
	lsl.w #1, d1
	move.w d1, $26(a0)
	bsr.w UpdateRNG
	move.w #$0200, d1
	bsr.w SignedSinWithMul
	move.l d2, $12(a0)
	bsr.w SignedCosWithMul
	move.l d2, $16(a0)
loc_00007BC2:
	subq.w #1, $26(a0)
	bsr.w ObjSys_UpdatePosInterpMove
	bcs.w ObjSys_DeleteObjectA0
	bra.w ObjSys_UpdateObjAnim
loc_00007BD2:
	BSR.w	loc_00005022
	MOVE.w	D0, D1
	ANDI.w	#$007F, D1
	MOVE.w	$1A(A0), D2
	MULU.w	#$000C, D2
	MOVE.w	#5, D0
loc_00007BE8:
	LEA	loc_00007C5E, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCS.w	loc_00007C18
	MOVE.b	$0(A0), $0(A1)
	MOVE.b	#$80, $36(A1)
	MOVE.w	D1, $26(A1)
	MOVE.w	loc_00007C22(PC,D2.w), D3
	MOVE.w	$16(A0), D4
	LSL.w	#1, D4
	ADDQ.w	#4, D4
	MULU.w	D4, D3
	MOVE.w	D3, $38(A1)
loc_00007C18:
	ADDQ.w	#4, D1
	ADDQ.w	#2, D2
	DBF	D0, loc_00007BE8
	RTS
loc_00007C22:
	dc.w 	$0100, $0100, $0080, $0040, $0000, $0000
	dc.w 	$0080, $0100, $0100, $0080, $0040, $0000
	dc.w 	$0040, $0080, $0100, $0100, $0080, $0040
	dc.w 	$0000, $0040, $0080, $0100, $0100, $0080
	dc.w 	$0000, $0000, $0040, $0080, $0100, $0100
loc_00007C5E:
	move.b $36(a0), d0
	ori.b #$80, d0
	move.w $38(a0), d1
	bsr.w SignedSinWithMul
	swap d2
	lea rScrollYScanFront, a1
	move.w $26(a0), d0
	move.w d2, (a1, d0.w)
	subq.b #4, $36(a0)
	bcs.w ObjSys_DeleteObjectA0
	rts
; Dead Code
	move.l #$800E0000, d0
	jsr Video_QueueBgMapSpecial
	lea loc_00007CA8, a1
	jsr ObjSys_InitObjWithFunc
	move.w #$0258, $26(a1)
	rts
loc_00007CA8:
	subq.w #1, $26(a0)
	bcs.w loc_00007CB2
	rts
loc_00007CB2:
	clr.b rBytecode_StopRun
	jmp ObjSys_DeleteObjectA0



CheckPauseGame:
	MOVEQ	#0, D2
	MOVE.b	rPad1Press, D0
	MOVE.b	rPad2Press, D1
	TST.b	rCurMainPlayer
	BEQ.w	@P1IsMain
	EXG	D0, D1
@P1IsMain:
	BTST.b	#1, rCurGameMode
	BNE.w	loc_00007D0A
	OR.b	D1, D0
	MOVE.b	D0, D1
	TST.b	$00FF0144
	BPL.w	loc_00007D0A
	MOVE.b	rPad1Press, D0
	TST.b	$00FF0143
	BEQ.w	loc_00007D08
	MOVE.b	rPad2Press, D0
loc_00007D08:
	MOVE.b	D0, D1
loc_00007D0A:
	LEA	$00FF0144, A2
	MOVE.w	#0, D2
	BSR.w	loc_00007D1E
	MOVE.b	D1, D0
	MOVE.w	#1, D2
loc_00007D1E:
	TST.b	(A2,D2.w)
	BEQ.w	loc_00007DB8
	BTST.l	#7, D0
	BEQ.w	loc_00007DB8
	EORI.b	#$80, (A2,D2.w)
	BPL.w	loc_00007D90
	MOVEM.l	D0, -(A7)
	MOVE.b	rPad1Press, D0
	ANDI.b	#$80, D0
	EORI.b	#$80, D0
	MOVE.b	D0, $00FF0143
	MOVEM.l	(A7)+, D0
	LEA	loc_00007EA0, A1
	JSR	ObjSys_InitObjWithFunc
	BCS.w	loc_00007D68
	MOVE.b	D2, $2A(A1)

loc_00007D68:
	ORI	#$0700, SR
	BSR.w	loc_00007DE2
	ANDI	#$F8FF, SR
	JSR	WaitForVint
	BTST.b	#1, rCurGameMode
	BEQ.w	loc_00007DBA
	MOVE.b	#sfxID_ComboComplete1, D0
	JMP	SndDrv_QueueSoundEffect

loc_00007D90:
	ORI	#$0700, SR
	BSR.w	loc_00007E38
	ANDI	#$F8FF, SR
	JSR	WaitForVint
	BTST.b	#1, rCurGameMode
	BEQ.w	loc_00007DCE
	MOVE.b	#sfxID_ComboComplete1, D0
	JMP	SndDrv_QueueSoundEffect
loc_00007DB8:
	RTS

loc_00007DBA:
	BTST.l	#$10, D2
	BNE.w	loc_00007DCC
	BSET.l	#$10, D2
	JSR	SndDrv_PlayPauseOn
loc_00007DCC:
	RTS
loc_00007DCE:
	BTST.l	#$11, D2
	BNE.w	loc_00007DE0
	BSET.l	#$11, D2
	JSR	SndDrv_PlayPauseOff
loc_00007DE0:
	RTS

loc_00007DE2:
	MOVEM.l	D2/D1, -(A7)
loc_00007DE6:
	BSR.w	loc_00007E68
	MOVE.w	D0, D5
	MOVE.w	#$0017, D1
loc_00007DF0:
	JSR	Video_SetVRAMAddressRead
loc_00007DF6:
	ADDI.w	#$0080, D5
	MOVE.w	#$000B, D2
loc_00007DFE:
	MOVE.w	vdpData1, D3
loc_00007E04:
	MOVE.w	D3, (A1)+
	DBF	D2, loc_00007DFE
	DBF	D1, loc_00007DF0
	MOVE.w	D0, D5
	MOVE.w	#$0017, D1
loc_00007E14:
	JSR	Video_SetVRAMAddressWrite
loc_00007E1A:
	ADDI.w	#$0080, D5
	MOVE.w	#$000B, D2
loc_00007E22:
	MOVE.w	#$8500, vdpData1
loc_00007E2A:
	DBF	D2, loc_00007E22
	DBF	D1, loc_00007E14
	MOVEM.l	(A7)+, D1/D2
	RTS
loc_00007E38:
	MOVEM.l	D2/D1, -(A7)
	BSR.w	loc_00007E68
	MOVE.w	D0, D5
	MOVE.w	#$0017, D1
loc_00007E46:
	JSR	Video_SetVRAMAddressWrite
	ADDI.w	#$0080, D5
	MOVE.w	#$000B, D2
loc_00007E54:
	MOVE.w	(A1)+, vdpData1
	DBF	D2, loc_00007E54
	DBF	D1, loc_00007E46
	MOVEM.l	(A7)+, D1/D2
	RTS
loc_00007E68:
	CLR.w	D1
loc_00007E6A:
	MOVE.b	rCurMainPlayer, D1
	LSL.b	#1, D1
	OR.b	D2, D1
	LSL.b	#3, D1
	MOVEA.l	loc_00007E80(PC,D1.w), A1
	MOVE.w	loc_00007E84(PC,D1.w), D0
	RTS
loc_00007E80:
	dc.l 	$00FF0146
loc_00007E84:
	dc.w 	$C104, $0000, $00FF, $0386, $C134, $0000, $00FF
	dc.w 	$0146, $C134, $0000, $00FF, $0386, $C104, $0000
loc_00007EA0:
	bsr.w loc_00005064
	addi.w #$30, d0
	move.w d0, $a(a0)
	addi.w #$50, d1
	move.w d1, $e(a0)
	move.b $2a(a0), d0
	addi.b #$20, d0
	move.b #6, $8(a0)
	move.b d0, $9(a0)
	bsr.w ObjSys_UpdateObjNextOpTimer
loc_00007ECA:
	clr.w d0
	move.b $2a(a0), d0
	lea ($00FF0144), a1
	tst.b (a1, d0.w)
	bpl.w ObjSys_DeleteObjectA0
	addq.b #1, $26(a0)
	andi.b #$3F, $26(a0)
	move.b #0, $6(a0)
	cmpi.b #$30, $26(a0)
	bcc.w loc_00007EFE
	move.b #$80, $6(a0)
loc_00007EFE:
	rts
loc_00007F00:
	move.b    (rOption_2PlayerMode).l, d0
	bne.w    loc_00007F0C
	addq.b #1, d0
loc_00007F0C:
	move.b d0, ($00FF012A).l
	move.b d0, ($00FF012B).l
	rts
loc_00007F1A:
	CMPI.b	#2, rCurGameMode
	BNE.w	loc_00007F5C
	TST.w	$16(A0)
	BEQ.w	loc_00007F5C
	BSR.w	loc_00005022
	ADDA.l	#$00000294, A2
	TST.w	$8(A2)
	BNE.w	loc_00007F5C
	MOVE.b	#sfxID_SatanPuyoClear, D0
	BSR.w	SndDrv_QueueSoundEffect
	CLR.l	D0
	MOVE.b	$2B(A0), D0
	ADDQ.b	#1, D0
	MULU.w	#$01F4, D0
	ADDI.w	#$1F40, D0
	BSR.w	loc_00008832
loc_00007F5C:
	RTS
loc_00007F5E:
	ORI	#$0700, SR
	MOVE.w	#$C726, D5
	JSR	Video_SetVRAMAddressWrite
	ADDI.w	#$0080, D5
	MOVE.w	#$C1FC, vdpData1
	MOVE.w	#$C1FE, vdpData1
	JSR	Video_SetVRAMAddressWrite
	MOVE.w	#$C1FD, vdpData1
	MOVE.w	#$C1FF, vdpData1
	ANDI	#$F8FF, SR
	RTS
loc_00007F9C:
	clr.l d0
	move.b ($00FF0128), d0
	divu.w #$14, d0
	move.w #$C61E, d5
	lea loc_00008064, a1
	bsr.w loc_00008026
	swap d0
	move.w #$282, d4
	move.w #$C91E, d5
	bsr.w loc_00007FEE
	clr.l d0
	move.b ($00FF0129).l, d0
	divu #$14, d0
	move.w #$C628, d5
	lea (loc_00008096).l, a1
	bsr.w loc_00008026
	swap d0
	move.w #$27e, d4
	move.w #$C930, d5
	bsr.w loc_00007FEE
	rts
loc_00007FEE:
	subq.w #1, d0
	bcs.w loc_00008024
	move.w #$80C0, d6
	clr.b d2
loc_00007FFA:
	ori #$700, SR
loc_00007FFE:
	jsr Video_SetVRAMAddressWrite
loc_00008004:
	subi.w #$80, d5
	move.w d6,(vdpData1)
	andi #$F8FF, SR
	addq.b #1, d2
	cmpi.b #5, d2
	bcs.w loc_00008020
	add.w d4, d5
	clr.b d2
loc_00008020:
	dbf d0, loc_00007FFA
loc_00008024:
	rts
loc_00008026:
	ori #$700, SR
	movem.l d0,-(SP)
	mulu.w #$a, d0
	adda.w d0, a1
	move.w #1, d0
	move.w #$8000, d6
loc_0000803C:
	jsr Video_SetVRAMAddressWrite
	addi.w #$80, d5
	move.w #4, d1
loc_0000804A:
	move.b (A1)+, d6
	move.w d6, (vdpData1)
	dbf d1, loc_0000804A
	dbf d0, loc_0000803C
	andi #$F8FF, SR
	movem.l (SP)+, d0
	rts
loc_00008064:
	dc.b	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $C1, $C2, $00, $00, $00, $C3, $C4, $00, $00, $00, $D1, $C5, $C6, $00 ;0xC0
	dc.b	$00, $D2, $C7, $C8, $00, $00, $D1, $D3, $C9, $CA, $00, $D2, $D4, $CB, $CC, $00, $D1, $D3, $D3, $CD, $CE, $D2, $D4, $D4, $CF, $D0
loc_00008096:
	dc.b    $00, $00, $00, $00, $00, $00 ;0xE0
	dc.b	$00, $00, $00, $00, $00, $00, $00, $C1, $C2, $00, $00, $00, $C3, $C4, $00, $00, $D1, $C5, $C6, $00, $00, $D2, $C7, $C8, $00, $D1, $D3, $C9, $CA, $00, $D2, $D4 ;0x100
	dc.b	$CB, $CC, $D1, $D3, $D3, $CD, $CE, $D2, $D4, $D4, $CF, $D0 ;0x120
loc_000080C8:
	CMPI.b	#2, rCurGameMode
	BEQ.w	loc_000080D6
	RTS
loc_000080D6:
	MOVE.w	#$9300, D0
	MOVE.b	$2A(A0), D0
	SWAP	D0
	MOVE.w	$16(A0), D0
	JMP	Video_QueueBgMapSpecial
loc_000080EA:
	CMPI.b	#2, rCurGameMode
	BEQ.w	loc_000080F8
	RTS
loc_000080F8:
	LEA	loc_0000815A, A1
	JSR	ObjSys_InitObjWithFunc
	BCC.w	loc_0000810A
	RTS
loc_0000810A:
	MOVE.w	#$0080, $12(A1)
	MOVE.w	#$8500, $E(A1)
	MOVE.w	#$C620, $A(A1)
	TST.b	$2A(A0)
	BEQ.w	loc_00008130
	MOVE.w	#$A500, $E(A1)
	MOVE.w	#$C62C, $A(A1)
loc_00008130:
	CLR.l	D0
	MOVE.b	$2B(A0), D0
	ADDQ.b	#1, D0
	DIVU.w	#$000A, D0
	TST.b	D0
	BEQ.w	loc_00008146
	ADDQ.b	#1, D0
	LSL.b	#1, D0
loc_00008146:
	MOVE.b	D0, $17(A1)
	SWAP	D0
	ADDQ.b	#1, D0
	LSL.b	#1, D0
	MOVE.b	D0, $F(A1)
	MOVE.w	D1, $26(A1)
	RTS
loc_0000815A:
	LEA	loc_00008194, A1
	TST.w	$26(A0)
	BEQ.w	loc_00008178
	BTST.b	#2, $27(A0)
	BNE.w	loc_00008178
	LEA	loc_00008190, A1
loc_00008178:
	BSR.w	loc_00008310
	SUBQ.w	#1, $26(A0)
	BEQ.w	loc_0000818A
	BCS.w	loc_0000818A
	RTS
loc_0000818A:
	JMP	ObjSys_DeleteObjectA0
loc_00008190:
	dc.b	$00, $01, $FE, $FF 
loc_00008194:
	dc.b	$00, $01, $00, $00
loc_00008198:
	lea (loc_000081E6), a1
	jsr ObjSys_InitObjWithFunc
	bcc.w loc_000081AA
	rts
loc_000081AA:
	move.l a0, $2e(a1)
	move.w d4, $12(a1)
	move.w d6, $e(a1)
	move.w d5, $a(a1)
	rts
; Dead Code
	lea loc_000081E6, a1
	jsr ObjSys_InitObjWithFunc
	bcc.w loc_000081CE
	rts
loc_000081CE:
	move.l a0, $2e(a1)
	move.w d4, $12(a1)
	move.w d6, $e(a1)
	move.w d5, $a(a1)
	move.b #$FF, $7(a1)
	rts
loc_000081E6:
	movea.l $2e(a0), a1
	move.w $28(a1), d0
	beq.w loc_00008234
	andi.b #$3F, d0
	beq.w loc_000081FC
	rts
loc_000081FC:
	clr.l d0
	move.w $28(a1), d0
	lsr.w #6, d0
	divu.w #$a, d0
	tst.b d0
	beq.w loc_00008212
	addq.b #1, d0
	lsl.b #1, d0
loc_00008212:
	move.b d0, $17(a0)
	swap d0
	addq.b #1, d0
	lsl.b #1, d0
	move.b d0, $F(a0)
	lea loc_00008244, a1
	bsr.w loc_00008310
	move.b #sfxID_TextboxDialogue, d0
	jmp SndDrv_QueueSoundEffect
loc_00008234:
	lea loc_0000824C, a1
	bsr.w loc_00008310
	jmp ObjSys_DeleteObjectA0
loc_00008244:
	dc.b    $00, $05, $3C, $26, $2E, $1E, $FE, $FF
loc_0000824C:
	dc.b    $00, $05, $00, $00, $00, $00, $00, $00 ;0xA0
loc_00008254:
	MOVE.w	#$0100, D1
	MOVE.w	#$8500, D6
	LEA	loc_000082AC, A1
	JSR	ObjSys_InitObjWithFunc
	BCC.w	loc_0000826E
	RTS
loc_0000826E:
	MOVE.w	D1, $12(A1)
	MOVE.w	D6, $E(A1)
	MOVE.w	D5, $A(A1)
	CLR.l	D0
	MOVE.b	rOnePlayer_CurStage, D0
	CMPI.b	#stgID_Draco, D0
	BCS.w	loc_0000828C
	SUBQ.b	#3, D0
loc_0000828C:
	ADDQ.b	#1, D0
	DIVU.w	#$000A, D0
	TST.b	D0
	BEQ.w	loc_0000829C
	ADDQ.b	#1, D0
	LSL.b	#1, D0
loc_0000829C:
	MOVE.b	D0, $17(A1)
	SWAP	D0
	ADDQ.b	#1, D0
	LSL.b	#1, D0
	MOVE.b	D0, $F(A1)
	RTS
loc_000082AC:
	CMPI.b	#stgID_Satan, rOnePlayer_CurStage
	BEQ.w	@AtSatan
	LEA	loc_000082EE, A1
	CMPI.b	#stgID_Draco, rOnePlayer_CurStage
	BCC.w	@AfterDraco
	LEA	loc_000082F8, A1
@AfterDraco:
	BSR.w	loc_00008310
	JMP	ObjSys_DeleteObjectA0
@AtSatan:
	SUBQ.w	#4, $A(A0)
	LEA	loc_00008302, A1
	BSR.w	loc_00008310
	JMP	ObjSys_DeleteObjectA0
loc_000082EE:
	dc.b	$00, $07, $3A, $3C, $16, $22, $1E, $00, $FE, $FF 
loc_000082F8:
	dc.b	$00, $07, $2C, $1E, $3A, $3A, $32, $30, $00, $FF 
loc_00008302:
	dc.b	$00, $0B, $20, $26, $30, $16, $2C, $00, $00, $3A, $3C, $16, $22, $1E 
loc_00008310:
	MOVE.w	(A1)+, D0
	MOVE.w	$A(A0), D5
	MOVE.w	$E(A0), D6
	CLR.b	D1
	TST.b	$7(A0)
	BEQ.w	loc_00008328
	MOVE.b	#$6A, D1
loc_00008328:
	MOVE.b	(A1)+, D6
	CMPI.b	#$FF, D6
	BNE.w	loc_00008336
	MOVE.b	$F(A0), D6
loc_00008336:
	CMPI.b	#$FE, D6
	BNE.w	loc_00008342
	MOVE.b	$17(A0), D6
loc_00008342:
	TST.b	D6
	BEQ.w	loc_0000834A
	ADD.b	D1, D6
loc_0000834A:
	ORI	#$0700, SR
	JSR	Video_SetVRAMAddressWrite
	ADD.w	$12(A0), D5
	MOVE.w	D6, vdpData1
	ADDQ.b	#1, D6
	JSR	Video_SetVRAMAddressWrite
	SUB.w	$12(A0), D5
	ADDQ.w	#2, D5
	MOVE.w	D6, vdpData1
	ANDI	#$F8FF, SR
	DBF	D0, loc_00008328
	RTS
loc_0000837C:
	clr.l d0
	move.b ($00FF0128), d0
	move.w #$C320, d5
	move.w #$A500, d6
	bsr.w loc_000083B0
	clr.l d0
	move.b ($00FF0129), d0
	move.w #$C32C, d5
	move.w #$A500, d6
	bsr.w loc_000083B0
	move.l #$800D0000, d0
	jmp Video_QueueBgMapSpecial
loc_000083B0:
	divu.w #$a, d0
	tst.b d0
	beq.w loc_000083BC
	addq.b #1, d0
loc_000083BC:
	addi.l #$00010000, d0
	lsl.l #1, d0
	bsr.w loc_000083CA
	swap d0
loc_000083CA:
	move.b d0, d6
	ori #$700, SR
	jsr Video_SetVRAMAddressWrite
	addi.w #$80, d5
	move.b d0, d6
	move.w d6, (vdpData1)
	addq.b #1, d6
	jsr Video_SetVRAMAddressWrite
	subi.w #$7E, d5
	move.w d6, (vdpData1)
	andi #$F8FF, SR
	rts
	rts
loc_000083FC:
	BTST.b	#1, rCurGameMode
	BNE.w	loc_0000849A
	LEA	$00FF18D0, A1
	CLR.w	D0
	MOVE.b	$2A(A0), D0
	EORI.b	#1, D0
	TST.b	(A1,D0.w)
	BNE.w	loc_0000849A
	CLR.l	D0
	MOVE.w	$14(A0), D0
	MOVE.b	$2A(A0), D4
	EORI.b	#1, D4
	BRA.w	loc_00008440
loc_00008432:
	BSR.w	loc_00008592
	ANDI.l	#$0000FFFF, D0
	MOVE.b	$2A(A0), D4
loc_00008440:
	TST.w	$00FF18C8
	BNE.w	loc_0000849A
	LEA	$00FF18CE, A2
	TST.b	D4
	BEQ.w	loc_0000845C
	LEA	$00FF18CF, A2
loc_0000845C:
	ADDQ.b	#1, (A2)
	MOVE.w	#$0180, D1
	MOVE.w	#$0150, D2
	MOVE.w	#$0010, D3
	MOVE.b	rCurMainPlayer, D5
	EOR.b	D5, D4
	BEQ.w	loc_00008482
	MOVE.w	#$00C0, D1
	MOVE.w	#$00E0, D2
	MOVE.w	#$FFF0, D3
loc_00008482:
	DIVU.w	#6, D0
	CLR.w	D4
	BSR.w	loc_0000849C
	SWAP	D0
	CMPI.w	#6, D4
	BCC.w	loc_0000849A
	BSR.w	loc_000084DA
loc_0000849A:
	RTS
loc_0000849C:
	TST.w	D0
	BEQ.w	loc_000084D8
	LEA	loc_0000854A, A1
	JSR	loc_00002AB0
	BCS.w	loc_000084CE
	BSR.w	loc_00008516
	SUBQ.w	#1, D0
	MOVE.b	#5, $9(A1)
	CMPI.w	#4, D0
	BCS.w	loc_000084CE
	MOVE.b	#6, $9(A1)
	SUBQ.w	#4, D0
loc_000084CE:
	ADD.w	D3, D2
	ADDQ.w	#1, D4
	CMPI.w	#6, D4
	BCS.b	loc_0000849C
loc_000084D8:
	RTS
loc_000084DA:
	SUBQ.b	#1, D0
	BCS.w	loc_0000850A
	LEA	loc_0000854A, A1
	JSR	loc_00002AB0
	BCS.w	loc_0000850A
	BSR.w	loc_00008516
	MOVE.b	D0, $9(A1)
	CMPI.w	#$00C0, D1
	BNE.w	loc_0000850A
	LSL.w	#1, D0
	MOVE.w	loc_0000850C(PC,D0.w), D1
	ADD.w	D1, $A(A1)
loc_0000850A:
	RTS
loc_0000850C:
	dc.w	$0004
	dc.w	$FFF8
	dc.w	$FFEC
	dc.w	$FFE0 
	dc.w	$FFD4
loc_00008516:
	MOVE.b	#$A2, $6(A1)
	MOVE.b	#2, $8(A1)
	MOVE.w	D1, $A(A1)
	MOVE.w	#$0088, $E(A1)
	CLR.l	D5
	MOVE.w	D2, D5
	SUB.w	D1, D5
	SWAP	D5
	ASR.l	#4, D5
	MOVE.l	D5, $12(A1)
	MOVE.w	#$0010, $26(A1)
	MOVE.l	A2, $32(A1)
	MOVE.b	(A2), $28(A1)
	RTS
loc_0000854A:
	TST.w	$26(A0)
	BEQ.w	loc_0000855C
	JSR	ObjSys_UpdatePosInterpMove
	SUBQ.w	#1, $26(A0)
loc_0000855C:
	MOVEA.l	$32(A0), A1
	MOVE.b	$28(A0), D0
	CMP.b	(A1), D0
	BNE.w	loc_0000856C
	RTS
loc_0000856C:
	JMP	ObjSys_DeleteObjectA0
loc_00008572:
	BTST.b	#1, rCurGameMode
	BEQ.w	loc_00008580
	RTS
loc_00008580:
	BSR.w	loc_00008592
	MOVE.w	D0, $14(A1)
	CLR.w	D0
	SWAP	D0
	MOVE.l	D0, $E(A0)
	RTS
loc_00008592:
	LEA	loc_000085E0, A1
	MOVE.w	rMinuteTimer, D0
	MOVE.w	rMinuteTimer+2, D1
	BEQ.w	loc_000085B6
	CMPI.b	#1, rCurGameMode
	BNE.w	loc_000085B6
	SUBQ.w	#1, D1
loc_000085B6:
	CMPI.w	#9, D1
	BCS.w	loc_000085C2
	MOVE.w	#8, D1
loc_000085C2:
	LSR.w	#4, D0
	LSL.w	#2, D1
	OR.w	D1, D0
	LSL.w	#1, D0
	MOVE.w	#$0046, D1
	CLR.l	D0
	MOVE.w	$10(A0), D0
	DIVU.w	D1, D0
	MOVEA.l	$2E(A0), A1
	ADD.w	$14(A1), D0
	RTS
loc_000085E0:
	dc.b	$00, $46, $00, $46, $00, $46, $00, $46, $00, $46, $00, $46, $00, $2F, $00, $23, $00, $1C, $00, $17, $00, $14, $00, $12, $00, $10, $00, $0E, $00, $0D, $00, $0C 
	dc.b	$00, $0B, $00, $0A, $00, $09, $00, $09, $00, $08, $00, $07, $00, $06, $00, $05, $00, $04, $00, $04, $00, $03, $00, $03, $00, $02, $00, $02, $00, $01, $00, $01 ;0x20
	dc.b	$00, $01, $00, $01, $00, $01, $00, $01 ;0x40
loc_00008628:
	MOVE.l	A0, D0
	SWAP	D0
	MOVE.b	$2A(A0), D0
	ADDI.b	#$86, D0
	ROL.w	#8, D0
	SWAP	D0
	JMP	Video_QueueBgMapSpecial
loc_0000863E:
	BSR.w	loc_00005022
	ADDA.l	#$000001E0, A2
	BSR.w	loc_00008766
	BSR.w	loc_000080C8
	CLR.w	D0
	BTST.b	#1, rCurGameMode
	BEQ.w	loc_0000866E
	MOVE.b	$2B(A0), D0
	CMPI.b	#$62, D0
	BCS.w	loc_0000866E
	MOVE.b	#$63, D0
loc_0000866E:
	ADDQ.b	#1, D0
	MULU.w	#$000A, D0
	MULU.w	D2, D0
	MOVE.w	D0, $12(A0)
	SWAP	D0
	TST.w	D0
	BEQ.w	loc_00008688
	MOVE.w	#$FFFF, $12(A0)
loc_00008688:
	CLR.w	$1E(A0)
	BSR.w	loc_000086AA
	BSR.w	loc_000086D6
	BSR.w	loc_0000871C
	CMPI.w	#$03E8, $1E(A0)
	BCS.w	loc_000086A8
	MOVE.w	#$03E7, $1E(A0)
loc_000086A8:
	RTS
loc_000086AA:
	CLR.w	D0
	MOVE.b	$9(A0), D0
	CMPI.b	#9, D0
	BCS.b	loc_000086BA
	MOVE.b	#8, D0
loc_000086BA:
	LSL.b	#1, D0
	MOVE.w	loc_000086C4(PC,D0.w), $1E(A0)
	RTS
loc_000086C4:
	dc.w	$0000, $0008, $0010, $0020, $0040 
	dc.w 	$0080, $0100, $0200, $0400
loc_000086D6:
	MOVE.w	$26(A0), D0
	SUBQ.w	#1, D0
	CLR.w	D1
	CLR.b	D2
	CLR.w	D3
loc_000086E2:
	MOVE.b	$1(A2,D1.w), D3
	LSR.b	#4, D3
	ANDI.b	#7, D3
	BSET.l	D3, D2
	ADDQ.w	#2, D1
	DBF	D0, loc_000086E2
	MOVE.w	#5, D0
	CLR.w	D1
loc_000086FA:
	ROR.b	#1, D2
	BCC.b	loc_00008700
	ADDQ.b	#2, D1
loc_00008700:
	DBF	D0, loc_000086FA
	MOVE.w	loc_0000870E(PC,D1.w), D0
	ADD.w	D0, $1E(A0)
	RTS
loc_0000870E:
	dc.w 	$0000, $0000, $0003, $0006, $000C, $0018, $0030
loc_0000871C:
	MOVE.w	$26(A0), D0
	SUBQ.w	#1, D0
	CLR.w	D1
	CLR.w	D2
loc_00008726:
	MOVE.b	(A2,D1.w), D2
	CMPI.b	#$0C, D2
	BCS.b	loc_00008734
	MOVE.b	#$0B, D2
loc_00008734:
	LSL.b	#1, D2
	MOVE.w	loc_0000874E(PC,D2.w), D3
	ADD.w	D3, $1E(A0)
	BCC.b	loc_00008746
	MOVE.w	#$FFFF, $1E(A0)
loc_00008746:
	ADDQ.w	#2, D1
	DBF	D0, loc_00008726
	RTS
loc_0000874E:
	dc.w 	$0000, $0000, $0000, $0000, $0000, $0002, $0003
	dc.w 	$0004, $0005, $0006, $0007, $000A
loc_00008766:
	MOVE.w	$26(A0), D0
	SUBQ.w	#1, D0
	CLR.w	D1
	CLR.w	D2
	CLR.w	D3
loc_00008772:
	MOVE.b	(A2,D1.w), D3
	ADD.w	D3, D2
	ADDQ.w	#2, D1
	DBF	D0, loc_00008772
	ADD.w	D2, $16(A0)
	CMPI.w	#$2710, $16(A0)
	BCS.w	loc_00008792
	MOVE.w	#$270F, $16(A0)
loc_00008792:
	ADD.w	D2, $18(A0)
	BCC.w	loc_000087A0
	MOVE.w	#$FFFF, $18(A0)
loc_000087A0:
	RTS
loc_000087A2:
	CLR.l	D0
	MOVE.w	$12(A0), D0
	MOVE.w	$1E(A0), D1
	BEQ.w	loc_000087B2
	MULU.w	D1, D0
loc_000087B2:
	BRA.w	loc_0000884C
loc_000087B6:
	CLR.w	D0
	MOVE.b	rCurGameMode, D0
	ANDI.b	#3, D0
	LSL.w	#2, D0
	MOVEA.l	loc_000087CA(PC,D0.w), A1
	JMP	(A1)
loc_000087CA:
	dc.l	loc_000087DA
	dc.l    loc_000087DC
	dc.l    loc_000087F6
	dc.l    loc_000087F6
loc_000087DA:
	RTS
loc_000087DC:
	clr.w d0
	move.b $2b(a0), d0
	lsl.w #1, d0
	move.w loc_000087EC(PC, d0.w), $14(a0)
	rts
loc_000087EC:
	dc.w 	$0000, $0000, $0000, $0012, $001E
loc_000087F6:
	movea.l $32(a0), a1
	clr.w d1
	move.b $2b(a0), d1
	lsl.b #2, d1
	andi.b #$38, d1
	move.w loc_0000881E(PC, d1.w), $20(a1)
	move.b loc_00008820(PC, d1.w), $7(a1)
	move.l loc_0000881A(PC, d1.w), d0
	bra.w loc_00008832
loc_0000881A:
	dc.l    $00000000
loc_0000881E:
	dc.w    $FFFF
loc_00008820:
	dc.b    $00, $00, $00, $00, $9C, $40, $00, $28, $00, $00, $00, $01, $5F, $90, $00, $24, $01, $00 ;0x40
loc_00008832:
	BSR.w	loc_0000884C
loc_00008836:
	MOVE.l	A0, D0
	SWAP	D0
	MOVE.b	$2A(A0), D0
	ADDI.b	#$81, D0
	ROL.w	#8, D0
	SWAP	D0
	JMP	Video_QueueBgMapSpecial
loc_0000884C:
	ADD.l	D0, $E(A0)
	TST.w	$E(A0)
	BEQ.w	loc_00008864
	MOVE.w	#0, $E(A0)
	MOVE.w	#$FFFF, $10(A0)
loc_00008864:
	MOVE.l	$A(A0), D1
	ADD.l	D0, D1
	BCC.w	loc_00008874
	MOVE.l	#$05F5E0FF, D1
loc_00008874:
	CMPI.l	#$05F5E100, D1
	BCS.w	loc_00008884
	MOVE.l	#$05F5E0FF, D1
loc_00008884:
	MOVE.l	D1, $A(A0)
	RTS
loc_0000888A:
	MOVE.w	$18(A0), D0
	CMP.w	$1C(A0), D0
	BCC.w	loc_00008898
	RTS
loc_00008898:
	CLR.w	$18(A0)
	ADDQ.b	#1, $8(A0)
	MOVE.b	$8(A0), D0
	ANDI.b	#7, D0
	BNE.w	loc_000088D8
	MOVE.b	rCurGameMode, D0
	ANDI.b	#3, D0
	BEQ.w	loc_000088E0
	MOVE.b	#sfxID_Bonus, D0
	BSR.w	SndDrv_QueueSoundEffect
	CMPI.b	#$62, $2B(A0)
	BCC.w	loc_000088DC
	ADDQ.b	#1, $2B(A0)
	MOVE.w	#$0080, D1
	BSR.w	loc_000080EA
loc_000088D8:
	BRA.w	loc_000088E0
loc_000088DC:
	BRA.w	loc_000088E0
loc_000088E0:
	MOVE.b	rCurGameMode, D0
	ANDI.b	#3, D0
	BEQ.w	loc_000088FA
	CMPI.b	#1, D0
	BEQ.w	loc_0000892A
	BRA.w	loc_00008960
loc_000088FA:
	CLR.w	D0
	MOVE.b	$8(A0), D0
	SUB.b	$00FF0104, D0
	BCC.w	loc_0000890C
	CLR.b	D0
loc_0000890C:
	MOVEM.l	A1, -(A7)
	LEA	loc_000089AC, A1
	LSL.w	#2, D0
	MOVE.w	(A1,D0.w), $1A(A0)
	MOVE.w	$2(A1,D0.w), $1C(A0)
	MOVEM.l	(A7)+, A1
	RTS
loc_0000892A:
	CLR.w	D0
	MOVE.b	$8(A0), D0
	ANDI.b	#7, D0
	MOVEM.l	A1/D1, -(A7)
	CLR.w	D1
	MOVE.b	$2B(A0), D1
	LSL.b	#2, D1
	ANDI.b	#$18, D1
	OR.b	D1, D0
	LEA	loc_00008A0C, A1
	LSL.w	#2, D0
	MOVE.w	(A1,D0.w), $1A(A0)
	MOVE.w	$2(A1,D0.w), $1C(A0)
	MOVEM.l	(A7)+, D1/A1
	RTS
loc_00008960:
	CLR.w	D0
	MOVE.b	$8(A0), D0
	ANDI.b	#7, D0
	MOVEM.l	A1/D1, -(A7)
	CLR.w	D1
	MOVE.b	$2B(A0), D1
	CMPI.b	#$0D, D1
	BCS.w	loc_00008980
	MOVE.b	#$0C, D1
loc_00008980:
	OR.b	loc_0000899E(PC,D1.w), D0
	LEA	loc_00008A64, A1
	LSL.w	#2, D0
	MOVE.w	(A1,D0.w), $1A(A0)
	MOVE.w	$2(A1,D0.w), $1C(A0)
	MOVEM.l	(A7)+, D1/A1
	RTS
loc_0000899E:
	dc.b	$48, $50, $00, $08, $10, $18, $20, $28, $30, $38, $38, $38, $40, $00 
loc_000089AC:
	dc.w 	$0400, $0020, $0400, $0020, $0500, $0020, $0500
	dc.w 	$0020, $0600, $0020, $0800, $0020, $0A00, $0020
	dc.w 	$0C00, $0028, $1000, $0028, $2000, $0030, $3000
	dc.w 	$0030, $4000, $0038, $4800, $0038, $5000, $0040
	dc.w 	$6000, $0040, $8000, $FFFF, $8000, $FFFF, $8000
	dc.w 	$0004, $8000, $0004, $8000, $0004, $A000, $0004
	dc.w 	$C000, $0004, $E000, $0004, $FE00, $FFFF
loc_00008A0C:
	dc.w 	$1000, $0020, $1600, $0020, $1A00, $0020, $2000
	dc.w 	$0020, $2500, $0020, $3000, $0020, $3400, $0020
	dc.w 	$4000, $FFFF, $2000, $0020, $2500, $0020, $3000
	dc.w 	$0020, $3400, $0020, $4000, $0020, $6000, $0020
	dc.w 	$8000, $FFFF, $2000, $0010, $2500, $0010, $3000
	dc.w 	$0010, $3400, $0010, $4000, $0010, $6000, $0010
	dc.w 	$8000, $FFFF
loc_00008A64:
	dc.w 	$1000, $0004, $1600, $0004, $2000, $0004, $3000
	dc.w 	$0004, $3400, $0008, $4000, $0008, $6000, $0008
	dc.w 	$6000, $0008, $2000, $0004, $2000, $0004, $3000
	dc.w 	$0004, $3000, $0004, $3400, $0004, $3400, $0004
	dc.w 	$4000, $0004, $4000, $0004, $4000, $0004, $4000
	dc.w 	$0004, $6000, $0004, $6000, $0004, $8000, $0004
	dc.w 	$8000, $0004, $8000, $0004, $8000, $0004, $3000
	dc.w 	$0004, $3000, $0004, $3400, $0004, $3400, $0004
	dc.w 	$4000, $0004, $4000, $0004, $6000, $0004, $6000
	dc.w 	$0004, $6000, $0004, $6000, $0004, $8000, $0004
	dc.w 	$8000, $0004, $8000, $0004, $8000, $0004, $8000
	dc.w 	$0004, $8000, $0004, $3400, $0004, $3400, $0004
	dc.w 	$4000, $0004, $4000, $0004, $6000, $0004, $6000
	dc.w 	$0004, $8000, $0004, $8000, $0004, $8000, $0004
	dc.w 	$8000, $0004, $A000, $0004, $A000, $0004, $C000
	dc.w 	$0004, $C000, $0004, $E000, $0004, $E000, $0004
	dc.w 	$8000, $0004, $8000, $0004, $A000, $0004, $A000
	dc.w 	$0004, $C000, $0004, $C000, $0004, $E000, $0004
	dc.w 	$FE00, $0008, $FE00, $0004, $FE00, $0004, $FE00
	dc.w 	$0004, $FE00, $0004, $FE00, $0004, $FE00, $0004
	dc.w 	$FE00, $0004, $FE00, $0004, $0800, $0004, $0800
	dc.w 	$0004, $0B00, $0004, $0B00, $0004, $0B00, $0004
	dc.w 	$1000, $0004, $1000, $0004, $1000, $0004, $0B00
	dc.w 	$0004, $0B00, $0004, $0B00, $0004, $0C00, $0004
	dc.w 	$0C00, $0004, $0D00, $0004, $1000, $0004, $1000
	dc.w 	$0004
loc_00008BC4:
	dc.l	loc_000091F4
	dc.l	loc_000090EC
	dc.l	loc_00009054
	dc.l	loc_00008F32
	dc.l	loc_00008FE6
	dc.l	loc_00008DA6
	dc.l	loc_000092F6
	dc.l	loc_0000933E
	dc.l	loc_00008C48
	dc.l	loc_000090E0
	dc.l	loc_00008BF4
	dc.l	loc_00008EBE
loc_00008BF4:
	LEA	loc_00008C28, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCC.w	loc_00008C04
	RTS
loc_00008C04:
	MOVE.l	A0, $2E(A1)
	MOVE.w	$A(A0), $A(A1)
	MOVE.b	#$0A, $6(A1)
	MOVE.w	#$FFFF, $12(A1)
	MOVE.w	#$1C00, $1A(A1)
	MOVE.w	#$0020, $26(A1)
	RTS
loc_00008C28:
	MOVEA.l	$2E(A0), A1
	TST.b	$7(A1)
	BEQ.w	ObjSys_DeleteObjectA0
	BSR.w	ObjSys_UpdatePosInterpMove
	MOVE.w	$A(A0), $A(A1)
	SUBQ.w	#1, $26(A0)
	BEQ.w	ObjSys_DeleteObjectA0
	RTS
loc_00008C48:
	LEA	loc_00008C7C, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCC.w	loc_00008C58
	RTS
loc_00008C58:
	MOVE.l	A0, $2E(A1)
	MOVE.w	$A(A0), $A(A1)
	MOVE.w	$E(A0), $E(A1)
	MOVE.b	#2, $6(A1)
	MOVE.w	#$FFFF, $12(A1)
	MOVE.w	#$0044, $26(A1)
	RTS
loc_00008C7C:
	MOVEA.l	$2E(A0), A1
	TST.b	$7(A1)
	BEQ.w	ObjSys_DeleteObjectA0
	BSR.w	ObjSys_UpdatePosInterpMove
	MOVE.w	$A(A0), $A(A1)
	SUBQ.w	#1, $26(A0)
	BEQ.w	loc_00008C9C
	RTS
loc_00008C9C:
	MOVE.w	#2, $12(A0)
	MOVE.w	#$0041, $26(A0)
	MOVE.w	#$FF00, $00FF18AE
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVEA.l	$2E(A0), A1
	TST.b	$7(A1)
	BEQ.w	ObjSys_DeleteObjectA0
	BSR.w	ObjSys_UpdatePosInterpMove
	MOVEA.l	$36(A1), A2
	MOVE.w	$A(A0), $A(A1)
	MOVE.w	$A(A0), $A(A2)
	MOVE.b	$36(A0), D0
	LSL.b	#1, D0
	ORI.b	#$80, D0
	MOVE.w	#$2000, D1
	JSR	SignedSinWithMul
	SWAP	D2
	ADD.w	$E(A0), D2
	MOVE.w	D2, $E(A1)
	MOVE.w	D2, $E(A2)
	ADDQ.b	#1, $36(A0)
	SUBQ.w	#1, $26(A0)
	BEQ.w	loc_00008D04
	RTS
loc_00008D04:
	MOVE.b	#sfxID_MajorGarbagePuyoFall1, D0
	JSR	SndDrv_QueueSoundEffect
	BSR.w	loc_00008D6A
	MOVE.b	#$8A, $6(A0)
	CLR.l	$12(A0)
	MOVE.w	#$0200, $1A(A0)
	MOVE.w	#$00BC, $26(A0)
	MOVE.w	#$FF03, $00FF18AE
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVEA.l	$2E(A0), A1
	TST.b	$7(A1)
	BEQ.w	ObjSys_DeleteObjectA0
	BSR.w	ObjSys_UpdatePosInterpMove
	MOVEA.l	$36(A1), A2
	MOVE.w	$A(A0), $A(A1)
	MOVE.w	$A(A0), $A(A2)
	SUBQ.w	#1, $26(A0)
	BEQ.w	loc_00008D5E
	RTS
loc_00008D5E:
	MOVE.w	#$FF00, $00FF18AE
	BRA.w	ObjSys_DeleteObjectA0
loc_00008D6A:
	LEA	loc_00008D74, A1
	BRA.w	loc_00002AB0
loc_00008D74:
	move.b #$40, $26(a0)
	bsr.w ObjSys_UpdateObjNextOpTimer
	move.b ($00FF05D3), d0
	andi.b #$FE, d0
	move.b $26(a0), d1
	andi.b #1, d1
	eori.b #1, d1
	or.b d1, d0
	move.b d0, ($00FF05D3)
	subq.b #1, $26(a0)
	beq.w ObjSys_DeleteObjectA0
	rts
loc_00008DA6:
	MOVE.b	#3, D0
	MOVE.b	#0, D1
	MOVE.b	#1, D2
	LEA	palLookupTable, A2
	ADDA.l	#(pal_general-palLookupTable), A2
	JSR	loc_00000E28
	LEA	loc_00008E02, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCC.w	loc_00008DD4
	RTS
loc_00008DD4:
	MOVE.l	A0, $2E(A1)
	MOVE.b	#$33, $6(A1)
	MOVE.w	$A(A0), $A(A1)
	MOVE.w	$E(A0), $E(A1)
	MOVE.l	#$FFFF0000, $12(A1)
	MOVE.l	#$00009000, $16(A1)
	MOVE.w	#$0080, $26(A1)
	RTS
loc_00008E02:
	movea.l $2e(a0), a1
	tst.b $7(a1)
	beq.w ObjSys_DeleteObjectA0
	bsr.w ObjSys_UpdatePosInterpMove
	move.w $a(a0), $a(a1)
loc_00008E18:
	move.w $e(a0), $e(a1)
	subq.w #1, $26(a0)
	beq.w loc_00008E28
	rts
loc_00008E28:
	move.w #$20, d0
	bsr.w ObjSys_SetObjNextOpTimer
loc_00008E30:
	bsr.w ObjSys_UpdateObjNextOpTimer
	move.b #3, d0
	move.b #6, d1
	lea palLookupTable, a2
	adda.l #(pal_general-palLookupTable), a2
	jsr loc_00000E46
	move.w #$40, d0
	bsr.w ObjSys_SetObjNextOpTimer
	bsr.w ObjSys_UpdateObjNextOpTimer
	clr.w $16(a0)
	clr.w $e(a0)
	move.w #$1800, $1c(a0)
	move.w #$FF, $20(a0)
	move.b #$15, $6(a0)
	bsr.w ObjSys_UpdateObjNextOpTimer
	movea.l $2e(a0), a1
	tst.b $7(a1)
	beq.w ObjSys_DeleteObjectA0
	jsr ObjSys_UpdatePosInterpMove
	cmpi.w #$80, $e(a0)
	bcc.w loc_00008EA2
	move.w $e(a0), d0
	addi.w #$FFE8, d0
	move.w d0, $e(a1)
	rts
loc_00008EA2:
	move.w #$68, $e(a1)
	move.w #$FF01, ($00FF18AE).l
	move.b #sfxID_SatanMovePuyo, d0
	jsr SndDrv_QueueSoundEffect
	bra.w ObjSys_DeleteObjectA0
loc_00008EBE:
	LEA	loc_00008EFE, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCC.w	loc_00008ECE
	RTS
loc_00008ECE:
	MOVE.l	A0, $2E(A1)
	MOVE.b	#$1B, $6(A1)
	MOVE.w	$A(A0), $A(A1)
	MOVE.w	$E(A0), $E(A1)
	MOVE.w	#2, $12(A1)
	MOVE.w	#$0600, $1A(A1)
	MOVE.w	#$FFFE, $16(A1)
	MOVE.w	#$0068, $26(A1)
	RTS
loc_00008EFE:
	MOVEA.l	$2E(A0), A1
	TST.b	$7(A1)
	BEQ.w	ObjSys_DeleteObjectA0
	BSR.w	ObjSys_UpdatePosInterpMove
	BCS.w	loc_00008F28
	SUBQ.w	#1, $26(A0)
	BEQ.w	loc_00008F28
	MOVE.w	$A(A0), $A(A1)
	MOVE.w	$E(A0), $E(A1)
	RTS
loc_00008F28:
	MOVE.w	#$0040, $A(A1)
	BRA.w	ObjSys_DeleteObjectA0
loc_00008F32:
	ORI.b	#$80, $6(A0)
	LEA	loc_00008F6E, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCC.w	loc_00008F48
	RTS
loc_00008F48:
	MOVE.l	A0, $2E(A1)
	MOVE.w	$A(A0), $A(A1)
	MOVE.w	$E(A0), $E(A1)
	MOVE.b	#$33, $6(A1)
	MOVE.b	#$7C, $36(A1)
	MOVEA.l	$12(A0), A1
	CLR.b	$7(A1)
	RTS
loc_00008F6E:
	movea.l $2e(a0), a1
	tst.b $7(a1)
	beq.w ObjSys_DeleteObjectA0
	bsr.w ObjSys_UpdatePosInterpMove
	move.w $a(a0), $a(a1)
	move.b $36(a0), d0
	ori.b #$80, d0
	move.w #$4000, d1
	jsr SignedSinWithMul
	swap d2
	add.w $e(a0), d2
loc_00008F9C:
	move.w d2, $e(a1)
	addq.b #4, $36(a0)
loc_00008FA4:
	bmi.w loc_00008FAA
	rts
loc_00008FAA:
	clr.b $36(a0)
	move.w #$40, d0
	jsr loc_00001202
	addi.w #$140, d0
	sub.w $a(a0), d0
	swap d0
	clr.w d0
	asr.l #5, d0
	move.l d0, $12(a0)
	move.w #$68, d0
	sub.w $e(a0), d0
	swap d0
	clr.w d0
	asr.l #5, d0
	move.l d0, $16(a0)
	move.b #sfxID_PlacePuyo, d0
	jmp SndDrv_QueueSoundEffect
loc_00008FE6:
	LEA	loc_0000900E, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCC.w	loc_00008FF6
	RTS
loc_00008FF6:
	MOVE.l	A0, $2E(A1)
	MOVE.l	A1, $12(A0)
	MOVE.l	#loc_0000903E, $32(A1)
	MOVE.b	#$FF, $7(A1)
	RTS
loc_0000900E:
	MOVEA.l	$2E(A0), A1
	MOVE.b	$7(A0), D0
	AND.b	$7(A1), D0
	BEQ.w	ObjSys_DeleteObjectA0
	BSR.w	ObjSys_UpdateObjAnim
	BCC.w	loc_0000902E
	SUBQ.w	#1, $26(A0)
	BEQ.w	ObjSys_DeleteObjectA0
loc_0000902E:
	MOVE.w	#$8F00, D0
	MOVE.b	$9(A0), D0
	SWAP	D0
	JMP	Video_QueueBgMapSpecial
loc_0000903E:
	dc.b	$F1, $00, $08, $01, $0C, $00, $04, $01, $10, $00, $0C, $01, $08, $00, $0C, $01, $FF, $00
	dc.l    loc_0000903E
loc_00009054:
	LEA	loc_0000907E, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCC.w	loc_00009064
	RTS
loc_00009064:
	MOVE.l	A0, $2E(A1)
	MOVE.l	#loc_000090D6, $32(A1)
	MOVE.w	$A(A0), $1E(A1)
	MOVE.w	$E(A0), $20(A1)
	RTS
loc_0000907E:
	MOVEA.l	$2E(A0), A1
	TST.b	$7(A1)
	BEQ.w	ObjSys_DeleteObjectA0
	BSR.w	ObjSys_UpdateObjAnim
	MOVE.b	$9(A1), D0
	ANDI.b	#3, D0
	OR.b	$9(A0), D0
	MOVE.b	D0, $9(A1)
	MOVE.b	$36(A0), D0
	MOVE.w	#$1800, D1
	JSR	SignedSinWithMul
	SWAP	D2
	ADD.w	$1E(A0), D2
	MOVE.w	D2, $A(A1)
	MOVE.b	$36(A0), D0
	LSL.b	#1, D0
	MOVE.w	#$0800, D1
	JSR	SignedSinWithMul
	SWAP	D2
	ADD.w	$20(A0), D2
	MOVE.w	D2, $E(A1)
	ADDQ.b	#1, $36(A0)
	RTS
loc_000090D6:
	dc.b	$10
	dc.b	$00 
	dc.b	$09
	dc.b	$04 
	dc.b	$FF
	dc.b	$00 
	dc.l	loc_000090D6
loc_000090E0:
	MOVE.b	#1, D0
	MOVE.w	#$FFF0, D1
	BRA.w	loc_000090F4
loc_000090EC:
	MOVE.b	#0, D0
	MOVE.w	#0, D1
loc_000090F4:
	LEA	loc_00009112, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCC.w	loc_00009104
	RTS
loc_00009104:
	MOVE.l	A0, $2E(A1)
	MOVE.b	D0, $7(A1)
	MOVE.w	D1, $1A(A1)
	RTS
loc_00009112:
	MOVE.w	#$0010, D0
	JSR	loc_00001202
	ADDI.w	#$0018, D0
	MOVE.w	D0, $26(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	CMPI.w	#$FF20, rScrollYScanFront
	BNE.w	ObjSys_DeleteObjectA0
	SUBQ.w	#1, $26(A0)
	BEQ.w	loc_0000913E
	RTS
loc_0000913E:
	MOVEA.l	$2E(A0), A2
	TST.b	$7(A0)
	BEQ.w	loc_00009152
	CMPI.b	#3, $9(A2)
	BCC.b	loc_00009112
loc_00009152:
	LEA	loc_000091D6, A1
	BSR.w	loc_00002AB0
	BCS.b	loc_00009112
	MOVEA.l	$2E(A0), A2
	MOVE.w	$A(A2), $A(A1)
	MOVE.w	$1A(A0), D0
	ADD.w	D0, $A(A1)
	MOVE.w	$E(A2), $E(A1)
	SUBI.w	#$0030, $E(A1)
	MOVE.b	#$97, $6(A1)
	MOVE.b	#$10, $8(A1)
	MOVE.w	#$0060, $26(A1)
	MOVE.w	#5, D0
	JSR	loc_00001202
	ADDI.b	#$0A, D0
	MOVE.b	D0, $9(A1)
	MOVE.w	#$FFFF, $20(A1)
	MOVE.w	#$0400, $1C(A1)
	MOVE.w	#$0020, D0
	JSR	loc_00001202
	ADDI.b	#$70, D0
	MOVE.w	#$0180, D1
	JSR	SignedSinWithMul
	MOVE.l	D2, $12(A1)
	JSR	SignedCosWithMul
	MOVE.l	D2, $16(A1)
	BRA.w	loc_00009112
loc_000091D6:
	CMPI.w	#$FF20, rScrollYScanFront
	BNE.w	ObjSys_DeleteObjectA0
	BSR.w	ObjSys_UpdatePosInterpMove
	BCS.w	ObjSys_DeleteObjectA0
	SUBQ.w	#1, $26(A0)
	BEQ.w	ObjSys_DeleteObjectA0
	RTS
loc_000091F4:
	LEA	loc_00009216, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCC.w	loc_00009204
	RTS
loc_00009204:
	MOVE.l	A0, $2E(A1)
	MOVE.w	$A(A0), $A(A1)
	MOVE.w	$E(A0), $E(A1)
	RTS
loc_00009216:
	MOVEA.l	$2E(A0), A1
	TST.b	$7(A1)
	BEQ.w	ObjSys_DeleteObjectA0
	CMPI.b	#3, $9(A1)
	BEQ.w	loc_0000922E
	RTS
loc_0000922E:
	TST.w	$26(A1)
	BNE.w	loc_0000923A
	BSR.w	loc_00009EAE
loc_0000923A:
	MOVEA.l	$2E(A0), A1
	ADDQ.w	#1, $26(A1)
	BSR.w	loc_000092B2
	MOVE.b	#sfxID_MajorGarbagePuyoFall1, D0
	JSR	SndDrv_QueueSoundEffect
	MOVE.b	#2, $6(A0)
	MOVE.w	#$4000, $14(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVEA.l	$2E(A0), A1
	TST.b	$7(A1)
	BEQ.w	ObjSys_DeleteObjectA0
	BSR.w	ObjSys_UpdatePosInterpMove
	MOVEA.l	$36(A1), A2
	MOVE.w	$A(A0), $A(A1)
	MOVE.w	$A(A0), $A(A2)
	MOVE.w	#$0400, D1
	MOVE.b	$36(A0), D0
	BMI.w	loc_00009294
	ORI.b	#$80, D0
	MOVE.w	#$0800, D1
loc_00009294:
	JSR	SignedSinWithMul
	SWAP	D2
	ADD.w	$E(A0), D2
	MOVE.w	D2, $E(A1)
	MOVE.w	D2, $E(A2)
	ADDQ.b	#8, $36(A0)
	BEQ.w	ObjSys_DeleteObjectA0
	RTS
loc_000092B2:
	LEA	loc_000092BC, A1
	BRA.w	ObjSys_InitObjWithFunc
loc_000092BC:
	MOVE.w	#$001F, $26(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVE.w	$26(A0), D0
	LSR.w	#2, D0
	BTST.b	#0, $27(A0)
	BNE.w	loc_000092D8
	CLR.w	D0
loc_000092D8:
	ADDI.w	#$FF20, D0
	TST.b	$00FF1892
	BEQ.w	loc_000092EC
	MOVE.w	D0, rScrollYScanFront
loc_000092EC:
	SUBQ.w	#1, $26(A0)
	BCS.w	ObjSys_DeleteObjectA0
	RTS
loc_000092F6:
	LEA	loc_00009324, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCC.w	loc_00009306
	RTS
loc_00009306:
	MOVE.b	#$80, $6(A1)
	MOVE.b	#SprMapID_Zombie, Obj_SprMap(A1)
	MOVE.b	#6, Obj_AnmFrm(A1)
	MOVE.w	#$0060, Obj_YPos(A1)
	MOVE.l	A0, $2E(A1)
	RTS
loc_00009324:
	MOVEA.l	$2E(A0), A1
	TST.b	$7(A1)
	BNE.w	loc_00009336
	JMP	ObjSys_DeleteObjectA0
loc_00009336:
	MOVE.w	$A(A1), $A(A0)
	RTS
loc_0000933E:
	MOVE.b	#$80, $6(A0)
	LEA	loc_00009360, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCC.w	loc_00009354
	RTS
loc_00009354:
	MOVE.l	A0, $2E(A1)
	MOVE.w	#$0078, $26(A1)
	RTS
loc_00009360:
	MOVEA.l	$2E(A0), A1
	TST.b	$7(A1)
	BEQ.w	loc_000093EE
	SUBI.l	#$00008000, $E(A1)
	SUBQ.w	#1, $26(A0)
	BEQ.w	loc_0000937E
	RTS
loc_0000937E:
	CLR.b	$36(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	MOVEA.l	$2E(A0), A1
	TST.b	$7(A1)
	BEQ.w	loc_000093EE
	MOVE.b	$36(A0), D0
	MOVE.w	#$3000, D1
	JSR	SignedSinWithMul
	SWAP	D2
	NEG.w	D2
	ADDI.w	#$0060, D2
	MOVE.w	D2, $E(A1)
	ADDQ.b	#1, $36(A0)
	CMPI.b	#$41, $36(A0)
	BCC.w	loc_000093BC
	RTS
loc_000093BC:
	MOVE.w	#$FF02, $00FF18AE
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVEA.l	$2E(A0), A1
	TST.b	$7(A1)
	BEQ.w	loc_000093EE
	ADDQ.w	#1, $E(A1)
	CMPI.w	#$0064, $E(A1)
	BEQ.w	loc_000093E6
	RTS
loc_000093E6:
	MOVE.w	#$FF00, $00FF18AE
loc_000093EE:
	JMP	ObjSys_DeleteObjectA0
loc_000093F4:
	CLR.w	D0
	MOVE.b	rOnePlayer_CurCutscene, D0
	LSL.w	#2, D0
	LEA	Cutscene_ArtTable, A1
	MOVEA.l	(A1,D0.w), A0
	MOVE.w	#$8000, D0
	JSR	System_DecompressComp
	CLR.w	D0
	MOVE.b	rOnePlayer_CurCutscene, D0
	LSL.w	#2, D0
	LEA	Cutscene_ArtTable, A1
	MOVEA.l	$44(A1,D0.w), A0
	MOVE.w	#0, D0
	JSR	System_DecompressComp
	MOVE.b	#$FF, $00FF18AE
	MOVE.b	#0, $00FF18AF
	CLR.w	D0
	MOVE.b	rOnePlayer_CurCutscene, D0
	MOVE.b	D0, D1
	CMPI.b	#$10, D1
	BNE.w	loc_00009456
	MOVE.b	#$0C, D1
loc_00009456:
	ADDI.b	#9, D1
	LEA	loc_0000958C, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCC.w	loc_0000946A
	RTS
loc_0000946A:
	MOVE.b	#$FF, $7(A1)
	MOVE.b	D1, $8(A1)
	LEA	loc_000094F2, A2
	MOVE.b	(A2,D0.w), $6(A1)
	LSL.w	#2, D0
	MOVE.w	loc_000094AE(PC,D0.w), $A(A1)
	MOVE.w	loc_000094B0(PC,D0.w), $E(A1)
	MOVEA.l	A1, A2
	LEA	loc_000095FC, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCC.w	loc_000094A0
	RTS
loc_000094A0:
	MOVE.l	A2, $2E(A1)
	MOVE.l	A1, $36(A2)
	MOVE.b	D1, $8(A1)
	RTS
loc_000094AE:
	dc.w	$0160 
loc_000094B0:
	dc.w 	$0068, $0160, $0068, $0150, $00A0, $0160, $0068
	dc.w 	$0188, $00A0, $0160, $0068, $0160, $0068, $0160
	dc.w 	$0058, $0150, $0068, $0160, $0068, $0158, $0068
	dc.w 	$0160, $0068, $01E0, $FFA0, $0160, $0070, $0160
	dc.w 	$0068, $0160, $0068, $0120, $0068
loc_000094F2:
	dc.b 	$80, $80, $00, $80, $00, $80, $80, $80, $80
	dc.b 	$80, $80, $80, $80, $80, $80, $80, $80, $00
Cutscene_ArtTable:
	dc.l	art_cutsceneSkeletonT
	dc.l	art_cutsceneSuketoudara
	dc.l	art_cutsceneZombie
	dc.l	art_cutsceneDraco
	dc.l	art_cutsceneNasu
	dc.l	art_cutsceneWitch
	dc.l	art_cutsceneSasoriman
	dc.l	art_cutsceneHarpy
	dc.l	art_cutsceneZoh
	dc.l	art_cutsceneSchezo
	dc.l	art_cutsceneMinotauros
	dc.l	art_cutsceneRulue
	dc.l	art_cutsceneSatan
	dc.l	art_cutsceneMummy
	dc.l	art_cutsceneSukiyapotes
	dc.l	art_cutscenePanotty
	dc.l	art_cutsceneSatan
	dc.l	art_cutsceneCharset_lesson1
	dc.l	art_cutsceneCharset_stage2
	dc.l	art_cutsceneCharset_stage7
	dc.l	art_cutsceneCharset_stage1
	dc.l	art_cutsceneCharset_lesson2
	dc.l	art_cutsceneCharset_stage8
	dc.l	art_cutsceneCharset_stage5
	dc.l	art_cutsceneCharset_stage4
	dc.l	art_cutsceneCharset_stage9
	dc.l	art_cutsceneCharset_stage10
	dc.l	art_cutsceneCharset_stage11
	dc.l	art_cutsceneCharset_stage12
	dc.l	art_cutsceneCharset_stage13
	dc.l	art_cutsceneCharset_lesson3
	dc.l	art_cutsceneCharset_stage3
	dc.l	art_cutsceneCharset_stage6
	dc.l	art_cutsceneCharset_lessonEnd
loc_0000958C:
	TST.w	rScrollYScanFront
	BEQ.w	loc_000095F0
	MOVE.w	$A(A0), $00FF18B2
	TST.b	$00FF18AE
	BEQ.w	loc_000095EC
	CLR.b	$00FF18AE
	CLR.w	D0
	MOVE.b	$00FF18AF, D0
	BPL.w	loc_000095CC
	LEA	loc_00008BC4, A1
	ANDI.b	#$7F, D0
	LSL.w	#2, D0
	MOVEA.l	(A1,D0.w), A2
	JMP	(A2) 
loc_000095CC:
	CLR.w	D1
	MOVE.b	rOnePlayer_CurCutscene, D1
	LEA	tbl_CutsceneCharAnims, A1
	LSL.w	#2, D1
	MOVEA.l	(A1,D1.w), A2
	LSL.w	#2, D0
	MOVE.l	(A2,D0.w), $32(A0)
	CLR.w	$22(A0)
loc_000095EC:
	BRA.w	ObjSys_UpdateObjAnim
loc_000095F0:
	CLR.b	$7(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BRA.w	ObjSys_DeleteObjectA0
loc_000095FC:
	MOVEA.l	$2E(A0), A1
	TST.b	$7(A1)
	BEQ.w	ObjSys_DeleteObjectA0
	MOVE.w	$A(A1), $A(A0)
	MOVE.w	$E(A1), $E(A0)
	MOVE.b	#0, $6(A0)
	LEA	loc_00009644, A2
	CLR.w	D0
	MOVE.b	rOnePlayer_CurCutscene, D0
	LSL.b	#2, D0
	MOVEA.l	(A2,D0.w), A3
	MOVE.b	$9(A1), D0
	MOVE.b	(A3,D0.w), $9(A0)
	BMI.w	loc_00009642
	MOVE.b	$6(A1), $6(A0)
loc_00009642:
	RTS
	

loc_00009644:
	dc.l	loc_00009688
	dc.l	loc_0000968E
	dc.l	loc_00009694
	dc.l	loc_0000969A
	dc.l	loc_000096A2
	dc.l	loc_000096A4
	dc.l	loc_000096AA
	dc.l	loc_000096B2
	dc.l	loc_000096BA
	dc.l	loc_000096C0
	dc.l	loc_000096C8
	dc.l	loc_000096CE
	dc.l	loc_000096D6
	dc.l	loc_000096E0
	dc.l	loc_000096EC
	dc.l	loc_000096F8
	dc.l	loc_000096D6
loc_00009688:
	dc.b	$FF, $05, $FF, $FF, $06, $00 
loc_0000968E:
	dc.b	$06, $07, $FF, $FF, $FF, $FF 
loc_00009694:
	dc.b	$FF, $FF, $FF, $FF, $FF, $FF 
loc_0000969A:
	dc.b	$08, $09, $0A, $0B, $FF, $0C, $FF, $FF 
loc_000096A2:
	dc.b	$FF, $FF 
loc_000096A4:
	dc.b	$FF, $05, $FF, $FF, $06, $00 
loc_000096AA:
	dc.b	$07, $08, $09, $0A, $FF, $FF, $FF, $00 
loc_000096B2:
	dc.b	$FF, $08, $09, $FF, $FF, $08, $09, $FF 
loc_000096BA:
	dc.b	$06, $07, $08, $09, $FF, $FF 
loc_000096C0:
	dc.b	$08, $09, $0A, $FF, $FF, $0B, $0C, $0D 
loc_000096C8:
	dc.b	$05, $06, $FF, $FF, $FF, $00 
loc_000096CE:
	dc.b	$0B, $0C, $0D, $FF, $0E, $0F, $FF, $0E 
loc_000096D6:
	dc.b	$FF, $09, $0A, $0B, $0C, $0D, $FF, $FF, $FF, $00 
loc_000096E0:
	dc.b	$FF, $0C, $FF, $0D, $0E, $0F, $10, $11, $12, $13, $14, $15 
loc_000096EC:
	dc.b	$FF, $0C, $0D, $FF, $0E, $0F, $FF, $10, $11, $12, $FF, $FF 
loc_000096F8:
	dc.b	$FF, $09, $FF, $FF, $0A, $FF, $0B, $0C, $0D, $00 
	
tbl_CutsceneCharAnims:
	dc.l	animtbl_CutsceneSkeletonT
	dc.l	animtbl_CutsceneSuketoudara
	dc.l	animtbl_CutsceneZombie
	dc.l	animtbl_CutsceneDraco
	dc.l	animtbl_CutsceneNasu
	dc.l	animtbl_CutsceneWitch
	dc.l	animtbl_CutsceneSasoriman
	dc.l	animtbl_CutsceneHarpy
	dc.l	animtbl_CutsceneZohDaimaoh
	dc.l	animtbl_CutsceneSchezo
	dc.l	animtbl_CutsceneMinotauros
	dc.l	animtbl_CutsceneRulue
	dc.l    animtbl_CutsceneSatan
	dc.l    animtbl_CutsceneMummy
	dc.l    animtbl_CutsceneSukiyapotes
	dc.l    animtbl_CutscenePanotty
	dc.l    animtbl_CutsceneSatan ; Satan is listed twice because he appears in the easy ending.

	include "anim/cutscene/panotty.asm"
	include "anim/cutscene/sukiyapotes.asm"
	include "anim/cutscene/mummy.asm"
	include "anim/cutscene/skeletont.asm"
	include "anim/cutscene/suketoudara.asm"
	include "anim/cutscene/zombie.asm"
	include "anim/cutscene/draco.asm"
	include "anim/cutscene/nasu.asm"
	include "anim/cutscene/witch.asm"
	include "anim/cutscene/sasoriman.asm"
	include "anim/cutscene/harpy.asm"
	include "anim/cutscene/zohdaimaoh.asm"
	include "anim/cutscene/schezo.asm"
	include "anim/cutscene/minotauros.asm"
	include "anim/cutscene/rulue.asm"
	include "anim/cutscene/satan.asm"
	even

Cutscene_InitObj:
	MOVE.b	#$FF, $00FF18AC
	MOVE.b	#0, $00FF18AD
	LEA	loc_00009BDA, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCC.w	loc_00009B9A
	RTS
loc_00009B9A:
	MOVE.b	#$80, $6(A1)
	MOVE.b	#$FF, $7(A1)
	MOVE.b	#8, $8(A1)
	MOVE.w	#$00E0, $A(A1)
	MOVE.w	#$0068, $E(A1)
	MOVEA.l	A1, A2
	LEA	Cutscene_ObjArleStart, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCC.w	loc_00009BCA
	RTS
loc_00009BCA:
	MOVE.l	A2, $2E(A1)
	MOVE.l	A1, $36(A2)
	MOVE.b	#8, $8(A1)
	RTS
loc_00009BDA:
	TST.w	rScrollYScanFront
	BEQ.w	loc_00009C30
	MOVE.w	$A(A0), $00FF18B0
	TST.b	$00FF18AC
	BEQ.w	loc_00009C2C
	CLR.b	$00FF18AC
	CLR.w	D0
	MOVE.b	$00FF18AD, D0
	BPL.w	loc_00009C1A
	ANDI.b	#$7F, D0
	LSL.w	#2, D0
	LEA	loc_00009C90, A1
	MOVEA.l	(A1,D0.w), A2
	JMP	(A2) 
loc_00009C1A:
	LSL.w	#2, D0
	LEA	loc_00009D66, A1
	MOVE.l	(A1,D0.w), $32(A0)
	CLR.w	$22(A0)
loc_00009C2C:
	BRA.w	ObjSys_UpdateObjAnim
loc_00009C30:
	CLR.b	$7(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	BRA.w	ObjSys_DeleteObjectA0
Cutscene_ObjArleStart:
	MOVEA.l	$2E(A0), A1
	TST.b	$7(A1)
	BEQ.w	ObjSys_DeleteObjectA0
	MOVE.w	$A(A1), $A(A0)
	MOVE.w	$E(A1), $E(A0)
	MOVE.b	#0, $6(A0)
	LEA	loc_00009C76, A2
	MOVE.b	$9(A1), D0
	MOVE.b	(A2,D0.w), $9(A0)
	BMI.w	loc_00009C74
	MOVE.b	#$80, $6(A0)
loc_00009C74:
	RTS
loc_00009C76:
	dc.b	$FF
	dc.b	$19 
	dc.b	$1A
	dc.b	$1B, $1C, $FF 
	dc.b	$1D
	dc.b	$1E
	dc.b	$1F
	dc.b	$20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $FF 
	dc.b	$FF
	dc.b	$2A
	dc.b	$2B
	dc.b	$2C, $2D, $00 
loc_00009C90:
	dc.l    loc_00009CDA
	dc.l    loc_00009C98
loc_00009C98:
	lea (loc_00009CB4).l, a1
	bsr.w ObjSys_InitObjWithFunc
	bcc.w loc_00009CA8
	rts
loc_00009CA8:
	move.l a0, $2E(a1)
	move.w #8, $26(a1)
	rts
loc_00009CB4:
	movea.l $2e(a0), a1
	tst.b $7(a1)
	beq.w ObjSys_DeleteObjectA0
	move.w $26(a0),d0
	andi.b #1, d0
	add.w d0, $e(a1)
	sub.w d0, $a(a1)
	subq.w #1, $26(a0)
	beq.w ObjSys_DeleteObjectA0
	rts
loc_00009CDA:
	lea (loc_00009CFC).l, a1
	bsr.w ObjSys_InitObjWithFunc
	bcc.w loc_00009CEA
	rts
loc_00009CEA:
	move.l a0, $2e(a1)
	move.w $a(a0), $a(a1)
	move.w $e(a0), $e(a1)
	rts
loc_00009CFC:
	movea.l $2e(a0), a1
	tst.b $7(a1)
	beq.w ObjSys_DeleteObjectA0
	tst.b $7(a0)
	bne.w loc_00009D24
	cmpi.w #$FF20, (rScrollYScanFront).l
	bne.w loc_00009D1E
	rts
loc_00009D1E:
	move.b #$FF, $7(a0)
loc_00009D24:
	movea.l $36(a1), a2
	move.w #$400, d1
	move.b $36(a0), d0
	bmi.w loc_00009D3C
	ori.b #$80, d0
	move.w #$800, d1
loc_00009D3C:
	jsr SignedSinWithMul
	swap d2
	add.w $e(a0), d2
	move.w d2, $e(a1)
	move.w d2, $e(a2)
	move.b #5, $9(a1)
	move.b #5, $9(a2)
	addq.b #6, $36(a0)
	bcs.w ObjSys_DeleteObjectA0
	rts
loc_00009D66:
	dc.l	loc_00009DBE
	dc.l	loc_00009DC8
	dc.l	loc_00009DD6
	dc.l	loc_00009DE0
	dc.l	loc_00009DE4
	dc.l	loc_00009DE8
	dc.l	loc_00009DF2
	dc.l	loc_00009DFC
	dc.l	loc_00009E00
	dc.l	loc_00009E0A
	dc.l	loc_00009E0E
	dc.l	loc_00009E18
	dc.l    loc_00009E22
	dc.l    loc_00009E26
	dc.l    loc_00009E2A
	dc.l    loc_00009E32
	dc.l    loc_00009E3A
	dc.l    loc_00009E44
	dc.l    loc_00009E4E
	dc.l    loc_00009E58
	dc.l    loc_00009E62
	dc.l    loc_00009DD2
	
loc_00009DBE:
	dc.b	$F0
	dc.b	$00 
	dc.b	$06
	dc.b	$02 
	dc.b	$FF
	dc.b	$00 
	dc.l	loc_00009DBE
loc_00009DC8:
	dc.b	$04, $00, $05, $01, $FF, $00
	dc.l    loc_00009DC8
loc_00009DD2:
	dc.b    $00, $03, $FE, $00
loc_00009DD6:
	dc.b    $03, $03, $04, $04, $FF, $00
	dc.l    loc_00009DD6
loc_00009DE0:
	dc.b    $00, $05, $FE, $00 
loc_00009DE4:
	dc.b	$00
	dc.b	$14 
	dc.b	$FE
	dc.b	$00 
loc_00009DE8:
	dc.b	$04
	dc.b	$14 
	dc.b	$05
	dc.b	$15 
	dc.b	$FF
	dc.b	$00 
	dc.l	loc_00009DE8
loc_00009DF2:
	dc.b	$F0
	dc.b	$14 
	dc.b	$06
	dc.b	$16 
	dc.b	$FF
	dc.b	$00 
	dc.l	loc_00009DF2
	
loc_00009DFC:
	dc.l	$0017FE00
loc_00009E00:
	dc.l	$04170518
	dc.w	$FF00
	dc.l    loc_00009E00
	
loc_00009E0A:
	dc.w    $0006
	dc.w	$FE00
	
loc_00009E0E:
	dc.w    $0406	
	dc.l	$0507FF00	
	dc.l	loc_00009E0E
	
loc_00009E18:
	dc.b	$F0
	dc.b	$06 
	dc.b	$06
	dc.b	$08 
	dc.b	$FF
	dc.b	$00 
	dc.l	loc_00009E18
	
loc_00009E22:
	dc.b	$00, $09, $FE, $00
loc_00009E26:
	dc.b    $00, $0A, $FE, $00
loc_00009E2A:
	dc.b    $08, $06, $0C, $13, $00, $0B, $FE, $00
loc_00009E32:
	dc.b    $08, $06, $0C, $13, $00, $0D, $FE, $00
loc_00009E3A:
	dc.b    $04, $0B, $05, $0C, $FF, $00
	dc.l    loc_00009E3A
loc_00009E44:
	dc.b    $F0, $0B, $06, $0F, $FF, $00
	dc.l    loc_00009E44
loc_00009E4E:
	dc.b    $04, $0D, $05, $0E, $FF, $00
	dc.l    loc_00009E4E
loc_00009E58:
	dc.b    $F0, $0D, $06, $10, $FF, $00
	dc.l    loc_00009E58
loc_00009E62:
	dc.b	$04, $0B, $08, $11, $00, $12, $FE, $00
loc_00009E6A:
	lea 	(loc_00009E74).l, a1
	bra.w	ObjSys_InitObjWithFunc
	
loc_00009E74:
	move.w #$a0, $26(a0)
	bsr.w ObjSys_UpdateObjNextOpTimer
	subq.w #1, $26(a0)
	beq.w ObjSys_DeleteObjectA0
	tst.w $28(a0)
	beq.w loc_00009E94
	subq.w #1, $28(a0)
	rts
loc_00009E94:
	move.w #6, d0
	jsr loc_00001202
	addq.w #8, d0
	move.w d0, $28(a0)
	move.b #sfxID_63, d0
	jmp SndDrv_QueueSoundEffect
loc_00009EAE:
	lea (loc_00009EB8).l, a1
	bra.w ObjSys_InitObjWithFunc
loc_00009EB8:
	clr.w $26(a0)
	move.l #loc_00009EF8, $32(a0)
loc_00009EC4:
	bsr.w ObjSys_UpdateObjNextOpTimer
	cmpi.w #$FF30, (rScrollYScanFront).l
	bcc.w ObjSys_DeleteObjectA0
	tst.w $26(a0)
	beq.w loc_00009EE2
	subq.w #1, $26(a0)
	rts
loc_00009EE2:
	movea.l $32(a0), a2
	move.w (a2)+, $26(a0)
	bmi.w ObjSys_DeleteObjectA0
	movea.l (a2)+, a3
	move.l a2, $32(a0)
	jsr (a3)
	bra.b loc_00009EC4
loc_00009EF8:
	dc.b    $00, $40
	dc.l    loc_00009F12
	dc.b    $00, $C0
	dc.l    loc_00009E6A
	dc.b    $00, $00
	dc.l    loc_00009FC2
	dc.b    $00, $00
	dc.l    loc_00009E6A
	dc.b    $FF, $FF
loc_00009F12:
	move.w #$1F, d2
loc_00009F16:
	lea (loc_00009F82).l, a1
	bsr.w loc_00002AB0
	bcs.w loc_00009F7C
	move.b #SprMapID_Birds, Obj_SprMap(a1)
	move.l #loc_00009FB0, Obj_Anim(a1)
	move.w #$120, Obj_XPos(a1)
	move.w #$40, Obj_YPos(a1)
	move.w #$FFFE, $16(a1)
	jsr UpdateRNG
	move.w d0, $18(a1)
	jsr UpdateRNG
	move.b d0, d1
	andi.w #$3FF, d0
	move.w d0, $1A(a1)
	move.w d1, d0
	andi.w #$3f, d0
	addi.w #$40, d0
	move.w d0, $e(a1)
	andi.b #$f, d1
	move.b d1, $22(a1)
	andi.w #1, d1
	sub.w d1, $1e(a1)
loc_00009F7C:
	dbf d2, loc_00009F16
	rts
loc_00009F82:
	bsr.w ObjSys_UpdateObjAnim
	move.b #$BA, $6(a0)
loc_00009F8C:
	btst.b #3, $9(a0)
	move.b #$BB, $6(a0)
loc_00009F98:
	bsr.w ObjSys_UpdatePosInterpMove
loc_00009F9C:
	move.w $e(a0), d0
loc_00009FA0:
	sub.w ($00ff05d2).l, d0
	or.w $a(a0), d0
	bmi.w ObjSys_DeleteObjectA0
	rts
loc_00009FB0:
	dc.w    $0306
	dc.l    $02070108
	dc.l    $03090208
	dc.l    $0207FF00
	dc.l    loc_00009FB0
loc_00009FC2:
	move.w #$1F, d2
loc_00009FC6:
	lea (loc_0000A02E).l, a1
	bsr.w loc_00002AB0
	bcs.w loc_0000A028
	move.b #SprMapID_Birds, Obj_SprMap(a1)
	move.l #loc_0000A060, Obj_Anim(a1)
	move.w #$140, $1c(a1)
	move.l #$FFFF8000, $16(a1)
	move.w d2, d0
	lsl.w #2, d0
	addi.w #$FFB0, d0
	move.w d0, Obj_YPos(a1)
	jsr UpdateRNG
	move.b d0, d1
	andi.w #$70, d0
	addi.w #$1C0, d0
	move.w d0, Obj_XPos(a1)
	andi.b #$f, d1
	move.b d1, $22(a1)
	move.w #$FFFD, $12(a1)
	jsr UpdateRNG
	move.w d0, $14(a1)
loc_0000A028:
	dbf d2, loc_00009FC6
	rts
loc_0000A02E:
	bsr.w ObjSys_UpdateObjAnim
	move.b #$B2, $6(a0)
loc_0000A038:
	btst.b #2, $9(a0)
	beq.w loc_0000A048
loc_0000A042:
	move.b #$B7, $6(a0)
loc_0000A048:
	bsr.w ObjSys_UpdatePosInterpMove
	move.w $e(a0), d0
loc_0000A050:
	sub.w (rScrollYScanFront).l, d0
	or.w $a(a0), d0
	bmi.w ObjSys_DeleteObjectA0
	rts
loc_0000A060:
	dc.b    $03, $02 ;0x220
	dc.b	$02, $03, $01, $04, $01, $05, $02, $04, $02, $03, $FF, $00
	dc.l    loc_0000A060
Cutscene_ThunderObjInit:
	move.b #$FF, ($00FF1886).l
	lea (Cutscene_ThunderObjStart).l, a1
	bsr.w ObjSys_InitObjWithFunc
	bcc.w @AllocSuccess
	rts
@AllocSuccess:
	move.b #SprMapID_Lightning, Obj_SprMap(a1)
	rts
Cutscene_ThunderObjStart:
	move.w #$80, d0
	jsr loc_00001202
	addq.w #4, d0
	move.w d0, $26(a0)
	bsr.w ObjSys_UpdateObjNextOpTimer
	cmpi.w #$FF20, (rScrollYScanFront).l
	bne.w ObjSys_DeleteObjectA0
	btst.b #5, (rPad1Press).l
	bne.w loc_0000A0C8
	subq.w #1, $26(a0)
	beq.w loc_0000A0C8
	rts
loc_0000A0C8:
	move.w #3, d0
	jsr loc_00001202
	move.b d0, d1
	lsl.b #2, d1
	move.b d1, $9(a0)
	lea (loc_0000A198).l, a1
	lsl.w #2, d0
	move.w $0(a1, d0.w), $e(a0)
	move.w $2(a1, d0.w), d1
	move.b d1, $28(a0)
	move.w #$100, d0
	jsr loc_00001202
	addi.w #$a0, d0
	move.w d0, $A(a0)
	move.b #$80, $6(a0)
	move.w #6, d0
	bsr.w ObjSys_SetObjNextOpTimer
	move.b $25(a0), d0
	andi.b #1, d0
	add.b d0, $9(a0)
	bsr.w ObjSys_UpdateObjNextOpTimer
	move.l #loc_0000A184, $32(a0)
	bsr.w ObjSys_UpdateObjNextOpTimer
	movea.l $32(a0), a1
	clr.l d0
	move.w (a1)+, d0
	bmi.w loc_0000A14E
	move.l a1, $32(a0)
	lea (palLookupTable).l, a2
	adda.l d0, a2
	move.b #1, d0
	jmp Video_LoadPaletteIntoIndex
loc_0000A14E:
	move.b #1, d0
	move.b #1, d1
	lea (palLookupTable).l, a2
	adda.l #(pal_satanCut-palLookupTable), a2
	jsr Video_LoadPaletteIntoIndex
	move.b #0, $6(a0)
	tst.b ($00FF1886).l
	beq.w Cutscene_ThunderObjStart
	move.b $28(a0), d0
	bsr.w SndDrv_QueueSoundEffect
	bra.w Cutscene_ThunderObjStart
loc_0000A184:
	dc.b    $01, $80, $01, $80, $00, $00, $01, $40, $01, $80, $01, $40, $01, $80, $01, $40, $01, $40, $FF, $FF
loc_0000A198:
	dc.w 	$FFC8, sfxID_SatanThunder, $FFE8, sfxID_SatanThunderSmall, $0008, sfxID_SatanThunderSmall
loc_0000A1A4:
	LEA	loc_0000A1D2, A1
	BSR.w	ObjSys_InitObjWithFunc
	LEA	loc_0000A23A, A1
	BSR.w	ObjSys_InitObjWithFunc
	MOVE.w	#$FF20, rScrollYScanFront
	MOVE.w	#$FF60, rScrollYScanBack
	MOVE.w	#$FFFF, $00FF1892
	RTS
loc_0000A1D2:
	TST.w	$00FF1892
	BEQ.w	loc_0000A1DE
	RTS
loc_0000A1DE:
	MOVE.w	#$FF20, $E(A0)
	MOVE.l	#$00040000, $16(A0)
	MOVE.w	#$0038, $26(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	CMPI.b	#stgID_Draco, rOnePlayer_CurStage
	BCS.w	loc_0000A21E
	MOVE.l	$16(A0), D0
	ADD.l	D0, $E(A0)
	MOVE.w	$E(A0), D0
	MOVE.w	D0, rScrollYScanFront
	SUBQ.w	#1, $26(A0)
	BEQ.w	loc_0000A21E
	RTS
loc_0000A21E:
	MOVE.w	#0, rScrollYScanFront
	MOVE.b	#sfxID_PlacePuyo, D0
	JSR	SndDrv_QueueSoundEffect
	CLR.b	rBytecode_StopRun
	BRA.w	ObjSys_DeleteObjectA0
loc_0000A23A:
	TST.w	$00FF1892
	BEQ.w	loc_0000A246
	RTS
loc_0000A246:
	MOVE.w	#$FF60, $E(A0)
	MOVE.l	#$0002DB6D, $16(A0)
	MOVE.w	#$0038, $26(A0)
	BSR.w	ObjSys_UpdateObjNextOpTimer
	CMPI.b	#stgID_Draco, rOnePlayer_CurStage
	BCS.w	loc_0000A286
	MOVE.l	$16(A0), D0
	ADD.l	D0, $E(A0)
	MOVE.w	$E(A0), D0
	MOVE.w	D0, rScrollYScanBack
	SUBQ.w	#1, $26(A0)
	BEQ.w	loc_0000A286
	RTS
loc_0000A286:
	MOVE.w	#0, rScrollYScanBack
	MOVE.w	#$8B00, D0
	MOVE.b	rVDPRegBTbl+rvtMode3, D0
	ANDI.b	#$FC, D0
	MOVE.b	D0, rVDPRegBTbl+rvtMode3
	CLR.w	rScrollXScanBack
	BRA.w	ObjSys_DeleteObjectA0
loc_0000A2AC:
	LEA	Cutscene_ControllerObj, A1
	BSR.w	ObjSys_InitObjWithFunc
	CLR.w	D0
	CLR.w	D1
	MOVE.b	rOnePlayer_CurStage, D0
	MOVE.b	loc_0000A2D6(PC,D0.w), D1
	MOVE.b	D1, D2
	LSR.b	#1, D2
	MOVE.b	D2, rBytecode_Ret
	LSL.w	#2, D1
	MOVEA.l	loc_0000A2E8(PC,D1.w), A2
	JMP	(A2)
loc_0000A2D6:
	dc.b 	$00, $00, $00, $00, $00, $00, $00, $00, $00
	dc.b 	$00, $00, $01, $01, $01, $01, $02, $02, $00
loc_0000A2E8:
	dc.l	loc_0000A316
	dc.l    loc_0000A368
	dc.l    loc_0000A3B6


loc_0000A2F4:
	CLR.w	D0
	CLR.w	D1
	MOVE.b	rOnePlayer_CurStage, D0
	MOVE.b	loc_0000A2D6(PC,D0.w), D1
	LSL.w	#2, D1
	MOVEA.l	loc_0000A30A(PC,D1.w), A2
	JMP	(A2)
loc_0000A30A:
	dc.l	loc_0000A334
	dc.l    loc_0000A382
	dc.l    loc_0000A3DA
loc_0000A316:
	LEA	(art_bgGrass).l, A0
	MOVE.w	#$2000, D0
	JSR	System_DecompressComp
	MOVE.w	#0, D0
	JSR	Video_QueueBgMapFromId
	BRA.w	loc_0000A3F4
loc_0000A334:
	MOVE.b	#1, D0
	MOVE.b	#0, D1
	LEA	palLookupTable, A2
	ADDA.l	#(pal_grassCutTop-palLookupTable), A2
	JSR	loc_00000E46
	MOVE.b	#3, D0
	MOVE.b	#0, D1
	LEA	palLookupTable, A2
	ADDA.l	#(pal_grassCutBottom-palLookupTable), A2
	JMP	loc_00000E46
loc_0000A368:
	lea (art_bgRuins).l, a0
	move.w #$2000, d0
	jsr System_DecompressComp
	move.w #1, d0
	jmp Video_QueueBgMapFromId
loc_0000A382:
	move.b #1, d0
	move.b #0, d1
	lea (palLookupTable), a2
	adda.l #(pal_ruinsCutForeground-palLookupTable), a2
	jsr loc_00000E46
	move.b #3, d0
	move.b #0, d1
	lea (palLookupTable).l, a2
	adda.l #(pal_ruinsCutBackground-palLookupTable), a2
	jmp loc_00000E46
loc_0000A3B6:
	lea (art_bgSatan).l, a0
	move.w #$2000, d0
	jsr System_DecompressComp
	move.w #2, d0
	jsr Video_QueueBgMapFromId
	bsr.w Cutscene_ThunderObjInit
	jmp loc_00001336
loc_0000A3DA:
	move.b #1, d0
	move.b #0, d1
	lea (palLookupTable).l, a2
	adda.l #(pal_satanCut-palLookupTable), a2
	jmp loc_00000E46
loc_0000A3F4:
	MOVE.w	#$8B00, D0
	MOVE.b	rVDPRegBTbl+rvtMode3, D0
	ORI.b	#3, D0
	MOVE.b	D0, rVDPRegBTbl+rvtMode3
	LEA	loc_0000A430, A1
	BSR.w	ObjSys_InitObjWithFunc
	BCS.w	loc_0000A42E
	MOVE.l	#$00020000, $E(A1)
	MOVE.l	#$00018000, $16(A1)
	MOVE.l	#$00010000, $1E(A1)
loc_0000A42E:
	RTS
loc_0000A430:
	MOVE.w	#$000A, D0
	MOVE.w	#2, D1
loc_0000A438:
	MOVE.l	$4(A0,D0.w), D2
	ADD.l	D2, (A0,D0.w)
	ADDQ.l	#8, D0
	DBF	D1, loc_0000A438
	LEA	rScrollXScanFront, A2
	MOVE.w	#$01DC, D0
	MOVE.w	rScrollYScanBack, D1
	SUBI.w	#$FF60, D1
	CMPI.w	#$0078, D1
	BCC.w	ObjSys_DeleteObjectA0
	SUBQ.w	#1, D1
	BCS.w	loc_0000A472
loc_0000A468:
	CLR.l	(A2,D0.w)
	SUBQ.w	#4, D0
	DBF	D1, loc_0000A468
loc_0000A472:
	CLR.w	D1
	MOVE.w	#$001A, D2
loc_0000A478:
	CLR.w	D3
	MOVE.b	loc_0000A49A(PC,D1.w), D3
loc_0000A47E:
	CLR.w	(A2,D0.w)
	MOVE.w	(A0,D2.w), $2(A2,D0.w)
	SUBQ.w	#4, D0
	BCS.w	loc_0000A498
	DBF	D3, loc_0000A47E
	ADDQ.w	#1, D1
	SUBQ.w	#8, D2
	BRA.b	loc_0000A478
loc_0000A498:
	RTS
loc_0000A49A:
	dc.b	$2F
	dc.b	$2F
	dc.b	$FF
	dc.b	$00 
	
Sega_CreateLogoObj:
	LEA	Sega_LogoInit, A1
	JMP	ObjSys_InitObjWithFunc
	
Sega_LogoInit:
	ORI	#$0700, SR
	MOVE.w	#$4000, vdpControl1
	MOVE.w	#0, vdpControl1
	LEA	art_segaLogo, A1
	MOVE.w	#$02FF, D0
@LoadArtData:
	MOVE.w	(A1)+, vdpData1
	DBF	D0, @LoadArtData
	ANDI	#$F8FF, SR
	
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.w	#$0023, D0
	JSR	Video_QueueBgMapFromId
	
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.b	#0, D0
	LEA	pal_segaPart1, A2
	JSR	Video_LoadPaletteIntoIndex
	MOVE.w	#$003F, $26(A0)
	BSR.w	loc_00010D0E
	BSR.w	loc_0000A5B0
	
	JSR	ObjSys_UpdateObjNextOpTimer
	BSR.w	loc_0000A5B0
	SUBQ.w	#1, $26(A0)
	BCS.w	@TimerEnded
	RTS
	
@TimerEnded:
	BSR.w	loc_00010D0E
	JSR	ObjSys_UpdateObjNextOpTimer
	CLR.b	$00FF013A
	MOVE.w	#$0020, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.w	#$0028, $26(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	ADDQ.b	#1, $28(A0)
	MOVE.b	$28(A0), D0
	ANDI.b	#1, D0
	BEQ.w	@AnimPart1Ended
	RTS
	
@AnimPart1Ended:
	MOVE.w	$26(A0), D0
	MOVE.w	#$000A, D1
	LEA	pal_segaPart2, A1
	LEA	$00FF0A5A, A2
	
@LoadPal2:
	MOVE.w	(A1,D0.w), (A2)+
	ADDQ.w	#2, D0
	DBF	D1, @LoadPal2
	
	MOVE.b	#0, D0
	LEA	rPalQueueMainEnt1, A2
	JSR	Video_LoadPaletteIntoIndex
	SUBQ.w	#2, $26(A0)
	BMI.w	@TimerIsNegative
	RTS
@TimerIsNegative:
	MOVE.w	#$0080, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	ObjSys_UpdateObjNextOpTimer
	CLR.b	rBytecode_StopRun
	JMP	ObjSys_DeleteObjectA0

loc_0000A5B0:
	LEA	$00FF3000, A1
	TST.b	$00FF013B
	BNE.w	loc_0000A5C6
	LEA	$00FF3200, A1
loc_0000A5C6:
	MOVE.w	$26(A0), D1
	LSR.w	#1, D1
	ADDI.w	#$0060, D1
	CLR.w	D0
loc_0000A5D2:
	MOVE.w	D1, D2
	SUB.w	D0, D2
	MOVE.w	D2, (A1)+
	ADDQ.w	#1, D0
	CMP.w	D0, D1
	BCC.b	loc_0000A5D2
	ADDQ.b	#2, D1
	MOVE.b	D1, $00FF013A
	EORI.b	#1, $00FF013B
	RTS
pal_segaPart1:
	incbin "art/palettes/sega/logo_part1.bin"
pal_segaPart2:
	incbin "art/palettes/sega/logo_part2.bin"
art_segaLogo:
	incbin "art/art/sega/sega_logo.unc"
;bgmap_segaLogo_unused:
	incbin "art/bg_mappings/sega/logo_unused.bgword"
	
; Object initialized by StaffCredits_Init
StaffCredits_LoadTextObj:
	MOVE.b	#$FF, $7(A0)
	MOVE.l	#StaffCredits_TextTbl, $32(A0)
	MOVE.w	#$0200, D0 ; 8 Second Timer, wait for palette fade.
	JSR	ObjSys_SetObjNextOpTimer
	JSR	ObjSys_UpdateObjNextOpTimer
	TST.w	$26(A0) ; Checks temporary wait timer
	BEQ.w	@WaitTimerExpired
	SUBQ.w	#1, $26(A0)
	RTS
@WaitTimerExpired:
	MOVEA.l	$32(A0), A1 ; Load current credits text pointer
	MOVE.w	(A1)+, D0
	BEQ.w	@CreditsEnd	  ; If we hit the end, exit out.
	BMI.w	@CreditsFinal ; If we hit the final section, jump.
	LSL.w	#1, D0
	MOVE.w	D0, $26(A0) ; Set temporary wait timer
	MOVEA.l	(A1)+, A2 ; Load text pointer
	MOVE.l	A1, $32(A0) ; Store next credits text pointer
	BRA.w	@CreditsNormal
@CreditsEnd:
	MOVE.b	#0, $7(A0) ; Mark that we've reached the end of the credits
	MOVE.w	#$0800, D0 ; 34 Second wait timer
	JSR	ObjSys_SetObjNextOpTimer
	JSR	ObjSys_UpdateObjNextOpTimer
	CLR.b	rBytecode_StopRun
	CLR.b	rBytecode_Ret
	JMP	ObjSys_DeleteObjectA0 ; Exit out
@CreditsFinal:
	CLR.w	D0
	MOVE.b	rOption_ComputerLevel, D0 ; Change ending based on computer level
	LSL.w	#2, D0
	MOVE.l	@EndingPtrTbl(PC,D0.w), $32(A0)
	RTS
@EndingPtrTbl:
	dc.l	@Hardest
	dc.l    @Hard
	dc.l    @Normal
	dc.l    @Easy

@CreditsNormal:
	LEA	rStaffCredits_MapRecFlgTbl, A1
	MOVE.w	#7, D0
@CheckCreateSpriteObj:
	TST.b	(A1,D0.w) ; Check if sprite mapping needs recreated
	BEQ.w	@CreateSpriteObj
	DBF	D0, @CheckCreateSpriteObj
	RTS
@CreateSpriteObj:
	MOVE.b	#$FF, (A1,D0.w) ; Clear recreation flag
	LEA	@SpriteObj, A1
	JSR	ObjSys_InitObjWithFunc
	BCC.w	@InitSuccess
	RTS
@InitSuccess:
	; Set some fields for the object
	MOVE.l	A0, $32(A1) ; Store pointer for LoadTextObj
	MOVE.b	#$91, Obj_RndrFlgs(A1)
	MOVE.b	#7, Obj_SprMap(A1)
	MOVE.b	D0, Obj_AnmFrm(A1)
	MOVE.w	D0, $26(A1)
	MOVE.w	(A2)+, Obj_XPos(A1)
	MOVE.w	#$0160, Obj_YPos(A1)
	MOVE.l	#$FFFF8000, $16(A1)
	MOVE.l	#$FFFFC000, $16(A1)
	; Calculate the offset for the current sprite frame
	LEA	rSprMapStaffText, A3
	MULU.w	#$00A2, D0
	ADDA.l	D0, A3
	MOVE.w	(A2)+, D0 ; Get string length
	MOVE.w	D0, (A3)+ ; Write it to the mapping (sprite count)
	SUBQ.w	#1, D0 ; Prepare for looping to make each char sprite
	CLR.w	D1
	MOVE.w	#$A500, D2
@CharLoop:
	MOVE.b	(A2)+, D2 ; Load char from string
	BNE.w	@NotSpace
	ADDQ.w	#8, D1
	BRA.b	@CharLoop
@NotSpace:
	MOVE.w	#0, (A3)+ ; Y Pos
	MOVE.b	#1, (A3)+ ; Width & Height Settings
	MOVE.b	#0, (A3)+ ; Link
	MOVE.w	D2, (A3)+ ; Prio, Pal, Vflip, Hflip, Tile
	MOVE.w	D1, (A3)+ ; X Pos
	ADDQ.w	#8, D1
	DBF	D0, @CharLoop
	RTS

@SpriteObj:
	MOVEA.l	$32(A0), A1 ; Load LoadTextObj pointer
	TST.b	$7(A1) ; Check if we've reached the end of the credits
	BEQ.w	@Stop ; If we have, stop the object from doing anything.
	JSR	ObjSys_UpdatePosInterpMove ; Move Object
	CMPI.w	#$0070, Obj_YPos(A0) ; If sprite has moved off screen
	BCS.w	@DeleteSelf
	RTS
@DeleteSelf:
	LEA	rStaffCredits_MapRecFlgTbl, A1
	MOVE.w	$26(A0), D0
	CLR.b	(A1,D0.w) ; Mark mapping as needing to be reloaded
	JMP	ObjSys_DeleteObjectA0
@Stop:
	JSR	ObjSys_UpdateObjNextOpTimer
	RTS

@Hardest:
	dc.b	$00, $20
	dc.l    @ThankYou
	dc.b    $00, $40
	dc.l    @ForYourPlaying
	dc.b    $00, $D0
	dc.l    @Copyright
	dc.b    $00, $00
@Hard:
	dc.b    $00, $20
	dc.l    @LetsTry
	dc.b    $00, $40
	dc.l    @HardestLevel
	dc.b	$00, $D0
	dc.l    @Copyright
	dc.b    $00, $00
@Normal:
	dc.b    $00, $20
	dc.l    @LetsTry
	dc.b    $00, $40
	dc.l    @HardLevel
	dc.b    $00, $D0
	dc.l    @Copyright
	dc.b    $00, $00
@Easy:
	dc.b    $00, $20
	dc.l    @LetsTry
	dc.b    $00, $40
	dc.l    @NormalLevel
	dc.b    $00, $D0
	dc.l    @Copyright
	dc.b    $00, $00
@ThankYou:
	dc.b    $00, $C8, $00, $08, $3C, $24, $16, $30, $2A, $00, $46, $32, $3E, $00
@ForYourPlaying:
	dc.b    $01, $00 ;0x40
	dc.b	$00, $0F, $20, $32, $38, $00, $46, $32, $3E, $38, $00, $34, $2C, $16, $46, $26, $30, $22, $4A, $00
@Copyright:
	dc.b    $00, $D8, $00, $12, $6C, $6E, $3A, $1E, $22, $16, $4E, $1A ;0x60
	dc.b	$32, $2E, $34, $26, $2C, $1E, $00, $66, $6A, $6A, $68, $00
@LetsTry:
	dc.b    $00, $FC, $00, $08, $2C, $1E, $3C, $72, $3A, $00, $3C, $38, $46, $00
@HardestLevel:
	dc.b    $00, $E8, $00, $0D, $24, $16 ;0x80
	dc.b	$38, $1C, $1E, $3A, $3C, $00, $2C, $1E, $40, $1E, $2C, $74
@HardLevel:
	dc.b    $00, $F4, $00, $0A, $24, $16, $38, $1C, $00, $2C, $1E, $40, $1E, $2C, $74, $00
@NormalLevel:
	dc.b    $00, $EC, $00, $0C ;0xA0
	dc.b	$30, $32, $38, $2E, $16, $2C, $00, $2C, $1E, $40, $1E, $2C, $74, $00
StaffCredits_TextTbl:
    dc.b    $01
    dc.b    $E0
    dc.l    loc_0000AF6E
    dc.b    $00
    dc.b    $20
    dc.l    loc_0000AF78
    dc.b    $01
    dc.b    $60
    dc.l    loc_0000B010
    dc.b    $00
    dc.b    $20
    dc.l    loc_0000AF84
    dc.b    $01
    dc.b    $60
    dc.l    loc_0000B020
    dc.b    $00
    dc.b    $20
    dc.l    loc_0000AF90
    dc.b    $01
    dc.b    $60
    dc.l    loc_0000B030
    dc.b    $00
    dc.b    $20
    dc.l    loc_0000AF9C
    dc.b    $01
    dc.b    $60
    dc.l    loc_0000B030
    dc.b    $00
    dc.b    $40
    dc.l    loc_0000AFB0
    dc.b    $00
    dc.b    $80
    dc.l    loc_0000B03E
    dc.b    $00
    dc.b    $80
    dc.l    loc_0000B050
    dc.b    $00
    dc.b    $80
    dc.l    loc_0000B05A
    dc.b    $00
    dc.b    $80
    dc.l    loc_0000B068
    dc.b    $01
    dc.b    $60
    dc.l    loc_0000B080
    dc.b    $00
    dc.b    $20
    dc.l    loc_0000AFC2
    dc.b    $01
    dc.b    $60
    dc.l    loc_0000B090
    dc.b    $00
    dc.b    $20
    dc.l    loc_0000AFCE
    dc.b    $01
    dc.b    $60
    dc.l    loc_0000B0A0
    dc.b    $00
    dc.b    $40
    dc.l    loc_0000AFDE
    dc.b    $00
    dc.b    $80
    dc.l    loc_0000B0B2
    dc.b    $01
    dc.b    $60
    dc.l    loc_0000B0C8
    dc.b    $00
    dc.b    $40
    dc.l    loc_0000AFE8
    dc.b    $00
    dc.b    $80
    dc.l    loc_0000B0DA
    dc.b    $01
    dc.b    $60
    dc.l    loc_0000B068
    dc.b    $00
    dc.b    $20
    dc.l    loc_0000AFFA
    dc.b    $02
    dc.b    $80
    dc.l    loc_0000B0E2
    dc.b    $80
    dc.b    $00
loc_0000AF6E:
    dc.b    $01
    dc.b    $0C
    dc.b    $00
    dc.b    $05
    dc.b    $3A
    dc.b    $3C
    dc.b    $16
    dc.b    $20
    dc.b    $20
    dc.b    $00
loc_0000AF78:
	dc.b    $00, $C0, $00
    dc.b    $08
    dc.b    $34
    dc.b    $38
    dc.b    $32
    dc.b    $1C
    dc.b    $3E
    dc.b    $1A
    dc.b    $1E
    dc.b    $38
loc_0000AF84:
    dc.b    $00
    dc.b    $C0
    dc.b    $00
    dc.b    $08
    dc.b    $1C
    dc.b    $26
    dc.b    $38
    dc.b    $1E
    dc.b    $1A
    dc.b    $3C
    dc.b    $32
    dc.b    $38
loc_0000AF90:
    dc.b    $00
    dc.b    $C0
    dc.b    $00
    dc.b    $08
    dc.b    $3A
    dc.b    $1A
    dc.b    $1E
    dc.b    $30
    dc.b    $16
    dc.b    $38
    dc.b    $26
    dc.b    $32
loc_0000AF9C:
    dc.b    $00
    dc.b    $C0
    dc.b    $00
    dc.b    $0F
    dc.b    $1A
    dc.b    $24
    dc.b    $16
    dc.b    $38
    dc.b    $16
    dc.b    $1A
    dc.b    $3C
    dc.b    $1E
    dc.b    $38
    dc.b    $00
    dc.b    $1C
    dc.b    $1E
    dc.b    $3A
    dc.b    $26
    dc.b    $22
    dc.b    $30
loc_0000AFB0:
    dc.b    $00
    dc.b    $C0
    dc.b    $00
    dc.b    $0D
    dc.b    $22
    dc.b    $38
    dc.b    $16
    dc.b    $34
    dc.b    $24
    dc.b    $26
    dc.b    $1A
    dc.b    $00
    dc.b    $1C
    dc.b    $1E
    dc.b    $3A
    dc.b    $26
    dc.b    $22
    dc.b    $30
loc_0000AFC2:
    dc.b    $00
    dc.b    $C0
    dc.b    $00
    dc.b    $07
    dc.b    $34
    dc.b    $38
    dc.b    $32
    dc.b    $22
    dc.b    $38
    dc.b    $16
    dc.b    $2E
    dc.b    $00
loc_0000AFCE:
	dc.b    $00, $C0, $00
    dc.b    $0B
    dc.b    $3A
    dc.b    $32
    dc.b    $3E
    dc.b    $30
    dc.b    $1C
    dc.b    $00
    dc.b    $1C
    dc.b    $38
    dc.b    $26
    dc.b    $40
    dc.b    $1E
    dc.b    $38
loc_0000AFDE:
    dc.b    $00
    dc.b    $C0
    dc.b    $00
    dc.b    $06
    dc.b    $18
    dc.b    $22
    dc.b    $2E
    dc.b    $70
    dc.b    $3A
    dc.b    $1E
loc_0000AFE8:
    dc.b    $00
    dc.b    $C0
    dc.b    $00
    dc.b    $0E
    dc.b    $34
    dc.b    $16
    dc.b    $1A
    dc.b    $2A
    dc.b    $16
    dc.b    $22
    dc.b    $1E
    dc.b    $70
    dc.b    $2E
    dc.b    $16
    dc.b    $30
    dc.b    $3E
    dc.b    $16
    dc.b    $2C
loc_0000AFFA:
    dc.b    $00
    dc.b    $B0
    dc.b    $00
    dc.b    $0F
    dc.b    $3A
    dc.b    $34
    dc.b    $1E
    dc.b    $1A
    dc.b    $26
    dc.b    $16
    dc.b    $2C
    dc.b    $00
    dc.b    $3C
    dc.b    $24
    dc.b    $16
    dc.b    $30
    dc.b    $2A
    dc.b    $3A
    dc.b    $00
    dc.b    $3C
    dc.b    $32
    dc.b    $00
loc_0000B010:
    dc.b    $01
    dc.b    $20
    dc.b    $00
    dc.b    $0A
    dc.b    $2E
    dc.b    $32
    dc.b    $32
    dc.b    $00
    dc.b    $30
    dc.b    $26
    dc.b    $26
    dc.b    $3C
    dc.b    $16
    dc.b    $30
    dc.b    $26
    dc.b    $00
loc_0000B020:
    dc.b    $01
    dc.b    $20
    dc.b    $00
    dc.b    $0B
    dc.b    $2E
    dc.b    $70
    dc.b    $3C
    dc.b    $3A
    dc.b    $3E
    dc.b    $2A
    dc.b    $16
    dc.b    $2E
    dc.b    $32
    dc.b    $3C
    dc.b    $32
    dc.b    $00
loc_0000B030:
    dc.b    $01
    dc.b    $20
    dc.b    $00
    dc.b    $09
    dc.b    $24
    dc.b    $46
    dc.b    $32
    dc.b    $24
    dc.b    $28
    dc.b    $3E
    dc.b    $00
    dc.b    $2E
    dc.b    $3E
    dc.b    $5C
loc_0000B03E:
    dc.b    $01
    dc.b    $20
    dc.b    $00
    dc.b    $0D
    dc.b    $28
    dc.b    $16
    dc.b    $30
    dc.b    $3E
    dc.b    $3A
    dc.b    $00
    dc.b    $3C
    dc.b    $1E
    dc.b    $38
    dc.b    $16
    dc.b    $2E
    dc.b    $32
    dc.b    $3C
    dc.b    $32
loc_0000B050:
    dc.b    $01
    dc.b    $20
    dc.b    $00
    dc.b    $05
    dc.b    $2A
    dc.b    $1E
    dc.b    $38
    dc.b    $32
    dc.b    $2C
    dc.b    $00
loc_0000B05A:
    dc.b    $01
    dc.b    $20
    dc.b    $00
    dc.b    $09
    dc.b    $30
    dc.b    $1E
    dc.b    $2A
    dc.b    $32
    dc.b    $5C
    dc.b    $30
    dc.b    $46
    dc.b    $16
    dc.b    $30
    dc.b    $00
loc_0000B068:
    dc.b    $01
    dc.b    $20
    dc.b    $00
    dc.b    $12
    dc.b    $3C
    dc.b    $32
    dc.b    $2A
    dc.b    $26
    dc.b    $20
    dc.b    $3E
    dc.b    $38
    dc.b    $3E
    dc.b    $00
    dc.b    $2E
    dc.b    $32
    dc.b    $38
    dc.b    $26
    dc.b    $3C
    dc.b    $16
    dc.b    $54
    dc.b    $68
    dc.b    $66
    dc.b    $56
    dc.b    $00
loc_0000B080:
    dc.b    $01
    dc.b    $20
    dc.b    $00
    dc.b    $0C
    dc.b    $3A
    dc.b    $32
    dc.b    $30
    dc.b    $1A
    dc.b    $24
    dc.b    $32
    dc.b    $24
    dc.b    $5C
    dc.b    $3A
    dc.b    $16
    dc.b    $42
    dc.b    $16
loc_0000B090:
    dc.b    $01
    dc.b    $20
    dc.b    $00
    dc.b    $0B
    dc.b    $2A
    dc.b    $70
    dc.b    $46
    dc.b    $32
    dc.b    $3A
    dc.b    $24
    dc.b    $26
    dc.b    $30
    dc.b    $16
    dc.b    $2A
    dc.b    $16
    dc.b    $00
loc_0000B0A0:
    dc.b    $01
    dc.b    $20
    dc.b    $00
    dc.b    $0C
    dc.b    $28
    dc.b    $1E
    dc.b    $2E
    dc.b    $26
    dc.b    $30
    dc.b    $26
    dc.b    $00
    dc.b    $24
    dc.b    $26
    dc.b    $38
    dc.b    $32
    dc.b    $30
    dc.b    $32
    dc.b    $00
loc_0000B0B2:
    dc.b    $01
    dc.b    $20
    dc.b    $00
    dc.b    $11
    dc.b    $2E
    dc.b    $70
    dc.b    $3C
    dc.b    $3A
    dc.b    $3E
    dc.b    $2A
    dc.b    $16
    dc.b    $2E
    dc.b    $32
    dc.b    $3C
    dc.b    $32
    dc.b    $54
    dc.b    $2E
    dc.b    $16
    dc.b    $3C
    dc.b    $3A
    dc.b    $56
    dc.b    $00
loc_0000B0C8:
    dc.b    $01
    dc.b    $20
    dc.b    $00
    dc.b    $0D
    dc.b    $1E
    dc.b    $26
    dc.b    $30
    dc.b    $32
    dc.b    $3A
    dc.b    $3E
    dc.b    $2A
    dc.b    $1E
    dc.b    $00
    dc.b    $30
    dc.b    $16
    dc.b    $22
    dc.b    $16
    dc.b    $32
loc_0000B0DA:
    dc.b    $01
    dc.b    $20
    dc.b    $00
    dc.b    $04
    dc.b    $26
    dc.b    $1A
    dc.b    $24
    dc.b    $26
loc_0000B0E2:
    dc.b    $01
    dc.b    $20
    dc.b    $00
    dc.b    $0E
    dc.b    $16
    dc.b    $2C
    dc.b    $2C
    dc.b    $00
    dc.b    $32
    dc.b    $3E
    dc.b    $38
    dc.b    $00
    dc.b    $20
    dc.b    $1E
    dc.b    $2C
    dc.b    $2C
    dc.b    $32
    dc.b    $42
    dc.b    $3A
    dc.b    $4A

; ---------- File Start: game/main_menu.asm ----------
; This contains almost all code relating to how the game's main menu works.
MenuScreen_Init:
	MOVE.b	#2, D0
	MOVE.b	#0, D1
	MOVE.b	#2, D2
	LEA	palLookupTable, A2
	ADDA.l	#(pal_general-palLookupTable), A2
	JSR	loc_00000E28
	LEA	MenuScreen_MainObjInit, A1
	JSR	ObjSys_InitObjWithFunc
	BCC.w	@ObjectCreateSuccess
	RTS
@ObjectCreateSuccess:
	MOVE.b	#$80, $6(A1)
	MOVE.b	#6, $8(A1)
	MOVE.b	#$0C, $9(A1)
	MOVE.w	#$00D6, $A(A1)
	MOVE.b	$00FF0105, $27(A1)
	MOVE.l	#MenuScreen_MenuPuyoAnim, $32(A1)
	BRA.w	MenuScreen_InitCloudScroll
	
MenuScreen_UpdateBGMapMenuSel:
	MOVE.w	$26(A0), D0
	ADDI.w	#$000C, D0
	JMP	Video_QueueBgMapFromId
	
MenuScreen_MainObjInit:
	MOVE.w	#$0100, D4
	MOVE.w	#$D922, D5
	MOVE.w	#$8500, D6
	MOVE.w	#$0280, $28(A0)
	BSR.b	MenuScreen_UpdateBGMapMenuSel
	JSR	ObjSys_UpdateObjNextOpTimer
	BSR.w	loc_0000B1CC
	JSR	ObjSys_UpdateObjAnim
	BSR.w	GetMainControllerHeld
	MOVE.b	D0, D1
	ANDI.b	#$F0, D0
	BNE.w	MenuScreen_PressedABCStart
	BTST.l	#btn_Up, D1
	BNE.w	@PressedUp
	BTST.l	#btn_Down, D1
	BNE.w	@PressedDown
	RTS
@PressedUp:
	TST.w	$26(A0)
	BEQ.w	@BoundsCheckAtEnd
	SUBQ.w	#1, $26(A0)
	BRA.w	@PlayChangeSelection
@PressedDown:
	CMPI.w	#3, $26(A0)
	BCC.w	@BoundsCheckAtEnd
	ADDQ.w	#1, $26(A0)
@PlayChangeSelection:
	MOVE.b	#sfxID_ChangeSelection, D0
	BSR.w	SndDrv_QueueSoundEffect
@BoundsCheckAtEnd:
	BRA.b	MenuScreen_UpdateBGMapMenuSel
	
loc_0000B1CC:
	MOVE.w	$26(A0), D0
	MULU.w	#$0018, D0
	ADDI.w	#$00D8, D0
	MOVE.w	D0, $E(A0)
	RTS
	
MenuScreen_PressedABCStart:
	BSR.w	MenuScreen_Check2PController
	BCC.w	@2PlayerNotDisabled
	MOVE.b	#sfxID_MinorGarbagePuyoFall2, D0
	JMP	SndDrv_QueueSoundEffect
@2PlayerNotDisabled:
	MOVE.b	$27(A0), $00FF0105
	MOVE.b	#sfxID_ConfirmSelection, D0
	BSR.w	SndDrv_QueueSoundEffect
	CLR.w	$28(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.w	#$0010, $28(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.w	$28(A0), D0
	ROR.b	#2, D0
	ANDI.b	#$80, D0
	MOVE.b	D0, $6(A0)
	SUBQ.w	#1, $28(A0)
	BEQ.w	@DelayTimerDone
	RTS
@DelayTimerDone:
	MOVE.w	$26(A0), D0
	MOVE.b	@BcReturnTbl(PC,D0.w), D1
	MOVE.b	D1, rCurGameMode
	MOVE.b	D1, rBytecode_Ret
	BEQ.w	MenuScreen_InitDifficultySel
	CMPI.b	#3, D1
	BEQ.w	@IsOptions
	CLR.b	rCurMainPlayer
@IsOptions:
	CLR.b	rBytecode_StopRun
	JMP	ObjSys_DeleteObjectA0
@BcReturnTbl:
	dc.b 	$00, $01, $02, $03, $04
	even
MenuScreen_MenuPuyoAnim:
	dc.b	$08
	dc.b	$0C 
	dc.b	$08
	dc.b	$0D 
	dc.b	$FF
	dc.b	$00 
	dc.l	MenuScreen_MenuPuyoAnim
	
MenuScreen_Check2PController:
	CMPI.w	#1, $26(A0)
	BNE.w	@CheckPass
	BSR.w	@CheckControllers
	TST.b	D0
	BEQ.w	@CheckPass
	ORI	#1, SR
	RTS
@CheckPass:
	ANDI	#$FFFE, SR
	RTS
	
@CheckControllers:
	ORI	#$0700, SR
	MOVE.w	#$0100, Z80BusReq
@WaitForZ80Halt:
	BTST.b	#0, Z80BusReq
	BNE.b	@WaitForZ80Halt
	BSR.w	@StartControllerCheck
	MOVE.w	#0, Z80BusReq
	ANDI	#$F8FF, SR
	RTS
	
@StartControllerCheck:
	LEA	padData1, A1
	BSR.w	@CheckController
	LEA	padData2, A1
	MOVEM.l	D0, -(A7)
	BSR.w	@CheckController
	MOVEM.l	(A7)+, D1
	OR.b	D1, D0
	RTS
@CheckController:
	MOVE.b	#0, (A1)
	NOP
	NOP
	MOVE.b	(A1), D0
	ANDI.b	#$0F, D0
	MOVE.b	#$40, (A1)
	NOP
	NOP
	MOVE.b	(A1), D1
	LSL.b	#4, D1
	ANDI.b	#$F0, D1
	OR.b	D1, D0
	; D0 now contains RLDU00DU
	MOVEQ	#0, D1
	MOVE.w	#3, D2
@CheckLoop:
	LSL.b	#1, D1
	MOVEM.l	D0, -(A7)
	ANDI.b	#$C0, D0
	BEQ.w	@BothBitsZero
	ORI.b	#1, D1
@BothBitsZero:
	MOVEM.l	(A7)+, D0
	LSL.b	#2, D0
	DBF	D2, @CheckLoop
	MOVE.b	#0, D0
	; By the time we get here, D1 should contain 0D if the controller is plugged in.
	CMPI.b	#$0D, D1
	BEQ.w	@ControllerPluggedIn
	; Controller not plugged in.
	MOVE.b	#$FF, D0
@ControllerPluggedIn:
	RTS
	
MenuScreen_InitCloudScroll:
	LEA	@CloudScrollUpdate, A1
	JMP	ObjSys_InitObjWithFunc
@CloudScrollUpdate:
	ADDQ.w	#1, $26(A0)
	MOVE.w	$26(A0), D1
	MOVE.w	#$006F, D0
	LEA	rScrollXScanBack, A1
@Loop:
	MOVE.w	D1, (A1)+
	ADDQ.w	#2, A1
	DBF	D0, @Loop
	RTS
	
MenuScreen_InitDifficultySel:
	MOVE.w	#$9501, D0
	SWAP	D0
	JSR	Video_QueueBgMapSpecial
	MOVE.w	#$0028, $26(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.w	#$00B7, D0
	LEA	$00FF0662, A1
@UpdateScroll:
	SUBQ.w	#8, (A1)+
	ADDQ.w	#2, A1
	DBF	D0, @UpdateScroll
	SUBQ.w	#1, $26(A0)
	BEQ.w	@ScrollDone
	RTS
	
@ScrollDone:
	MOVE.w	#$0100, D4
	MOVE.w	#$D922, D5
	MOVE.w	#$8500, D6
	MOVE.w	#$0280, $28(A0)
	BSR.w	Menu_LoadEasyMessage
	MOVE.b	#1, $27(A0)
	CLR.b	$2A(A0)
loc_0000B3A8:
	JSR	ObjSys_UpdateObjNextOpTimer
	BSR.w	loc_0000B460
	ADDQ.b	#1, $2A(A0)
	BSR.w	GetMainControllerHeld
	ANDI.b	#$F0, D0
	BNE.w	@ABCStartPressed
	BSR.w	GetMainControllerHeld
	BTST.l	#btn_Left, D0
	BNE.w	@LeftPressed
	BTST.l	#btn_Right, D0
	BNE.w	@RightPressed
	RTS
@LeftPressed:
	TST.w	$26(A0)
	BEQ.w	@BoundsCheckAtEdge
	SUBQ.w	#1, $26(A0)	
	BRA.w	@Part2
@RightPressed:
	CMPI.w	#2, $26(A0)
	BCC.w	@BoundsCheckAtEdge
	ADDQ.w	#1, $26(A0)
@Part2:
	MOVE.b	#sfxID_ChangeSelection, D0
	BSR.w	SndDrv_QueueSoundEffect
	CLR.b	$2A(A0)
	BRA.b	loc_0000B3A8
@BoundsCheckAtEdge:
	RTS
	
@ABCStartPressed:
	MOVE.b	#sfxID_ConfirmSelection, D0
	BSR.w	SndDrv_QueueSoundEffect
	CLR.w	$28(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.w	#$0010, $28(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.w	$26(A0), D1 ; Reads the value of the selection for 1 Player
	MOVE.w	$28(A0), D0
	ANDI.b	#1, D0
	BEQ.w	@loc_0000B438
	MOVE.w	#3, D1
@loc_0000B438:
	BSR.w	loc_0000B4A0
	SUBQ.w	#1, $28(A0)
	BEQ.w	@TimerDone
	RTS
@TimerDone:
	MOVE.b	$27(A0), $00FF0114
	BSR.w	Menu_LoadDefeatedEnemies
	CLR.b	rBytecode_StopRun
	JSR	ObjSys_UpdateObjNextOpTimer
	RTS

loc_0000B460:
	MOVE.b	$2A(A0), D0
	ANDI.b	#$0F, D0
	BEQ.w	loc_0000B46E
	RTS
loc_0000B46E:
	MOVE.w	#3, D1
	BTST.b	#4, $2A(A0)
	MOVE.w	$26(A0), D0
	CLR.w	D1
	LEA	Menu_StageSelectTbl, A1
	MOVE.b	(A1,D0.w), D1
	MOVE.b	D1, rOnePlayer_CurStage
	LEA	tbl_cutsceneOrder, A1
	MOVE.b	(A1,D1.w), rOnePlayer_CurCutscene
	MOVE.w	$26(A0), D1
loc_0000B4A0:
	MOVE.w	#$9500, D0
	MOVE.b	loc_0000B4B0(PC,D1.w), D0
	SWAP	D0
	JMP	Video_QueueBgMapSpecial
loc_0000B4B0:
	dc.b	$02
	dc.b	$01
	dc.b	$00
	dc.b	$03
	
Menu_LoadDefeatedEnemies:
	MOVE.w	$26(A0), D0
	LSL.w	#4, D0
	LEA	@DefeatedEnemyPresetTbl, A1
	ADDA.w	D0, A1
	LEA	rOnePlayer_DefeatedEnemyTbl, A2
	MOVE.w	#$000F, D0
@Loop:
	MOVE.b	(A1)+, (A2)+
	DBF	D0, @Loop
	RTS
@DefeatedEnemyPresetTbl:
	dc.b	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00 
	dc.b	$FF, $00, $00, $00, $FF, $00, $00, $00, $00, $00, $00, $00, $00, $FF, $00, $00 
	dc.b	$FF, $FF, $00, $FF, $FF, $00, $00, $00, $00, $00, $00, $00, $00, $FF, $FF, $00 
	
Menu_LoadEasyMessage:
	LEA	@EasyMessageUpdate, A1
	JSR	ObjSys_InitObjWithFunc
	BCS.w	@ObjectLoadFailed
	MOVE.l	A0, $2E(A1)
	MOVE.b	#6, $8(A1)
	MOVE.b	#4, $9(A1)
	MOVE.w	#$00A0, $A(A1)
@ObjectLoadFailed:
	RTS
@EasyMessageUpdate:
	MOVEA.l	$2E(A0), A1
	TST.w	$26(A1)
	BEQ.w	@MenuHoverEasy
	MOVE.b	#0, $6(A0)
	RTS
@MenuHoverEasy:
	MOVE.b	#$80, $6(A0)
	MOVE.b	$36(A0), D0
	ORI.b	#$80, D0
	MOVE.w	#$0400, D1
	JSR	SignedSinWithMul
	SWAP	D2
	ADDI.w	#$0118, D2
	MOVE.w	D2, $E(A0)
	ADDQ.b	#6, $36(A0)
	RTS
; ---------- File End: game/main_menu.asm ----------
	
loc_0000B568:
	LEA	loc_0000B5CC, A1
	JSR	ObjSys_InitObjWithFunc
	BCC.w	loc_0000B57A
	RTS
loc_0000B57A:
	MOVE.l	A0, $2E(A1)
	MOVE.b	#3, $7(A0)
	MOVE.w	D0, $A(A1)
	MOVE.b	$2A(A0), $2A(A1)
	MOVE.w	#$0780, $28(A1)
	MOVEM.l	A0/D0, -(A7)
	MOVEA.l	A1, A0
	MOVE.w	#$0080, D4
	CLR.w	D0
	MOVE.b	rCurMainPlayer, D0
	LSL.b	#1, D0
	OR.b	$2A(A0), D0
	LSL.w	#2, D0
	MOVE.w	loc_0000B5BC(PC,D0.w), D5
	MOVE.w	loc_0000B5BE(PC,D0.w), D6
	MOVEM.l	(A7)+, D0/A0
	RTS
loc_0000B5BC:
	dc.w	$CC0A
loc_0000B5BE:
	dc.w 	$8500, $CC3A, $A500, $CC3A, $8500, $CC0A, $A500
loc_0000B5CC:
	BSR.w	loc_00005022
	MOVE.w	D0, D5
	ADDI.w	#$0606, D5
	LEA	loc_0000B718, A1
	BSR.w	loc_0000B792
	MOVE.b	$B(A0), D0
	ADDI.b	#$21, D0
	BSR.w	loc_0000B7AA
	BSR.w	loc_00005022
	MOVE.w	D0, D5
	ADDI.w	#$0702, D5
	LEA	loc_0000B71E, A1
	BSR.w	loc_0000B792
	MOVE.b	#sfxID_69, D0
	BSR.w	SndDrv_QueueSoundEffect
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.w	#4, D0
loc_0000B612:
	MOVE.b	#1, $12(A0,D0.w)
	DBF	D0, loc_0000B612
	JSR	ObjSys_UpdateObjNextOpTimer
	CLR.b	D0
	BSR.w	loc_0000B72A
	ADDQ.b	#1, $26(A0)
	BSR.w	loc_00004C0A
	BTST.l	#2, D0
	BNE.w	loc_0000B6A4
	ANDI.b	#$70, D0
	BNE.w	loc_0000B68C
	BTST.l	#1, D1
	BNE.w	loc_0000B652
	BTST.l	#0, D1
	BNE.w	loc_0000B66E
	RTS
loc_0000B652:
	MOVE.w	$E(A0), D0
	ADDQ.b	#1, $12(A0,D0.w)
	CMPI.b	#$1B, $12(A0,D0.w)
	BCS.w	loc_0000B680
	MOVE.b	#0, $12(A0,D0.w)
	BRA.w	loc_0000B680
loc_0000B66E:
	MOVE.w	$E(A0), D0
	SUBQ.b	#1, $12(A0,D0.w)
	BPL.w	loc_0000B680
	MOVE.b	#$1A, $12(A0,D0.w)
loc_0000B680:
	CLR.b	$26(A0)
	MOVE.b	#sfxID_ChangeSelection, D0
	BRA.w	SndDrv_QueueSoundEffect
loc_0000B68C:
	ADDQ.w	#1, $E(A0)
	MOVE.b	#sfxID_ConfirmSelection, D0
	BSR.w	SndDrv_QueueSoundEffect
	CMPI.w	#3, $E(A0)
	BCC.w	loc_0000B6BA
	RTS
loc_0000B6A4:
	TST.w	$E(A0)
	BNE.w	loc_0000B6AE
	RTS
loc_0000B6AE:
	SUBQ.w	#1, $E(A0)
	MOVE.b	#sfxID_ChangeSelection, D0
	BRA.w	SndDrv_QueueSoundEffect
loc_0000B6BA:
	MOVE.w	$A(A0), D0
	BSR.w	loc_0000BBF4
	MOVEA.l	$2E(A0), A2
loc_0000B6C6:
	MOVE.l	$6(A1), D1
	CMP.l	$A(A2), D1
	BEQ.w	loc_0000B6E8
	ADDA.l	#$00000010, A1
	ADDQ.w	#1, $A(A0)
	CMPI.w	#5, $A(A0)
	BCS.b	loc_0000B6C6
	BRA.w	loc_0000B6EC
loc_0000B6E8:
	BSR.w	loc_0000B9E2
loc_0000B6EC:
	CLR.w	$28(A0)
	MOVE.w	#$0020, D0
	JSR	ObjSys_SetObjNextOpTimer
	MOVE.b	$25(A0), D0
	BSR.w	loc_0000B72A
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVEA.l	$2E(A0), A1
	BCLR.b	#1, $7(A1)
	JMP	ObjSys_DeleteObjectA0
loc_0000B718:
	dc.b	$12, $01, $0E, $0B, $00, $FF 
loc_0000B71E:
	dc.b	$19, $0F, $15, $12, $00, $0E, $01, $0D, $05, $1B, $FF 
	dc.b	$00 
loc_0000B72A:
	MOVEM.l	D0, -(A7)
	BSR.w	loc_00005022
	MOVE.w	D0, D5
	ADDI.w	#$0888, D5
	MOVEM.l	(A7)+, D2
	CLR.w	D1
loc_0000B73E:
	MOVE.b	$12(A0,D1.w), D0
	BSR.w	loc_0000B76A
	BTST.l	#0, D2
	BEQ.w	loc_0000B750
	CLR.b	D0
loc_0000B750:
	MOVEM.l	D2/D1, -(A7)
	BSR.w	loc_0000B7AA
	MOVEM.l	(A7)+, D1/D2
	SUBI.w	#$007E, D5
	ADDQ.w	#1, D1
	CMPI.w	#3, D1
	BCS.b	loc_0000B73E
	RTS
loc_0000B76A:
	CMP.w	$E(A0), D1
	BCC.w	loc_0000B774
	RTS
loc_0000B774:
	BEQ.w	loc_0000B77E
	MOVE.b	#$1C, D0
	RTS
loc_0000B77E:
	MOVE.b	$26(A0), D3
	LSR.b	#3, D3
	ANDI.b	#1, D3
	EORI.b	#1, D3
	NEG.b	D3
	AND.b	D3, D0
	RTS
loc_0000B792:
	MOVE.b	(A1)+, D0
	BMI.w	loc_0000B7A8
	MOVEM.l	D5, -(A7)
	BSR.w	loc_0000B7AA
	MOVEM.l	(A7)+, D5
	ADDQ.w	#2, D5
	BRA.b	loc_0000B792
loc_0000B7A8:
	RTS
loc_0000B7AA:
	MOVE.w	#$C500, D1
	MOVE.w	D1, D2
	TST.b	D0
	BEQ.w	loc_0000B7C6
	ADDI.b	#$3F, D0
	CMPI.b	#$5F, D0
	BCS.w	loc_0000B7C6
	SUBI.b	#$29, D0
loc_0000B7C6:
	LSL.b	#1, D0
	MOVE.b	D0, D1
	MOVE.b	D0, D2
	ADDQ.b	#1, D2
	CMPI.b	#$B6, D1
	BNE.w	loc_0000B7E8
	MOVE.b	D1, D2
	CLR.b	D1
	MOVE.b	$00FF05C7, D0
	LSR.b	#3, D0
	ANDI.b	#1, D0
	OR.b	D0, D2
loc_0000B7E8:
	ORI	#$0700, SR
	JSR	Video_SetVRAMAddressWrite
	ADDI.w	#$0080, D5
	MOVE.w	D1, vdpData1
	JSR	Video_SetVRAMAddressWrite
	MOVE.w	D2, vdpData1
	ANDI	#$F8FF, SR
	RTS
loc_0000B80E:
	LEA	loc_0000B84C, A1
	JSR	ObjSys_InitObjWithFunc
	BCC.w	loc_0000B820
	RTS
loc_0000B820:
	MOVE.l	A0, $2E(A1)
	MOVE.b	#$FF, $7(A0)
	MOVE.w	D0, $A(A1)
	MOVE.w	#$0780, $28(A1)
	MOVEM.l	A0, -(A7)
	MOVEA.l	A1, A0
	MOVE.w	#$0100, D4
	MOVE.w	#$C80C, D5
	MOVE.w	#$C500, D6
	MOVEM.l	(A7)+, A0
	RTS
loc_0000B84C:
	MOVE.b	#$FF, $7(A0)
	BSR.w	loc_0000BA7C
	MOVE.w	#4, D0
loc_0000B85A:
	MOVE.b	#1, $12(A0,D0.w)
	DBF	D0, loc_0000B85A
loc_0000B864:
	MOVE.l	#loc_0000B99E, $32(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	JSR	ObjSys_UpdateObjAnim
	BCS.w	loc_0000B880
	BRA.w	loc_0000B9B2
loc_0000B880:
	JSR	ObjSys_UpdateObjNextOpTimer
	ADDQ.b	#1, $26(A0)
	MOVE.b	rPad1Press, D0
	OR.b	rPad2Press, D0
	BTST.l	#2, D0
	BNE.w	loc_0000B936
	ANDI.b	#$70, D0
	BNE.w	loc_0000B912
	MOVE.b	$00FF110C, D0
	OR.b	$00FF1112, D0
	BTST.l	#1, D0
	BNE.w	loc_0000B8D8
	BTST.l	#0, D0
	BNE.w	loc_0000B8F4
	MOVE.b	$26(A0), D0
	LSL.b	#1, D0
	ANDI.b	#$20, D0
	ORI.b	#$80, D0
	MOVE.b	D0, $9(A0)
	BRA.w	loc_0000B9B2
loc_0000B8D8:
	MOVE.w	$E(A0), D0
	ADDQ.b	#1, $12(A0,D0.w)
	CMPI.b	#$1C, $12(A0,D0.w)
	BCS.w	loc_0000B906
	MOVE.b	#0, $12(A0,D0.w)
	BRA.w	loc_0000B906
loc_0000B8F4:
	MOVE.w	$E(A0), D0
	SUBQ.b	#1, $12(A0,D0.w)
	BPL.w	loc_0000B906
	; See build_flags.asm for more details
	if fFixBestRecordWrap == 1
		MOVE.b	#$1B, $12(A0,D0.w)
	else
		MOVE.b	#$1C, $12(A0,D0.w)
	endif
loc_0000B906:
	CLR.b	$26(A0)
	MOVE.b	#sfxID_ChangeSelection, D0
	BRA.w	SndDrv_QueueSoundEffect
loc_0000B912:
	MOVE.b	#$80, $9(A0)
	BSR.w	loc_0000B9B2
	ADDQ.w	#1, $E(A0)
	MOVE.b	#sfxID_ConfirmSelection, D0
	BSR.w	SndDrv_QueueSoundEffect
	CMPI.w	#3, $E(A0)
	BCC.w	loc_0000B96C
	BRA.w	loc_0000B864
loc_0000B936:
	TST.w	$E(A0)
	BNE.w	loc_0000B940
	RTS
loc_0000B940:
	MOVE.l	#loc_0000B9A8, $32(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	JSR	ObjSys_UpdateObjAnim
	BCS.w	loc_0000B95C
	BRA.w	loc_0000B9B2
loc_0000B95C:
	SUBQ.w	#1, $E(A0)
	MOVE.b	#sfxID_ChangeSelection, D0
	BSR.w	SndDrv_QueueSoundEffect
	BRA.w	loc_0000B864
loc_0000B96C:
	MOVE.w	$A(A0), D0
	BSR.w	loc_0000BBF4
	BSR.w	loc_0000B9E2
	CLR.b	$7(A0)
	CLR.w	$28(A0)
	MOVE.w	#$0020, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVEA.l	$2E(A0), A1
	CLR.b	$7(A1)
	JMP	ObjSys_DeleteObjectA0
loc_0000B99E:
	dc.b	$00
	dc.b	$00 
	dc.b	$03
	dc.b	$1F 
	dc.b	$03
	dc.b	$A0 
	dc.b	$02
	dc.b	$80 
	dc.b	$FE
	dc.b	$00
loc_0000B9A8:
	dc.b    $00, $80, $03, $A0, $03, $1F, $00, $00, $FE, $00 
loc_0000B9B2:
	MOVE.w	$A(A0), D0
	BSR.w	loc_0000BBF4
	MOVE.w	$E(A0), D0
	LSL.w	#2, D0
	ADD.w	D0, D5
	MOVE.w	$E(A0), D1
	MOVE.b	$12(A0,D1.w), D0
	MOVE.b	$9(A0), D1
	BMI.w	loc_0000B9D8
	MOVE.b	D1, D0
	BRA.w	loc_0000BDB6
loc_0000B9D8:
	ANDI.b	#$7F, D1
	ADD.b	D1, D0
	BRA.w	loc_0000BDB6
loc_0000B9E2:
	CLR.w	D0
loc_0000B9E4:
	MOVE.b	$12(A0,D0.w), (A1)+
	ADDQ.w	#1, D0
	CMPI.w	#3, D0
	BCS.b	loc_0000B9E4
	MOVE.b	#$FF, (A1)
	JMP	loc_0001DC02
loc_0000B9FA:
	CMPI.b	#4, $00FF1890
	BCS.w	loc_0000BA0C
	ANDI	#$FFFE, SR
	RTS
loc_0000BA0C:
	CLR.w	D0
	BSR.w	loc_0000BBF4
	MOVEA.l	A1, A2
	CLR.w	D0
loc_0000BA16:
	MOVE.l	$6(A1), D1
	CMP.l	$A(A0), D1
	BCS.w	loc_0000BA36
	ADDA.l	#$00000010, A1
	ADDQ.w	#1, D0
	CMPI.w	#5, D0
	BCS.b	loc_0000BA16
	ANDI	#$FFFE, SR
	RTS
loc_0000BA36:
	MOVEM.l	A1/D0, -(A7)
	MOVE.w	#3, D1
	SUB.w	D0, D1
	BCS.w	loc_0000BA60
	MOVEA.l	A2, A1
	ADDA.l	#$00000040, A1
	ADDA.l	#$00000050, A2
loc_0000BA52:
	MOVE.w	#7, D0
loc_0000BA56:
	MOVE.w	-(A1), -(A2)
	DBF	D0, loc_0000BA56
	DBF	D1, loc_0000BA52
loc_0000BA60:
	MOVEM.l	(A7)+, D0/A1
	MOVE.b	#$FF, $0(A1)
	MOVE.l	$A(A0), $6(A1)
	MOVE.w	$16(A0), $A(A1)
	ORI	#1, SR
	RTS
loc_0000BA7C:
	MOVE.w	$A(A0), D0
	BSR.w	loc_0000BBF4
	MOVE.w	#1, D0
	MOVE.w	#$00C8, D1
loc_0000BA8C:
	LEA	loc_0000BAC8, A1
	JSR	ObjSys_InitObjWithFunc
	BCS.w	loc_0000BABA
	MOVE.b	#3, $8(A1)
	MOVE.l	#loc_0000BAF8, $32(A1)
	MOVE.l	A0, $2E(A1)
	MOVE.w	D0, $1E(A1)
	MOVE.w	D1, $A(A1)
	MOVE.w	D4, $E(A1)
loc_0000BABA:
	ADDI.w	#$0010, D1
	ADDQ.w	#1, D0
	CMPI.w	#3, D0
	BCS.b	loc_0000BA8C
	RTS
loc_0000BAC8:
	MOVEA.l	$2E(A0), A1
	TST.b	$7(A1)
	BNE.w	loc_0000BADA
	JMP	ObjSys_DeleteObjectA0
loc_0000BADA:
	MOVE.b	#$80, $6(A0)
	MOVE.w	$E(A1), D0
	CMP.w	$1E(A0), D0
	BCS.w	loc_0000BAF2
	MOVE.b	#0, $6(A0)
loc_0000BAF2:
	JMP	ObjSys_UpdateObjAnim
loc_0000BAF8:
	dc.b	$F0
	dc.b	$00 
	dc.b	$01
	dc.b	$02 
	dc.b	$00
	dc.b	$00 
	dc.b	$02
	dc.b	$03 
	dc.b	$00
	dc.b	$00 
	dc.b	$01
	dc.b	$02 
	dc.b	$00
	dc.b	$00 
	dc.b	$02
	dc.b	$03 
	dc.b	$FF
	dc.b	$00 
	dc.l	loc_0000BAF8

; ---------- File Start: game/record_screen.asm ----------

RecordScreen_Init:
	JSR	Video_ClearScrollTables
	LEA	loc_0000BC2C, A1
	JMP	ObjSys_InitObjWithFunc
loc_0000BB20:
	MOVE.w	#4, D0
loc_0000BB24:
	MOVEM.l	D0, -(A7)
	BSR.w	loc_0000BBF4
	MOVE.b	$0(A1), $A(A0,D0.w)
	BPL.w	loc_0000BB3C
	MOVE.b	#$FF, $F(A0)
loc_0000BB3C:
	BSR.w	loc_0000BD7E
	MOVEM.l	(A7)+, D0
	DBF	D0, loc_0000BB24
	RTS
loc_0000BB4A:
	MOVE.w	#4, D0
loc_0000BB4E:
	MOVEM.l	D0, -(A7)
	BSR.w	loc_0000BBF4
	MOVE.l	$6(A1), D2
	JSR	loc_0001575C
	ADDI.w	#$0016, D5
	MOVE.w	#7, D3
	LEA	$00FF18A0, A1
	BSR.w	loc_0000BBB0
	MOVEM.l	(A7)+, D0
	DBF	D0, loc_0000BB4E
	RTS
loc_0000BB7C:
	MOVE.w	#4, D0
loc_0000BB80:
	MOVEM.l	D0, -(A7)
	BSR.w	loc_0000BBF4
	CLR.l	D2
	MOVE.w	$A(A1), D2
	JSR	loc_0001575C
	ADDI.w	#$0030, D5
	MOVE.w	#4, D3
	LEA	$00FF18A3, A1
	BSR.w	loc_0000BBB0
	MOVEM.l	(A7)+, D0
	DBF	D0, loc_0000BB80
	RTS
loc_0000BBB0:
	CLR.b	D1
	ORI	#$0700, SR
loc_0000BBB6:
	MOVE.w	#$A500, D0
	MOVE.b	(A1)+, D0
	BEQ.w	loc_0000BBC4
	MOVE.b	#1, D1
loc_0000BBC4:
	ADD.b	D1, D0
	LSL.b	#1, D0
	JSR	Video_SetVRAMAddressWrite
	ADDI.w	#$0100, D5
	MOVE.w	D0, vdpData1
	ADDQ.b	#1, D0
	JSR	Video_SetVRAMAddressWrite
	SUBI.w	#$00FE, D5
	MOVE.w	D0, vdpData1
	DBF	D3, loc_0000BBB6
	ANDI	#$F8FF, SR
	RTS
loc_0000BBF4:
	MOVEM.l	D2/D1, -(A7)
	LEA	$00FFFC04, A1
	MOVE.w	D0, D1
	LSL.w	#4, D1
	CLR.w	D2
	MOVE.b	$00FF1890, D2
	MULU.w	#$0050, D2
	ADD.w	D1, D2
	ADDA.l	D2, A1
	MOVE.w	D0, D5
	MULU.w	#$0300, D5
	ADDI.w	#$CA0C, D5
	MOVE.w	D0, D4
	MULU.w	#$0018, D4
	ADDI.w	#$00D8, D4
	MOVEM.l	(A7)+, D1/D2
	RTS
loc_0000BC2C:
	MOVE.w	#$0140, D1
	MOVE.w	#$013C, $26(A0)
	BSR.w	loc_0000BD50
	LEA	loc_0000BD62, A2
	CLR.w	D0
	MOVE.b	$00FF1890, D0
	LSL.w	#2, D0
	MOVEA.l	(A2,D0.w), A1
	MOVE.w	#$D918, D5
	BSR.w	loc_0000BD96
	BSR.w	loc_0000BB20
	BSR.w	loc_0000BB4A
	BSR.w	loc_0000BB7C
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.w	$26(A0), D1
	BSR.w	loc_0000BD50
	SUBQ.w	#4, $26(A0)
	BCS.w	loc_0000BCAA
	TST.b	$F(A0)
	BNE.w	loc_0000BCA8
	MOVE.b	rPad1Press, D0
	OR.b	rPad2Press, D0
	ANDI.b	#$F0, D0
	BEQ.w	loc_0000BCA8
	TST.b	$2A(A0)
	BNE.w	loc_0000BCA8
	CLR.b	rBytecode_StopRun
	MOVE.b	#$FF, $2A(A0)
loc_0000BCA8:
	RTS
loc_0000BCAA:
	MOVE.b	#sfxID_MajorGarbagePuyoFall2, D0
	BSR.w	SndDrv_QueueSoundEffect
	TST.b	rBytecode_StopRun
	BEQ.w	loc_0000BCD8
	MOVE.w	#4, D0
loc_0000BCC0:
	MOVEM.l	D0, -(A7)
	TST.b	$A(A0,D0.w)
	BPL.w	loc_0000BCD0
	BSR.w	loc_0000B80E
loc_0000BCD0:
	MOVEM.l	(A7)+, D0
	DBF	D0, loc_0000BCC0
loc_0000BCD8:
	MOVE.w	#$0100, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	loc_00002B40
	TST.b	$7(A0)
	BEQ.w	loc_0000BCF2
	RTS
loc_0000BCF2:
	TST.b	$00FF1891
	BEQ.w	loc_0000BD3C
	ADDQ.b	#1, $00FF1890
	CMPI.b	#2, $00FF1890
	BEQ.w	loc_0000BD3C
	MOVE.w	#$0140, D1
	MOVE.w	D1, $26(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.w	$26(A0), D1
	SUBI.w	#$0140, D1
	BSR.w	loc_0000BD50
	SUBQ.w	#4, $26(A0)
	BEQ.w	loc_0000BD32
	RTS
loc_0000BD32:
	JSR	ObjSys_UpdateObjNextOpTimer
	BRA.w	loc_0000BC2C
loc_0000BD3C:
	TST.b	$2A(A0)
	BNE.w	loc_0000BD4A
	CLR.b	rBytecode_StopRun
loc_0000BD4A:
	JMP	ObjSys_DeleteObjectA0
loc_0000BD50:
	LEA	$00FF0762, A1
	MOVE.w	#$00DF, D0
loc_0000BD5A:
	MOVE.w	D1, (A1)+
	DBF	D0, loc_0000BD5A
	RTS
loc_0000BD62:
	dc.l	loc_0000BD6A
	dc.l	loc_0000BD74
loc_0000BD6A:
	dc.b	$00, $01, $02, $03, $04, $05, $06, $07, $FF 
	dc.b	$00 
loc_0000BD74:
	dc.b	$10, $11, $12, $13, $14, $15, $16, $17, $FF 
	dc.b	$00 
loc_0000BD7E:
	MOVE.b	(A1)+, D0
	BMI.w	loc_0000BD94
	MOVEM.l	D5, -(A7)
	BSR.w	loc_0000BDB6
	MOVEM.l	(A7)+, D5
	ADDQ.w	#4, D5
	BRA.b	loc_0000BD7E
loc_0000BD94:
	RTS
loc_0000BD96:
	MOVE.b	(A1)+, D0
	BMI.w	loc_0000BDAC
	MOVEM.l	D5, -(A7)
	BSR.w	loc_0000BDAE
	MOVEM.l	(A7)+, D5
	ADDQ.w	#4, D5
	BRA.b	loc_0000BD96
loc_0000BDAC:
	RTS
loc_0000BDAE:
	MOVE.w	#$A000, D1
	BRA.w	loc_0000BDBA
loc_0000BDB6:
	MOVE.w	#$C400, D1
loc_0000BDBA:
	MOVEM.l	D1, -(A7)
	MOVE.b	D0, D1
	ANDI.b	#$0F, D0
	LSL.b	#1, D0
	ANDI.b	#$30, D1
	LSL.w	#2, D1
	OR.b	D1, D0
	MOVEM.l	(A7)+, D1
	MOVE.b	D0, D1
	ORI	#$0700, SR
	JSR	Video_SetVRAMAddressWrite
	ADDI.w	#$0100, D5
	MOVE.w	D1, vdpData1
	ADDQ.w	#1, D1
	MOVE.w	D1, vdpData1
	ADDI.w	#$001F, D1
	JSR	Video_SetVRAMAddressWrite
	MOVE.w	D1, vdpData1
	ADDQ.w	#1, D1
	MOVE.w	D1, vdpData1
	ANDI	#$F8FF, SR
	RTS

; ---------- File End: game/record_screen.asm ----------

; ---------- File Start: game/staff_credits.asm ----------

StaffCredits_Init:
	lea 	(rStaffCredits_MapRecFlgTbl).l, a1
	move.w 	#7, d0
loc_0000BE18:
	clr.b   (a1)+
	dbf    	d0, loc_0000BE18
	lea		(StaffCredits_LoadTextObj).l, a1
	jsr		ObjSys_InitObjWithFunc
	lea		(loc_0000BE38).l, a1
	jsr		ObjSys_InitObjWithFunc
	rts
loc_0000BE38:
	move.b   #$FF, $7(a0)
	lea		 (loc_0000BF96).l, a1
	jsr		 ObjSys_InitObjWithFunc
	bcs.w    loc_0000BE70
	move.l   a0, $2E(a1)
	bsr.w    Video_SetHScrollSinglePixelRows
	move.b   #0, d0
	move.b   #4, d2
	lea 	 (palLookupTable).l, a2
	jsr      loc_00000E28
	move.w   #$80, $28(a1)
loc_0000BE70:
	move.b    #$33, $6(a0)
	move.l    #$800, $12(a0)
	move.l    #$200, $16(a0)
	jsr		  ObjSys_UpdateObjNextOpTimer
	jsr		  ObjSys_UpdatePosInterpMove
	move.w    $E(a0), d0
	neg.w     d0
	move.w    d0, (rScrollYScanBack).l
	cmpi.w    #$1C,$E(a0)
	bcc.w    loc_0000BEAA
	rts
loc_0000BEAA:
	clr.b  d0
	move.b #4, d1
	lea (palLookupTable).l, a2
	jsr loc_00000E46
	move.w  #$80, d0
	jsr  ObjSys_SetObjNextOpTimer
	jsr  ObjSys_UpdateObjNextOpTimer
	clr.b    $7(a0)
	move.w    #$B, d0
	jsr  Video_QueueBgMapFromId
	clr.b  d0
	move.b  #4, d1
	lea (palLookupTable).l, a2
	adda.l    #(pal_00002430-palLookupTable), a2
	jsr loc_00000E46
	move.w   #$40, d0
	jsr  ObjSys_SetObjNextOpTimer
	jsr  ObjSys_UpdateObjNextOpTimer
	move.w    #$1e, $A(a0)
	clr.w    $C(a0)
	move.w    #$40, $E(a0)
	clr.w    $10(a0)
	move.w    #$32, $12(a0)
	clr.w    $14(a0)
	jsr    ObjSys_UpdateObjNextOpTimer
	clr.w  d0
	lea   ($00FF0A70).l, a1
loc_0000BF2E:
	bsr.w    loc_0000BF48
	addq.w #4, d0
	cmpi.w #$C, d0
	bcs.b    loc_0000BF2E
	clr.b    d0
	lea    (rPalQueueMainEnt1).l, a2
	jmp		Video_LoadPaletteIntoIndex
loc_0000BF48:
	move.w    $C(a0, d0.w), d1
	add.w     $A(a0, d0.w), d1
	btst.l    #$b, d1
	beq.w     loc_0000BF60
	neg.w    $A(a0, d0.w)
	move.w    $C(a0, d0.w), d1
loc_0000BF60:
	move.w d1, $C(a0, d0.w)
	lsr.w #8, d1
	move.w d0, d2
	andi.b #8, d2
	add.w d2, d1
	lsl.w #1, d1
	move.w loc_0000BF76(pc, d1.w), (a1)+
	rts
; Palette data?
loc_0000BF76:
	dc.w 	$0466, $0688, $08AA, $0ACC, $0CCC, $0CEE, $0EEE, $0EEE
	dc.w 	$0C62, $0C64, $0C66, $0E88, $0EAA, $0ECC, $0EEE, $0EEE
loc_0000BF96:
	movea.l $2e(a0), a1
	tst.b $7(a1)
	beq.w loc_0000BFD4
	lea ($00FF07C2).l, a2
	move.b $36(a0), d0
	move.w #$120, d1
	move.w #$1f, d3
loc_0000BFB4:
	jsr SignedSinWithMul
	swap d2
	add.w $a(a1), d2
	move.w #0, (a2)+
loc_0000BFC4:
	move.w d2, (a2)+
	addi.b #$2d, d0
	dbf d3, loc_0000BFB4
	addq.b #3, $36(a0)
	rts
loc_0000BFD4:
	bsr.w    Video_SetHScrollFullScreen
	jmp ObjSys_DeleteObjectA0
	
; ---------- File End: game/staff_credits.asm ----------

; ---------- File Start: game/normal_ending.asm? ----------
; Note: I haven't looked at this part of the code yet beyond identifying what it goes to.
loc_0000BFDE:
	bsr.w    Video_SetHScrollFullScreen
	lea    (loc_0000BFEE).l, a1
	jmp    ObjSys_InitObjWithFunc
loc_0000BFEE:
	move.w    #$140, d0
	sub.w    $26(a0), d0
	move.w    d0, (rScrollXScanFront).l
	neg.w   d0
	move.w    d0, (rScrollXScanBack).l
	beq.w    loc_0000C00E
	addq.w    #2, $26(a0)
	rts
loc_0000C00E:
	move.w #6, d0
	bsr.w HowToPlay_TextObjInit
	move.w #$c0, d0
	jsr ObjSys_SetObjNextOpTimer
	jsr ObjSys_UpdateObjNextOpTimer
	move.b #0, d0
	move.b #4, d1
	lea (palLookupTable).l, a2
	jsr loc_00000E46
	move.b #1, d0
	move.b #8, d1
	move.b #4, d2
	lea (palLookupTable).l, a2
	jsr loc_00000E28
	move.w #$40, d0
	jsr ObjSys_SetObjNextOpTimer
	jsr ObjSys_UpdateObjNextOpTimer
	move.w #5, d0
	bsr.w HowToPlay_TextObjInit
	move.w #$200, d0
	jsr ObjSys_SetObjNextOpTimer
	jsr ObjSys_UpdateObjNextOpTimer
	clr.b (rBytecode_StopRun).l
	clr.b (rBytecode_Ret).l
	jmp ObjSys_DeleteObjectA0
; ---------- File End: game/normal_ending.asm? ----------

; ---------- File Start: game/portrait_screen.asm ----------
PortraitScreen_LoadBG:
	ORI	#$0700, SR
	MOVE.w	#$000D, D0 ; Number of rows of bricks to load
	CLR.w	D2
	MOVE.w	#$E400, D6
@NextRow:
	JSR	Video_SetVRAMAddressWrite
	ADDI.w	#$0100, D5
	MOVE.w	D2, D3
	MOVE.w	#$0033, D1
	LEA	loc_0000C10E, A2

@loc_0000C0B0:
	CMPI.w	#$001E, D3
	BCS.w	@loc_0000C0BE
	SUBI.w	#$001E, D3
	BRA.b	@loc_0000C0B0
@loc_0000C0BE:
	MOVE.b	(A2,D3.w), D6
	ADDQ.w	#1, D3
	MOVE.w	D6, vdpData1
	DBF	D1, @loc_0000C0B0

	JSR	Video_SetVRAMAddressWrite
	ADDI.w	#$0100, D5
	MOVE.w	D2, D3
	MOVE.w	#$0033, D1
	LEA	loc_0000C12C, A2
@loc_0000C0E4:
	CMPI.w	#$001E, D3
	BCS.w	@loc_0000C0F2
	SUBI.w	#$001E, D3
	BRA.b	@loc_0000C0E4

@loc_0000C0F2:
	MOVE.b	(A2,D3.w), D6
	ADDQ.w	#1, D3
	MOVE.w	D6, vdpData1
	DBF	D1, @loc_0000C0E4
	ADDQ.w	#2, D2
	DBF	D0, @NextRow
	ANDI	#$F8FF, SR
	RTS
loc_0000C10E:
	dc.b	$41, $8E, $8F, $81, $82, $83, $84, $85, $86, $20, $87, $60, $4D, $88, $89, $8A, $8B, $8C, $01, $8D, $87, $60, $4D, $88, $89, $8A, $8B, $8C, $01, $8D 
loc_0000C12C:
	dc.b	$61, $CD, $CE, $90, $A5, $A6, $A7, $C8, $C9, $40, $2D, $80, $6D, $9A, $9B, $9C, $CA, $CB, $21, $CC, $2D, $80, $6D, $9A, $9B, $9C, $CA, $CB, $21, $CC 
loc_0000C14A:
	MOVE.l	#$97000000, D0
	JSR	Video_QueueBgMapSpecial
	MOVE.l	#$9A000000, D0
	JMP	Video_QueueBgMapSpecial

PortraitScreen_Init:
	CLR.w	D0
	MOVE.b	rOnePlayer_CurStage, D0
	LEA	tbl_cutsceneOrder, A1
	MOVE.b	(A1,D0.w), rOnePlayer_CurCutscene
	JSR	Video_EnableVDPHighlight
	BSR.w	Video_SetHScrollFullScreen
	LEA	PortraitScreen_MainObj, A1
	JSR	ObjSys_InitObjWithFunc
	BCC.w	@InitSuccess
	RTS
@InitSuccess:
	MOVE.b	#$22, $8(A1)
	MOVE.b	#1, $9(A1)
	MOVE.w	#$00F8, $A(A1)
	MOVE.w	#$00D0, $E(A1)
	MOVE.w	#$FF70, rScrollXScanFront
	MOVE.w	#$FF70, rScrollXScanBack
	CLR.w	D1
	MOVE.b	rOnePlayer_CurStage, D1
	CLR.w	D0
	MOVE.b	@TblShouldntScroll(PC,D1.w), D0
	BNE.w	@SkipScrolling
	TST.b	$00FF0115
	BNE.w	@SkipScrolling
	MOVE.w	#$FFC8, rScrollXScanFront
	MOVE.w	#$FFC8, rScrollXScanBack
@SkipScrolling:
	MOVE.w	#$E00E, D5
	BSR.w	PortraitScreen_LoadBG
	BSR.w	loc_0000C56A
	BRA.w	PortraitScreen_LoadPortraits
	RTS
@TblShouldntScroll:
	dc.b 	$FF, $00, $00, $FF, $00, $00, $00, $00
	dc.b 	$00, $00, $00, $00, $00, $00, $00, $00
tbl_cutsceneOrder:
	dc.b	cutID_SkeletonT
	dc.b 	cutID_Nasu
	dc.b	cutID_Mummy
	dc.b	cutID_Draco
	dc.b	cutID_Suketoudara
	dc.b	cutID_Sukiyapotes
	dc.b 	cutID_Harpy
	dc.b 	cutID_Sasoriman
	dc.b 	cutID_Panotty
	dc.b 	cutID_Zombie
	dc.b 	cutID_Witch
	dc.b 	cutID_ZohDaimaoh
	dc.b 	cutID_Schezo
	dc.b 	cutID_Minotauros
	dc.b 	cutID_Rulue
	dc.b 	cutID_Satan 
	even
PortraitScreen_MainObj:
	MOVE.w	#$0060, $26(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	BSR.w	GetMainControllerHeld
	ANDI.b	#$F0, D0
	BNE.w	@ExitPortraitScreen
	CMPI.w	#$FF70, rScrollXScanFront
	BEQ.w	@DoneScrolling
	SUBQ.w	#2, rScrollXScanFront
	SUBQ.w	#2, rScrollXScanBack
	RTS
@DoneScrolling:
	SUBQ.w	#1, $26(A0)
	BEQ.w	@ExitPortraitScreen
	CMPI.w	#$0040, $26(A0)
	BEQ.w	@PlaySoundEffect
	BCS.w	@PlayPortraitFlash
	RTS
@PlaySoundEffect:
	MOVE.b	#sfxID_ComboComplete1, D0
	JSR	SndDrv_QueueSoundEffect
	MOVE.w	#$C744, D5
	JMP	loc_00008254
@PlayPortraitFlash:
	MOVE.w	$26(A0), D0
	ROL.b	#5, D0
	ANDI.b	#$80, D0
	MOVE.b	D0, $6(A0)
	RTS
@ExitPortraitScreen:
	CLR.b	rBytecode_StopRun
	JMP	ObjSys_DeleteObjectA0

PortraitScreen_LoadPortraits:
	CLR.w	D0
	MOVE.b	rOnePlayer_CurStage, D0
	LSL.w	#2, D0
	LEA	loc_0000C3B0, A1
	MOVEA.l	(A1,D0.w), A2
	LEA	rOnePlayer_DefeatedEnemyTbl, A1
	MOVE.w	#$0100, D6
loc_0000C2B2:
	MOVE.w	(A2)+, D0
	BMI.w	loc_0000C300
	MOVE.w	(A2), D5
	ADDI.w	#$E000, D5
	SWAP	D5
	MOVE.w	(A2)+, D5
	ADDI.w	#$C000, D5
	CLR.b	D3
	MOVE.w	#$A000, D4
	TST.b	(A1,D0.w)
	BEQ.w	loc_0000C2E4
	MOVE.w	#$4000, D4
	CMPI.w	#4, D0
	BNE.w	loc_0000C2E4
	MOVE.b	#$FF, D3
loc_0000C2E4:
	MOVEM.l	D6, -(A7)
	OR.w	D4, D6
	ORI	#$0700, SR
	BSR.w	loc_0000C302
	ANDI	#$F8FF, SR
	MOVEM.l	(A7)+, D6
	ADDI.w	#$0046, D6
	BRA.b	loc_0000C2B2
loc_0000C300:
	RTS
loc_0000C302:
	CLR.w	D1
	LEA	loc_0000C36A, A3
	MOVE.w	#6, D4
loc_0000C30E:
	SWAP	D5
	JSR	Video_SetVRAMAddressWrite
	CLR.w	D0
	MOVE.w	#9, D0
loc_0000C31C:
	MOVE.w	#$64F0, vdpData1
	DBF	D0, loc_0000C31C
	ADDI.w	#$0100, D5
	SWAP	D5
	JSR	Video_SetVRAMAddressWrite
	CLR.w	D0
	MOVE.w	#9, D0
loc_0000C33A:
	BSR.w	loc_0000C352
	MOVE.w	D7, vdpData1
	DBF	D0, loc_0000C33A
	ADDI.w	#$0100, D5
	DBF	D4, loc_0000C30E
	RTS
loc_0000C352:
	TST.b	D3
	BNE.w	loc_0000C360
	MOVE.w	D6, D7
	ADD.w	D1, D7
	ADDQ.w	#1, D1
	RTS
loc_0000C360:
	MOVE.w	D6, D7
	CLR.w	D1
	MOVE.b	(A3)+, D1
	ADD.w	D1, D7
	RTS
loc_0000C36A:
	dc.b	$00, $01, $02, $03, $04, $05, $06, $07, $08, $09, $0A, $0B, $0C, $0D, $0E, $0F, $10, $11, $12, $13, $14, $0B, $0B, $15, $16, $17, $18, $0B, $0B, $1D, $1E, $0B 
	dc.b	$0B, $1F, $20, $21, $22, $0B, $0B, $27, $28, $0B, $0B, $29, $2A, $2B, $2C, $0B, $0B, $31, $32, $0B, $0B, $33, $34, $35, $36, $0B, $0B, $3B, $3C, $3D, $3E, $3F ;0x20
	dc.b	$40, $41, $42, $43, $44, $45 ;0x40
loc_0000C3B0:
	dc.l	loc_0000C3F0
	dc.l	loc_0000C3FE
	dc.l	loc_0000C40C
	dc.l	loc_0000C41A
	dc.l	loc_0000C428
	dc.l	loc_0000C43A
	dc.l	loc_0000C450
	dc.l	loc_0000C46A
	dc.l	loc_0000C484
	dc.l	loc_0000C49E
	dc.l	loc_0000C4B8
	dc.l	loc_0000C4D2
	dc.l	loc_0000C4EC
	dc.l	loc_0000C506
	dc.l	loc_0000C520
	dc.l	loc_0000C536
loc_0000C3F0:
	dc.b	$00, $00, $0A, $42, $00, $04, $0A, $58, $00, $0D, $0A, $6E, $80, $00 
loc_0000C3FE:
	dc.b	$00, $00, $0A, $2C, $00, $04, $0A, $42, $00, $0D, $0A, $58, $80, $00 
loc_0000C40C:
	dc.b	$00, $00, $0A, $16, $00, $04, $0A, $2C, $00, $0D, $0A, $42, $80, $00 
loc_0000C41A:
	dc.w	$0003 
	dc.w	$0A42
	dc.b	$00, $01 
	dc.w	$0A58
	dc.b	$00, $0E 
	dc.w	$0A6E
	dc.b	$80, $00 
loc_0000C428:
	dc.w	$0003 
	dc.w	$0A2C
	dc.b	$00, $01 
	dc.w	$0A42
	dc.b	$00, $0E 
	dc.w	$0A58
	dc.b	$00, $07 
	dc.w	$0A6E
	dc.b	$80, $00 
loc_0000C43A:
	dc.b	$00, $03, $0A, $16, $00, $01, $0A, $2C, $00, $0E, $0A, $42, $00, $07, $0A, $58, $00, $06, $0A, $6E, $80, $00 
loc_0000C450:
	dc.b	$00, $03, $0A, $00, $00, $01, $0A, $16, $00, $0E, $0A, $2C, $00, $07, $0A, $42, $00, $06, $0A, $58, $00, $0F, $0A, $6E, $80, $00 
loc_0000C46A:
	dc.b	$00, $01, $0A, $00, $00, $0E, $0A, $16, $00, $07, $0A, $2C, $00, $06, $0A, $42, $00, $0F, $0A, $58, $00, $02, $0A, $6E, $80, $00 
loc_0000C484:
	dc.b	$00, $0E, $0A, $00, $00, $07, $0A, $16, $00, $06, $0A, $2C, $00, $0F, $0A, $42, $00, $02, $0A, $58, $00, $05, $0A, $6E, $80, $00 
loc_0000C49E:
	dc.b	$00, $07, $0A, $00, $00, $06, $0A, $16, $00, $0F, $0A, $2C, $00, $02, $0A, $42, $00, $05, $0A, $58, $00, $08, $0A, $6E, $80, $00 
loc_0000C4B8:
	dc.b	$00, $06, $0A, $00, $00, $0F, $0A, $16, $00, $02, $0A, $2C, $00, $05, $0A, $42, $00, $08, $0A, $58, $00, $09, $0A, $6E, $80, $00 
loc_0000C4D2:
	dc.b	$00, $0F, $0A, $00, $00, $02, $0A, $16, $00, $05, $0A, $2C, $00, $08, $0A, $42, $00, $09, $0A, $58, $00, $0A, $0A, $6E, $80, $00 
loc_0000C4EC:
	dc.b	$00, $02, $0A, $00, $00, $05, $0A, $16, $00, $08, $0A, $2C, $00, $09, $0A, $42, $00, $0A, $0A, $58, $00, $0B, $0A, $6E, $80, $00 
loc_0000C506:
	dc.b	$00, $05, $0A, $00, $00, $08, $0A, $16, $00, $09, $0A, $2C, $00, $0A, $0A, $42, $00, $0B, $0A, $58, $00, $0C, $0A, $6E, $80, $00 
loc_0000C520:
	dc.b	$00, $08, $0A, $00, $00, $09, $0A, $16, $00, $0A, $0A, $2C, $00, $0B, $0A, $42, $00, $0C, $0A, $58, $80, $00 
loc_0000C536:
	dc.b	$00, $09, $0A, $00, $00, $0A, $0A, $16, $00, $0B, $0A, $2C, $00, $0C, $0A, $42, $80, $00 

loc_0000C548:
	LEA	tbl_menuPortraits, A2
	LEA	rOnePlayer_DefeatedEnemyTbl, A1
	LEA	lookup_portraitArt, A3
	MOVE.w	#$88C0, D5
	BRA.w	loc_0000C5A4
tbl_menuPortraits:
	dc.b	cutID_Draco
	dc.b	cutID_Harpy
	dc.b 	$FF
	even
Menu_StageSelectTbl:
	dc.b	stgID_SkeletonT
	dc.b	stgID_Draco
	dc.b	stgID_Harpy
	even

loc_0000C56A:
	LEA	loc_0000C640, A2
	CMPI.b	#stgID_Draco, rOnePlayer_CurStage
	BCS.w	@InEasyMode
	LEA	loc_0000C644, A2
	CLR.w	D0
	MOVE.b	rOnePlayer_CurStage, D0
	SUBQ.b	#6, D0
	BCC.w	@SkipBoundsCorrection
	CLR.b	D0
@SkipBoundsCorrection:
	ADDA.w	D0, A2
@InEasyMode:
	LEA	rOnePlayer_DefeatedEnemyTbl, A1
	LEA	lookup_portraitArt, A3
	MOVE.w	#$2000, D5

loc_0000C5A4:
	SWAP	D5
	MOVE.w	#5, D3
@Loop:
	; Grab next portrait byte.  If it's highest bit is set, then we're done here.
	CLR.w	D0
	MOVE.b	(A2)+, D0
	BMI.w	@NoPortraitsLeft

	; Load the art data for the portrait.
	MOVEM.l	A3/A2/A1/A0/D5/D4/D3/D2/D1/D0, -(A7)
	LSL.w	#2, D0
	MOVEA.l	(A3,D0.w), A0
	MOVE.w	#0, D0
	JSR	System_DecompressComp
	MOVEM.l	(A7)+, D0/D1/D2/D3/D4/D5/A0/A1/A2/A3

	MOVE.w	#0, D5
	TST.b	(A1,D0.w)
	BEQ.w	@SkipIfNotDefeated
	MOVE.w	#$02C0, D5
@SkipIfNotDefeated:
	ORI	#$0700, SR
	BSR.w	loc_0000C5EC
	ANDI	#$F8FF, SR
	DBF	D3, @Loop
@NoPortraitsLeft:
	RTS

loc_0000C5EC:
	LEA	rPlaneBuffer, A4
	MOVE.w	#6, D0
loc_0000C5F6:
	JSR	Video_SetVRAMAddressRead
	ADDI.w	#$0400, D5
	NOP
	NOP
	NOP
	NOP
	MOVE.w	#$009F, D1
loc_0000C60C:
	MOVE.w	vdpData1, D2
	MOVE.w	D2, (A4)+
	DBF	D1, loc_0000C60C
	DBF	D0, loc_0000C5F6
	SWAP	D5
	JSR	Video_SetVRAMAddressWrite
	ADDI.w	#$08C0, D5
	SWAP	D5
	LEA	rPlaneBuffer, A4
	MOVE.w	#$045F, D1
loc_0000C634:
	MOVE.w	(A4)+, vdpData1
	DBF	D1, loc_0000C634
	RTS
loc_0000C640:
	dc.b 	cutID_SkeletonT
	dc.b 	cutID_Nasu
	dc.b 	cutID_Mummy
	dc.b 	$FF
loc_0000C644:
	dc.b 	cutID_Draco
	dc.b 	cutID_Suketoudara
	dc.b 	cutID_Sukiyapotes
	dc.b 	cutID_Harpy
	dc.b 	cutID_Sasoriman
	dc.b 	cutID_Panotty
	dc.b 	cutID_Zombie
	dc.b 	cutID_Witch
	dc.b 	cutID_ZohDaimaoh
	dc.b 	cutID_Schezo
	dc.b 	cutID_Minotauros
	dc.b 	cutID_Rulue
	dc.b 	cutID_Satan
	dc.b 	$FF
; ---------- File End: game/portrait_screen.asm ----------

; ---------- File Start: game/game_over.asm ----------
; This contains almost all code that controls how the game over menu works.
; General note: When we exit the game over menu, the value of 
; rBytecode_Ret will determine what happens.
;   * 00 = Player will continue
;   * FF = Player gave up

GameOver_InitVDP:
	ORI	#$0700, SR
	MOVE.w	#$CC08, D5
	BSR.w	@LoadScrollText
	MOVE.w	#$CC48, D5
	BSR.w	@LoadScrollText
	MOVE.w	#$E000, D5
	MOVE.w	#7, D0
	MOVE.w	#$41F0, D1
@LoadSkyGradientLoop:
	JSR	Video_SetVRAMAddressWrite
	ADDI.w	#$0080, D5
	MOVE.w	#$0027, D2
@WriteXLoop:
	MOVE.w	D1, vdpData1
	DBF	D2, @WriteXLoop
	ADDQ.w	#1, D1
	DBF	D0, @LoadSkyGradientLoop
	ANDI	#$F8FF, SR
	RTS
	
@LoadScrollText:
	JSR	Video_SetVRAMAddressWrite
	ADDI.w	#$0080, D5
	MOVE.w	#$0017, D0
	MOVE.w	#$2160, D1
@WriteDataLoop:
	MOVE.w	D1, vdpData1
	ADDQ.w	#1, D1
	DBF	D0, @WriteDataLoop
	JSR	Video_SetVRAMAddressWrite
	MOVE.w	#$0017, D0
@WriteDataLoop2:
	MOVE.w	D1, vdpData1
	ADDQ.w	#1, D1
	DBF	D0, @WriteDataLoop2
	RTS

GameOver_Init:
	BSR.w	@InitGameOverText
	LEA	@MainObject, A1
	JSR	ObjSys_InitObjWithFunc
	BCC.w	@AllocSuccess
	RTS
@AllocSuccess:
	MOVE.w	#1, $12(A1)
	MOVE.w	#11, $28(A1)
	MOVE.b	#$FF, rBytecode_Ret
	BSR.w	Video_SetHScrollSinglePixelRows
	RTS

@MainObject:
	BSR.w	GetMainControllerHeld
	BTST.l	#7, D0
	BEQ.w	@ContinueRunning
	JSR	Arcade_CheckCoins
	BCS.w	@ContinueRunning
	BRA.w	@ExitContinue
@ContinueRunning:
	ANDI.b	#$70, D0
	BNE.w	@ABCPressed
	TST.w	$26(A0)
	BNE.w	@FrameTimerNonZero
@ABCPressed:
	SUBQ.w	#1, $28(A0)
	BCS.w	@ExitGiveUp
	MOVE.w	#$9200, D0
	MOVE.b	$29(A0), D0
	SWAP	D0
	JSR	Video_QueueBgMapSpecial
	MOVE.w	#$0050, $26(A0)
	MOVE.b	#sfxID_ChangeSelection, D0
	JSR	SndDrv_QueueSoundEffect
@FrameTimerNonZero:
	SUBQ.w	#1, $26(A0)
	BSR.w	@UpdateTextScroll
	MOVE.b	$27(A0), D0
	ANDI.b	#3, D0
	BEQ.w	@UpdateFlashingPalette
	RTS
	
@ExitContinue:
	MOVE.b	#sfxID_ConfirmSelection, D0
	BSR.w	SndDrv_QueueSoundEffect
	CLR.b	rBytecode_Ret
@ExitGiveUp:
	CLR.b	rBytecode_StopRun
	JSR	ObjSys_UpdateObjNextOpTimer
	RTS

@UpdateTextScroll:
	; Start at Scanline 192
	LEA	(rScrollXScanFront+192*2*2), A1
	SUBQ.w	#2, (A1)
	MOVE.w	(A1), D0
	MOVE.w	#$000F, D1
@LoopUpdateScroll:
	MOVE.w	D0, (A1)+
	MOVE.w	#0, (A1)+
	DBF	D1, @LoopUpdateScroll
	RTS

@UpdateFlashingPalette:
	MOVE.w	$A(A0), D0
	ADD.w	$12(A0), D0
	CMPI.w	#6, D0
	BCS.w	@UnkBranch
	NEG.w	$12(A0)
	MOVE.w	$A(A0), D0
@UnkBranch:
	MOVE.w	D0, $A(A0)
	ADDQ.w	#2, D0
	LSL.w	#1, D0
	MOVE.w	D0, D1
	LSL.w	#4, D0
	OR.w	D1, D0
	MOVE.w	D0, $00FF0A94
	MOVE.b	#1, D0
	LEA	rPalQueueMainEnt2, A2
	JMP	Video_LoadPaletteIntoIndex

@InitGameOverText:
	MOVE.w	#7, D0
@LoadLettersLoop:
	LEA	@LetterMain, A1
	JSR	loc_00002AB0	; Same as InitObjWithFunc, but doesn't check $1(A0)?
	BCS.w	@AllocFail
	MOVE.b	#$83, $6(A1)
	MOVE.b	#$1F, $8(A1)
	MOVE.b	D0, $9(A1)
	MOVE.w	D0, D1
	LSL.w	#1, D1
	MOVE.w	@FinalXPositions(PC,D1.w), $1E(A1)
	LSL.b	#4, D1
	MOVE.b	D1, $36(A1)
	MOVE.w	#$00A0, $38(A1)
@AllocFail:
	DBF	D0, @LoadLettersLoop
	RTS
@FinalXPositions:
	dc.w	$00C8, $00E0, $00F8, $0110, $0130, $0148, $0160, $0178 

@LetterMain:
	MOVE.b	$36(A0), D0
	MOVE.w	$38(A0), D1
	JSR	SignedSinWithMul
	ASR.l	#8, D2
	ADDI.w	#$0120, D2
	MOVE.w	D2, $A(A0)
	ADDI.b	#$10, D0
	JSR	SignedCosWithMul
	ASR.l	#8, D2
	ADDI.w	#$00F0, D2
	MOVE.w	D2, $E(A0)
	ADDQ.b	#2, $36(A0)
	SUBQ.w	#1, $38(A0)
	BCS.w	@AnimPart2
	RTS
@AnimPart2:
	CLR.w	D0
	MOVE.b	$9(A0), D0
	LSL.w	#3, D0
	MOVE.w	D0, $26(A0)
	CLR.b	$36(A0)
	MOVE.w	$1E(A0), D0
	SUBI.w	#$0120, D0
	SWAP	D0
	ASR.l	#7, D0
	MOVE.l	D0, $12(A0)
	MOVE.l	#$FFFF9000, $16(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	TST.w	$26(A0)
	BEQ.w	@AnimPart3
	SUBQ.w	#1, $26(A0)
	RTS
@AnimPart3:
	MOVE.w	#$0080, $26(A0)
	MOVE.l	$E(A0), $32(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.l	$32(A0), $E(A0)
	JSR	ObjSys_UpdatePosInterpMove
	MOVE.l	$E(A0), $32(A0)
	SUBQ.w	#1, $26(A0)
	BEQ.w	@AnimPart4
	MOVE.b	$27(A0), D0
	ORI.b	#$80, D0
	MOVE.w	#$7800, D1
	JSR	SignedSinWithMul
	SWAP	D2
	ADD.w	D2, $E(A0)
	RTS
@AnimPart4:
	JSR	ObjSys_UpdateObjNextOpTimer
	JSR	Arcade_CheckCoins ; This call does nothing
	MOVE.b	$36(A0), D0
	ORI.b	#$80, D0
	MOVE.w	#$1800, D1
	JSR	SignedSinWithMul
	SWAP	D2
	ADDI.w	#$00B8, D2
	MOVE.w	D2, $E(A0)
	ADDQ.b	#2, $36(A0)
	RTS

; Dead Code.
; In the arcade version of the game, once the game over text is about to land,
; the text disappears and text stating "PUSH 1P START BUTTON" appears.
; This doesn't happen in the Megadrive release, but the code for it, seen below
; still exists.  Remove the RTS in the above code to restore this behavior.
	TST.b	$9(A0)
	BEQ.w	@AnimPart5
	JMP	ObjSys_DeleteObjectA0
@AnimPart5:
	MOVE.b	#0, $6(A0)	
	JSR	ObjSys_UpdateObjNextOpTimer	
	MOVE.l	#$800B0F00, D0	
	TST.b	rCurMainPlayer	
	BEQ.w	@UnkBranch2	
	MOVE.l	#$80100F00, D0	
@UnkBranch2:
	JMP	Video_QueueBgMapSpecial	
	
; ---------- File End: game/game_over.asm ----------

; ---------- File Start: game/sega_main.asm ----------

Sega_CreateMainObjAlt:
	LEA	Sega_Update, A1
	JSR	ObjSys_InitObjWithFunc
	BCC.w	@AllocSuccess
	RTS
@AllocSuccess:
	MOVE.w	#$0C00, $26(A1)
	RTS
	
Sega_CreateMainObj:
	LEA	Sega_Update, A1
	JMP	ObjSys_InitObjWithFunc
	
Sega_Update:
	MOVE.b	rPad1Press, D0
	OR.b	rPad2Press, D0
	ANDI.b	#$F0, D0
	BNE.w	@ButtonPressed
	TST.w	$26(A0)
	BNE.w	@TimerNonZero
	RTS
@TimerNonZero:
	SUBQ.w	#1, $26(A0)
	BEQ.w	@TimerIsZero
	RTS
@ButtonPressed:
	MOVE.b	#$FF, rBytecode_Ret
	CLR.b	rBytecode_StopRun
	JMP	ObjSys_DeleteObjectA0
@TimerIsZero:
	CLR.b	rBytecode_Ret
	CLR.b	rBytecode_StopRun
	JMP	ObjSys_DeleteObjectA0

; ---------- File End: game/sega_main.asm ----------

; ---------- File Start: game/insert_coin_demo.asm ----------

Demo_CreateInsertCoinObj:
	LEA	@Update, A1
	JSR	loc_00002AB0
	BCC.w	@AllocSuccess
	RTS
@AllocSuccess:
	MOVE.b	#$80, $6(A1)
	MOVE.b	#SprMapID_Credits, Obj_SprMap(A1)
	CLR.w	D0
	MOVE.b	rBytecode_Ret, D0
	LSL.b	#2, D0
	MOVE.w	@ObjXYTbl(PC,D0.w), Obj_XPos(A1)
	MOVE.w	@ObjXYTbl+2(PC,D0.w), Obj_YPos(A1)
	RTS

@Update:
	JSR	Arcade_CheckCoins
	BCS.w	@NoCoins
	JMP	ObjSys_DeleteObjectA0
@NoCoins:
	MOVE.b	$00FF05C7, D0
	LSL.b	#2, D0
	ANDI.b	#$80, D0
	MOVE.b	D0, $6(A0)
	RTS
@ObjXYTbl:
	dc.w	$00EE, $0100
	dc.w	$008E, $00E0
	dc.w	$008E, $00E0 
	
; ---------- File End: game/insert_coin_demo.asm ----------

; ---------- File Start: game/title_screen.asm ----------
; This section of code contains almost all code related to the title screen.
TitleScreen_CreateArleObj:
	LEA	TitleScreen_ArleObjUpdate1, A1
	JSR	ObjSys_InitObjWithFunc
	BCS.w	@ObjDidntLoad
	MOVEA.l	A1, A2
	MOVE.b	#$80, $6(A1)
	MOVE.b	#SprMapID_Title, Obj_SprMap(A1)
	MOVE.b	#6, Obj_AnmFrm(A1)
	MOVE.w	#$0160, Obj_XPos(A1)
	MOVE.l	#TitleScreen_ArleObj_MainAnim, Obj_Anim(A1)
	
	; Arle Blinking
	LEA	TitleScreen_ArleObj_ObjBlinkStart, A1
	JSR	ObjSys_InitObjWithFunc
	BCS.w	@ObjDidntLoad
	MOVE.l	A2, $2E(A1)
	MOVE.b	#SprMapID_Title, Obj_SprMap(A1)
	
	; Arle Mouth
	LEA	TitleScreen_ArleObj_ObjMouthStart, A1
	JSR	ObjSys_InitObjWithFunc
	BCS.w	@ObjDidntLoad
	MOVE.l	A2, $2E(A1)
	MOVE.b	#SprMapID_Title, Obj_SprMap(A1)
@ObjDidntLoad:
	RTS

TitleScreen_ArleObjUpdate1:
    ; Update Arle Y Scrolling
	MOVE.w	rScrollYScanFront, D0
	ADDI.w	#$0160, D0
    MOVE.w	D0, Obj_YPos(A0)
	
    JSR	ObjSys_UpdateObjAnim
	TST.b	Obj_AnmFrm(A0)
	BMI.w	@HandleSpecialAnim ; If AnmFrm is negative, handle it differently.
	RTS
; How special anim works for this:
; Frame Value: NSSS-AAAA where
; N = Set to 1 to specify using this code
; S = Offset for SpecialAnimTbl to jump to
; A = Actual animation frame
@HandleSpecialAnim:
	CLR.w	D0
	MOVE.b	Obj_AnmFrm(A0), D0
	LSR.b	#2, D0
	ANDI.b	#$0F, Obj_AnmFrm(A0) ; Put the actual animation back in bounds
	ANDI.b	#$1C, D0 ; Setup offset val to be in bounds
	MOVEA.l	@SpecialAnimTbl(PC,D0.w), A1
	JMP	(A1) ; Jump to special anim function
@SpecialAnimTbl:
	dc.l	TitleScreen_ArleObj_PlayFire
    dc.l	TitleScreen_ArleObj_GetBackUp
	dc.l	TitleScreen_ArleObj_PlayBounce
	dc.l	TitleScreen_ArleObj_BigPuyoInit
	dc.l	TitleScreen_ArleObj_OuchShake
TitleScreen_ArleObj_GetBackUp:
	MOVE.b	#0, $6(A0) ; Disable Rendering
	BSR.w	TitleScreen_ArleObj_CreateStarParticles
	BSR.w	TitleScreen_ArleObj_CreateBigPuyoAfterBounce
	if fFixTitleArleUB == 1
        CLR.w   Obj_YPos(A0)
    endif
    MOVE.w	#$0140, D0
	JSR	ObjSys_SetObjNextOpTimer ; Set timer to $140, and set Arle Obj Update to next opcode
	JSR	ObjSys_UpdateObjNextOpTimer ; Decrease Timer
	MOVE.b	#$80, $6(A0) ; Re-enable rendering
	MOVE.b	#$0D, Obj_AnmFrm(A0)
	MOVE.b	#0, $36(A0) ; Set movement progress to 0
	JSR	ObjSys_UpdateObjNextOpTimer ; Decrease Timer
	
    ; Long calculation for handling Arle getting back up
    MOVE.b	$36(A0), D0
	MOVE.w	#$4800, D1
	JSR	SignedSinWithMul
	SWAP	D2
	NEG.w	D2
	ADD.w	rScrollYScanFront, D2
	ADDI.w	#$01A8, D2
	MOVE.w	D2, Obj_YPos(A0)

    ; Increase Movement Progress
	ADDQ.b	#2, $36(A0)
	CMPI.b	#$40, $36(A0)
	BCC.w	@TitleArleFinalStage ; If movement is done, finalize
	RTS
@TitleArleFinalStage:
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.w	rScrollYScanFront, D0
	ADDI.w	#$0160, D0
	MOVE.w	D0, Obj_YPos(A0)
	RTS
TitleScreen_ArleObj_MainAnim:
	dc.b	$40
	dc.b	$06 
	dc.b	$F0
	dc.b	$06 
	dc.b	$01
	dc.b	$0B 
	dc.b	$03
	dc.b	$0C 
	dc.b	$02
	dc.b	$0B 
	dc.b	$F0
	dc.b	$06 
	dc.b	$01
	dc.b	$0B 
	dc.b	$03
	dc.b	$0C 
	dc.b	$02
	dc.b	$0B 
	dc.b	$20
	dc.b	$06

	dc.b	$02
	dc.b	$89 ; Anim Frame $9, Special $0

	dc.b	$03
	dc.b	$0A 
	dc.b	$02
	dc.b	$09 
	dc.b	$18
	dc.b	$06 
	dc.b	$02
	dc.b	$09 
	dc.b	$10
	dc.b	$0A 
	dc.b	$04
	dc.b	$08 
	dc.b	$60
	dc.b	$07 

	dc.b	$40
	dc.b	$B7 ; Anim Frame $7, Special $3 

	dc.b	$01
	dc.b	$AE ; Anim Frame $E, Special $2

	dc.b	$01
	dc.b	$CE ; Anim Frame $E, Special $4

	dc.b	$01
	dc.b	$CE ; Same

	dc.b	$01
	dc.b	$CE ; Same

	dc.b	$01
	dc.b	$CE ; Same

	dc.b	$01
	dc.b	$CE ; Same

	dc.b	$00
	dc.b	$90 ; Anim Frame $0, Special $1
    ; No need to freeze the animation here since a different function takes over after this.
	
TitleScreen_ArleObj_OuchShake:
	ADDQ.w	#2, $26(A0) ; Doesn't seem to do anything???
	MOVE.w	$26(A0), D0 ; Doesn't seem to do anything???
	ADDQ.w	#2, Obj_YPos(A0)  ; Move Arle Obj Down, it will get reset next frame.
	RTS

TitleScreen_ArleObj_CreateStarParticles:
	MOVE.w	#7, D0
loc_0000CB92:
	LEA	loc_0000CBD8, A1
	JSR	ObjSys_InitObjWithFunc
	BCS.w	loc_0000CBD2
	MOVE.l	A0, $2E(A1)
	MOVE.b	#$24, $8(A1)
	MOVE.b	#$15, $9(A1)
	MOVE.b	#$80, $6(A1)
	MOVE.w	$A(A0), $1E(A1)
	SUBI.w	#$0038, $1E(A1)
	MOVE.b	D0, D1
	ROR.b	#3, D1
	MOVE.b	D1, $36(A1)
	MOVE.w	#$0080, $26(A1)
loc_0000CBD2:
	DBF	D0, loc_0000CB92
	RTS
loc_0000CBD8:
	MOVE.b	$36(A0), D0
	MOVE.w	#$4000, D1
	JSR	SignedSinWithMul
	SWAP	D2
	ADD.w	$1E(A0), D2
	MOVE.w	D2, $A(A0)
	MOVE.w	#$1000, D1
	JSR	SignedCosWithMul
	SWAP	D2
	ADDI.w	#$0130, D2
	MOVE.w	$26(A0), D1
	SUBI.w	#$0040, D1
	BCC.w	loc_0000CC0E
	CLR.w	D1
loc_0000CC0E:
	ADD.w	D1, D2
	MOVE.w	D2, $20(A0)
	ADD.w	rScrollYScanFront, D2
	MOVE.w	D2, $E(A0)
	SUBQ.b	#3, $36(A0)
	SUBQ.w	#1, $26(A0)
	BEQ.w	loc_0000CC2C
	RTS
loc_0000CC2C:
	MOVE.w	#$0010, $26(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.w	$20(A0), D0
	ADD.w	rScrollYScanFront, D0
	MOVE.w	D0, $E(A0)
	SUBQ.w	#1, $26(A0)
	BEQ.w	loc_0000CC50
	RTS
loc_0000CC50:
	MOVE.b	#$87, $6(A0)
	MOVE.w	$20(A0), $1E(A0)
	MOVE.w	#$3000, $1C(A0)
	MOVE.w	#$FFFC, $16(A0)
	MOVE.w	#$FFFF, $20(A0)
	MOVE.b	$36(A0), D0
	MOVE.w	#$0100, D1
	JSR	SignedSinWithMul
	MOVE.l	D2, $12(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.w	$1E(A0), $E(A0)
	JSR	ObjSys_UpdatePosInterpMove
	BCS.w	loc_0000CCA8
	MOVE.w	$E(A0), $1E(A0)
	MOVE.w	rScrollYScanFront, D0
	ADD.w	D0, $E(A0)
	RTS
loc_0000CCA8:
	JMP	ObjSys_DeleteObjectA0

TitleScreen_ArleObj_CreateBigPuyoAfterBounce:
	LEA	@ObjStart, A1
	JSR	ObjSys_InitObjWithFunc
	BCC.w	@InitSuccess
	RTS
@InitSuccess:
	MOVE.b	#$87, $6(A1)
	MOVE.b	#$24, Obj_SprMap(A1)
	MOVE.b	#$0F, Obj_AnmFrm(A1)
	MOVE.w	Obj_XPos(A0), Obj_XPos(A1) ; Set X-Pos to Arle X-Pos
	ADDI.w	#-56, Obj_XPos(A1) ; Offset by -56
	MOVE.w	#$0120, $1E(A1)
	MOVE.w	#$FFFA, $16(A1)
	MOVE.w	#$FFFF, $20(A1)
	MOVE.w	#$3200, $1C(A1)
	MOVE.w	#$FFFE, $12(A1)
    ; See build_flags.asm for more details
    if fFixTitleArleUB == 1
        RTS
    endif
@ObjStart:
	MOVE.w	$1E(A0), Obj_YPos(A0)
	JSR	ObjSys_UpdatePosInterpMove
	BCS.w	loc_0000CD1E
	MOVE.w	$E(A0), $1E(A0)
	MOVE.w	rScrollYScanFront, D0
	ADD.w	D0, $E(A0)
	RTS
loc_0000CD1E:
	JMP	ObjSys_DeleteObjectA0
	
TitleScreen_ArleObj_BigPuyoInit:
	LEA	TitleScreen_ArleObj_BigPuyoStart, A1
	JSR	ObjSys_InitObjWithFunc
	BCC.w	@InitSuccess
	RTS
@InitSuccess:
	MOVE.l	A0, $2E(A1) ; Store Main Arle Obj Pointer into Obj.$2E
	MOVE.b	#$80, $6(A1) ; Set object as renderable
	MOVE.b	#SprMapID_Title, Obj_SprMap(A1)
	MOVE.b	#$0F, Obj_AnmFrm(A1)
	MOVE.b	#$3E, $36(A1) ; Init movement progress
	RTS
	
TitleScreen_ArleObj_BigPuyoStart:
	MOVEA.l	$2E(A0), A1 ; Grab Arle Obj into A1
	MOVE.b	$36(A0), D0 ; Move movement progress into D0
	MOVE.w	#$A000, D1
	JSR	SignedSinWithMul ; With the init value, D2 now contains $A00000
	SWAP	D2 ; We only care about the upper half
	NEG.w	D2 ; Swap D2 negativeness
	ADD.w	Obj_YPos(A1), D2 ; Add Arle's Y-Pos to D2
	ADDI.w	#-80, D2 ; Subtract 80
	MOVE.w	D2, Obj_YPos(A0) ; Store Y Pos into object

	MOVE.w	Obj_XPos(A1), D0 ; Load Arle X Pos into D0
	CLR.w	D1
	MOVE.b	$36(A0), D1 ; Move movement progress into D1
	MULU.w	#3, D1
	ADD.w	D1, D0 ; Add scaled progress to Arle X Pos
	ADDI.w	#-36, D0 ; Add offset to line it up correctly
	MOVE.w	D0, Obj_XPos(A0) ; Store
	SUBQ.b	#1, $36(A0) ; Decrease progress by 1
	BCS.w	@DeleteObject ; Delete object if timer overflows.
	RTS
@DeleteObject:
	JMP	ObjSys_DeleteObjectA0
	
TitleScreen_ArleObj_PlayFire:
	MOVE.b	#pcmID_Fire, D0
	JMP	SndDrv_PlayVoice
	
TitleScreen_ArleObj_PlayBounce:
	MOVE.b	#sfxID_PuyoBounceOnArle, D0
	JMP	SndDrv_QueueSoundEffect
	
TitleScreen_ArleObj_ObjBlinkStart:
	MOVE.b	#0, $6(A0) ; Disable Rendering
	MOVEA.l	$2E(A0), A1 ; Get Main Arle Obj pointer
	CMPI.b	#$0B, Obj_AnmFrm(A1) ; Check if anim frame is $B on main obj
	BCS.w	@DoNotRender ; Exit if it is < $B
	CMPI.b	#$0D, Obj_AnmFrm(A1) ; Check if anim frame is $D on main obj
	BCC.w	@DoNotRender ; Exit if it is >= $D
	MOVE.w	Obj_XPos(A1), Obj_XPos(A0)
	MOVE.w	Obj_YPos(A1), Obj_YPos(A0)
	MOVE.b	Obj_AnmFrm(A1), Obj_AnmFrm(A0)
	ADDQ.b	#7, Obj_AnmFrm(A0)
	MOVE.b	#$80, $6(A0)
@DoNotRender:
	RTS

; Same as above
TitleScreen_ArleObj_ObjMouthStart:
	MOVE.b	#0, $6(A0)
	MOVEA.l	$2E(A0), A1
	CMPI.b	#9, Obj_AnmFrm(A1)
	BCS.w	@DoNotRender
	CMPI.b	#$0B, Obj_AnmFrm(A1)
	BCC.w	@DoNotRender
	MOVE.w	Obj_XPos(A1), Obj_XPos(A0)
	MOVE.w  Obj_YPos(A1), Obj_YPos(A0)
	MOVE.b	Obj_AnmFrm(A1), Obj_AnmFrm(A0)
	ADDQ.b	#7, Obj_AnmFrm(A0)
	MOVE.b	#$80, $6(A0)
@DoNotRender:
	RTS
	
TitleScreen_CopyrightObjInit:
	MOVE.b	#$80, $6(A0)
	MOVE.b	#$24, $8(A0)
	MOVE.b	#5, $9(A0)
	MOVE.w	#$0120, $A(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.w	rScrollYScanFront, D0
	ADDI.w	#$014C, D0
	MOVE.w	D0, $E(A0)
	RTS
	
	
TitleScreen_Init:
	BSR.w	TitleScreen_CreateTitlePuyos
	BSR.w	TitleScreen_InitValues
	BSR.w	TitleScreen_CreateTitleObj
	
	LEA	TitleScreen_CopyrightObjInit, A1
	JSR	ObjSys_InitObjWithFunc
	BSR.w	TitleScreen_CreateArleObj
	
	LEA	TitleScreen_MainObjInit, A1
	JSR	ObjSys_InitObjWithFunc

	BCS.w	@TitleScreenDidntLoad
	MOVE.b	#$24, $8(A1)
	MOVE.w	#$0120, $A(A1)
	MOVE.b	#7, $29(A1)
	MOVE.b	#$1F, $28(A1)
@TitleScreenDidntLoad:
	RTS
	
loc_0000CE9E:
	MOVEM.l	D0, -(A7)
	CLR.w	D0
	MOVE.b	rOption_ComputerLevel, D0
	MOVE.b	@loc_0000CEB8(PC,D0.w), $00FF0104
	MOVEM.l	(A7)+, D0
	RTS
@loc_0000CEB8:
	dc.b	$00, $02, $04, $06 

TitleScreen_InitValues:
	BSR.b	loc_0000CE9E
	CLR.l	$00FF187A
	CLR.l	$00FF187E
	CLR.w	$00FF010E
	CLR.w	$00FF0110
	CLR.w	$00FF0144
	CLR.w	rOnePlayer_CurStage
	CLR.b	$00FF0115
	CLR.b	$00FF0105
	CLR.b	rCurMainPlayer
	MOVE.w	#$0011, D0
	LEA	rOnePlayer_DefeatedEnemyTbl, A1
@Loop:
	CLR.b	(A1)+
	DBF	D0, @Loop
	RTS
	
TitleScreen_ScrollBG:
	MOVE.w	rScrollYScanBack, D0
	ANDI.b	#7, D0
	BNE.w	loc_0000CF40
	MOVE.w	#$9600, D0
	SWAP	D0
	MOVE.w	$28(A0), D0
	JSR	Video_QueueBgMapSpecial
	BSR.w	loc_0000CF48
	SUBQ.b	#1, $29(A0)
	BCC.w	loc_0000CF36
	MOVE.b	#$0B, $29(A0)
loc_0000CF36:
	SUBQ.b	#1, $28(A0)
	ANDI.b	#$1F, $28(A0)
loc_0000CF40:
	SUBQ.w	#1, rScrollYScanBack
	RTS
loc_0000CF48:
	CMPI.b	#8, $29(A0)
	BNE.w	loc_0000CF98
	JSR	UpdateRNG
	ANDI.w	#$000F, D0
	CMPI.w	#7, D0
	BCC.w	loc_0000CF98
	LEA	loc_0000CF9A, A1
	JSR	loc_00002AB0
	BCS.w	loc_0000CF98
	MULU.w	#$000C, D0
	MOVE.w	$28(A0), D1
	ANDI.w	#$FF00, D1
	ADDI.w	#$E002, D1
	ADD.w	D1, D0
	MOVE.w	D0, $26(A1)
	MOVE.w	#$00E0, $28(A1)
	MOVE.l	#loc_0000CFD2, $32(A1)
loc_0000CF98:
	RTS
	
loc_0000CF9A:
	JSR	ObjSys_UpdateObjAnim
	CLR.w	D0
	MOVE.b	$9(A0), D0
	CMP.b	$8(A0), D0
	BEQ.w	loc_0000CFC2
	MOVE.b	D0, $8(A0)
	ORI.w	#$9C00, D0
	SWAP	D0
	MOVE.w	$26(A0), D0
	JSR	Video_QueueBgMapSpecial
loc_0000CFC2:
	SUBQ.w	#1, $28(A0)
	BEQ.w	loc_0000CFCC
	RTS
loc_0000CFCC:
	JMP	ObjSys_DeleteObjectA0
loc_0000CFD2:
	dc.b	$08, $02 
	dc.b	$0A
	dc.b	$01 
	dc.b	$08
	dc.b	$02 
	dc.b	$0A
	dc.b	$03 
	dc.b	$FF
	dc.b	$00 
	dc.l	loc_0000CFD2
	
	
TitleScreen_MainObjInit:
	BSR.w	TitleScreen_UpdateSndTstCode
	BSR.w	TitleScreen_ScrollBG
	
	MOVE.w	rScrollYScanFront, D0
	ADDI.w	#$00F0, D0
	MOVE.w	D0, $E(A0)
	
	MOVE.b	rPad1Press, D0
	OR.b	rPad2Press, D0
	BTST.l	#7, D0
	BEQ.w	@StartNotPressed
	; Start was pressed, check if there are coins inserted
	JSR	Arcade_CheckCoins
	BCC.w	TitleScreen_MainObjEnd
@StartNotPressed:
	BRA.w	@UselessBranch

@UselessBranch:
	MOVE.b	#4, D0
	JSR	Arcade_CheckCoins
	BCC.w	@CoinsAreInserted
	MOVE.b	#3, D0
@CoinsAreInserted:
	; Display the "Press Start" text, only if coins are inserted.
	MOVE.b	D0, $9(A0)
	MOVE.w	rFrameCount, D0
	LSL.b	#3, D0
	ANDI.b	#$80, D0
	MOVE.b	D0, $6(A0)
	RTS
	
TitleScreen_UpdateSndTstCode:
	MOVE.b	rPad1Press, D0
	OR.b	rPad2Press, D0
	ANDI.b	#$74, D0
	BNE.w	@PressABCLeft
	RTS
@PressABCLeft:
	MOVE.w	$2A(A0), D1
	MOVE.b	Title_SndTstCode(PC,D1.w), D2
	CMP.b	D2, D0
	BEQ.w	@IsCurButton
	CLR.w	$2A(A0)
	RTS
@IsCurButton:
	ADDQ.w	#1, D1
	MOVE.b	Title_SndTstCode(PC,D1.w), D0
	BMI.w	@EndOfCode
	MOVE.w	D1, $2A(A0)
	RTS
@EndOfCode:
	CLR.w	$2A(A0)
	MOVE.b	#sfxID_UnlockSndTst, D0
	JSR	SndDrv_QueueSoundEffect
	MOVE.w	rOption_SoundTestEnabled, D0
	NOT.w	D0
	MOVE.w	D0, rOption_SoundTestEnabled
	JMP	loc_0001DC02
Title_SndTstCode:
	dc.b	btnb_A, btnb_A, btnb_Left, btnb_B, btnb_B, btnb_Left, btnb_C, btnb_C, $FF
	even

TitleScreen_MainObjEnd:
	MOVE.b	#1, rCurMainPlayer
	MOVE.b	#1, $00FF1888
	MOVE.b	rPad2Press, D0
	BTST.l	#7, D0
	BNE.w	@StartPressed
	EORI.b	#1, rCurMainPlayer
	EORI.b	#1, $00FF1888
@StartPressed:
	MOVE.b	#sfxID_ConfirmSelection, D0
	JSR	SndDrv_QueueSoundEffect
	CLR.b	rBytecode_StopRun
	CLR.b	rBytecode_Ret
	JMP	ObjSys_DeleteObjectA0
	
TitleScreen_CreateTitlePuyos:
	LEA	TitleScreen_PuyoInit, A1
	JSR	ObjSys_InitObjWithFunc
	BCC.w	@Success
	RTS
@Success:
	MOVE.b	#$80, $6(A1)   ; Interpolate Flags
	MOVE.b	#$24, $8(A1)   ; mapping
	MOVE.w	#$0154, $A(A1) ; xpos
	MOVE.w	#$0070, $E(A1) ; ypos
	MOVE.l	#@TitlePuyoAnim, $32(A1)
	MOVE.w	#$0040, $26(A1); timer
	LEA	TitleScreen_PuyoInit, A1
	JSR	ObjSys_InitObjWithFunc
	BCC.w	@Success2
	RTS
@Success2:
	MOVE.b	#$80, $6(A1)
	MOVE.b	#$24, $8(A1)
	MOVE.w	#$00D4, $A(A1)
	MOVE.w	#$0070, $E(A1)
	MOVE.l	#@TitlePuyoAnim, $32(A1)
	MOVE.w	#$0050, $26(A1)
	RTS
@TitlePuyoAnim:
	dc.b	$00
	dc.b	$00 
	dc.b	$01
	dc.b	$01 
	dc.b	$00
	dc.b	$00 
	dc.b	$02
	dc.b	$02 
	dc.b	$00
	dc.b	$00 
	dc.b	$01
	dc.b	$01 
	dc.b	$00
	dc.b	$00 
	dc.b	$02
	dc.b	$02 
@TitlePuyoAnimLoop:
	dc.b	$F0, $00 
	dc.b	$01
	dc.b	$01 
	dc.b	$00
	dc.b	$00 
	dc.b	$02
	dc.b	$02 
	dc.b	$00
	dc.b	$00 
	dc.b	$01
	dc.b	$01 
	dc.b	$00
	dc.b	$00 
	dc.b	$02
	dc.b	$02 
	dc.b	$FF
	dc.b	$00 
	dc.l	@TitlePuyoAnimLoop
	
TitleScreen_PuyoInit:
	TST.w	$26(A0)
	BEQ.w	@TimerIsZero
	SUBQ.w	#1, $26(A0)
	RTS
@TimerIsZero:
	MOVE.b	#$95, $6(A0)
	MOVE.w	#$FFFF, $20(A0)
	MOVE.w	#$0800, $1C(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	JSR	ObjSys_UpdatePosInterpMove
	CMPI.w	#$00B8, $E(A0)
	BCC.w	@YPosGreaterB8
	RTS
@YPosGreaterB8:
	MOVE.w	#$00B8, $E(A0)
	MOVE.b	#sfxID_PlacePuyo, D0
	BSR.w	SndDrv_QueueSoundEffect
	JSR	ObjSys_UpdateObjNextOpTimer
	JMP	ObjSys_UpdateObjAnim
; ---------- File End: game/title_screen.asm ----------
	
Video_SetHScrollSinglePixelRows:
	MOVE.w	#$8B00, D0
	MOVE.b	rVDPRegBTbl+rvtMode3, D0
	ORI.b	#3, D0
	MOVE.b	D0, rVDPRegBTbl+rvtMode3
	RTS

Video_SetHScrollFullScreen:
	MOVE.w	#$8B00, D0
	MOVE.b	rVDPRegBTbl+rvtMode3, D0
	ANDI.b	#$FC, D0
	MOVE.b	D0, rVDPRegBTbl+rvtMode3
	JMP	Video_ClearScrollTables

; ---------- File Start: game/how_to_play_obj.asm ----------
; Note: This appears to also be used by the normal mode ending for displaying it's text as well.
HowToPlay_TextObjInit:
	LEA	@TextObjStart, A1
	JSR	ObjSys_InitObjWithFunc
	BCC.w	@AllocSuccess
	RTS
@AllocSuccess:
	MOVEM.l	D1, -(A7)
	LSL.w	#2, D0
	MOVE.w	D0, D1
	CMPI.w	#$0020, D1
	BCS.w	@UnkBranch
	MOVE.w	#$001C, D1
@UnkBranch:
	LEA	@UnkTbl, A2
	MOVE.w	(A2,D1.w), $28(A1)
	MOVE.w	$2(A2,D1.w), $2A(A1)
	MOVEM.l	(A7)+, D1
	MOVE.b	#sfxID_TextboxDialogue, $8(A1)
	LEA	@TextEntries, A2
	MOVE.l	(A2,D0.w), $32(A1)
	MOVE.l	A0, $2E(A1)
	RTS
@UnkTbl:
	dc.w 	$0080, $0001, $0080, $0001, $0080, $0001, $0080, $0001
	dc.w 	$0080, $0000, $0100, $0003, $0100, $0001, $0080, $0001
@TextObjStart:
	TST.w	$26(A0)
	BEQ.w	@RunNextEntry
	SUBQ.w	#1, $26(A0)
	RTS
@RunNextEntry:
	MOVEA.l	$32(A0), A1
	MOVE.w	(A1)+, D0
	CMPI.b	#$FF, -$2(A1)
	BEQ.w	@RunCommand
	MOVE.l	A1, $32(A0)
	BSR.w	@PrintCharacter
	MOVE.b	$8(A0), D0
	BSR.w	SndDrv_QueueSoundEffect
	MOVE.w	$2A(A0), $26(A0)
	RTS
@RunCommand:
	ANDI.w	#$00FF, D0
	MOVE.w	(A1)+, D1
	MOVE.l	A1, $32(A0)
	MOVEA.l	@CommandTable(PC,D0.w), A1
	JMP	(A1)
@CommandTable:
	dc.l	@UnkCmd0
	dc.l	@UnkCmd1
	dc.l	@UnkCmd2
	dc.l	@UnkCmd3
	dc.l    @UnkCmd4
	dc.l    @UnkCmd5
@UnkCmd4:
	movea.l $2E(a0), a1
	move.b d1, $7(a1)
	rts
@UnkCmd0:
	JMP	ObjSys_DeleteObjectA0
@UnkCmd1:
	MOVE.w	D1, $26(A0)
	RTS
@UnkCmd2:
	MOVE.w	D1, $12(A0)
	RTS
@UnkCmd3:
	MOVE.w	D1, D0
	JMP	Video_QueueBgMapFromId
@UnkCmd5:
	move.b d1, $8(a0)
	rts
@PrintCharacter:
	ORI	#$0700, SR
	EORI.w	#$8000, D0
	MOVE.w	$12(A0), D5
	JSR	Video_SetVRAMAddressWrite
	ADD.w	$28(A0), D5
	MOVE.w	D0, vdpData1
	ADDQ.b	#1, D0
	MOVE.w	D0, vdpData1
	ADDQ.b	#1, D0
	JSR	Video_SetVRAMAddressWrite
	MOVE.w	D0, vdpData1
	ADDQ.b	#1, D0
	MOVE.w	D0, vdpData1
	ANDI	#$F8FF, SR
	ADDQ.w	#4, $12(A0)
	RTS

; This table is somewhat out of order.
; This object also seems to be used by the normal mode ending, so the remaining entries may be
; for that.  Need to investigate further.
@TextEntries:
    dc.l    loc_0000D730 ; From normal mode ending?
    dc.l    loc_0000D7A4 ; From normal mode ending?
    dc.l    loc_0000D7C0 ; From normal mode ending?
    dc.l    loc_0000D81A ; From normal mode ending?
    dc.l    loc_0000D830 ; From normal mode ending?
    dc.l    loc_0000D886 ; From normal mode ending?
    dc.l    loc_0000D8E0 ; From normal mode ending?
    dc.l    loc_0000D48C ; Used: 1st
    dc.l    loc_0000D4CA ; Used: 2nd
    dc.l    loc_0000D524 ; Used: 3rd
    dc.l    loc_0000D580 ; Used: 4th
    dc.l    loc_0000D5C2 ; Used: 5th
    dc.l    loc_0000D61A ; Used: 6th
    dc.l    loc_0000D6AC ; Used: 7th
    dc.l    loc_0000D6AE ; Used: 14th
    dc.l 	NULL		 ; Unused
    dc.l    loc_0000D3A6 ; Used: (Need to check where this goes)
    dc.l    loc_0000D3BE ; Used: 8th
    dc.l    loc_0000D3DE ; Used: 9th
    dc.l    loc_0000D3F8 ; Used: 10th
    dc.l    loc_0000D410 ; Used: 11th
    dc.l    loc_0000D42A ; Used: 12th
    dc.l    loc_0000D44A ; Used: 13th
loc_0000D3A6:
    dc.b    $FF
    dc.b    $0C
    dc.b    $00
    dc.b    $2B
    dc.b    $FF
    dc.b    $08
    dc.b    $C2
    dc.b    $26
    dc.b    $03
    dc.b    $E0
    dc.b    $03
    dc.b    $8C
    dc.b    $03
    dc.b    $CC
    dc.b    $03
    dc.b    $48
    dc.b    $04
    dc.b    $B8
    dc.b    $04
    dc.b    $6C
    dc.b    $03
    dc.b    $34
    dc.b    $FF
    dc.b    $00
loc_0000D3BE:
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $48
    dc.b    $FF
    dc.b    $0C
    dc.b    $00
    dc.b    $2B
    dc.b    $FF
    dc.b    $08
    dc.b    $C2
    dc.b    $26
    dc.b    $03
    dc.b    $DC
    dc.b    $03
    dc.b    $F8
    dc.b    $03
    dc.b    $30
    dc.b    $03
    dc.b    $7C
    dc.b    $03
    dc.b    $C8
    dc.b    $03
    dc.b    $B8
    dc.b    $03
    dc.b    $40
    dc.b    $04
    dc.b    $BC
    dc.b    $03
    dc.b    $34
    dc.b    $FF
    dc.b    $00
loc_0000D3DE:
    dc.b    $FF
    dc.b    $0C
    dc.b    $00
    dc.b    $2B
    dc.b    $FF
    dc.b    $08
    dc.b    $C2
    dc.b    $26
    dc.b    $03
    dc.b    $B4
    dc.b    $03
    dc.b    $CC
    dc.b    $03
    dc.b    $30
    dc.b    $03
    dc.b    $E8
    dc.b    $03
    dc.b    $64
    dc.b    $03
    dc.b    $44
    dc.b    $04
    dc.b    $58
    dc.b    $03
    dc.b    $34
    dc.b    $FF
    dc.b    $00
loc_0000D3F8:
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $48
    dc.b    $FF
    dc.b    $0C
    dc.b    $00
    dc.b    $2B
    dc.b    $FF
    dc.b    $08
    dc.b    $C2
    dc.b    $26
    dc.b    $03
    dc.b    $D0
    dc.b    $03
    dc.b    $D0
    dc.b    $03
    dc.b    $40
    dc.b    $04
    dc.b    $14
    dc.b    $03
    dc.b    $3C
    dc.b    $FF
    dc.b    $00
loc_0000D410:
    dc.b    $FF
    dc.b    $0C
    dc.b    $00
    dc.b    $2B
    dc.b    $FF
    dc.b    $08
    dc.b    $C2
    dc.b    $26
    dc.b    $03
    dc.b    $E8
    dc.b    $03
    dc.b    $64
    dc.b    $03
    dc.b    $44
    dc.b    $04
    dc.b    $58
    dc.b    $03
    dc.b    $F0
    dc.b    $04
    dc.b    $00
    dc.b    $03
    dc.b    $F4
    dc.b    $03
    dc.b    $34
    dc.b    $FF
    dc.b    $00
loc_0000D42A:
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $40
    dc.b    $FF
    dc.b    $0C
    dc.b    $00
    dc.b    $2B
    dc.b    $FF
    dc.b    $08
    dc.b    $C2
    dc.b    $26
    dc.b    $03
    dc.b    $A0
    dc.b    $03
    dc.b    $EC
    dc.b    $04
    dc.b    $14
    dc.b    $03
    dc.b    $B8
    dc.b    $04
    dc.b    $5C
    dc.b    $03
    dc.b    $68
    dc.b    $03
    dc.b    $B0
    dc.b    $03
    dc.b    $C4
    dc.b    $03
    dc.b    $34
    dc.b    $FF
    dc.b    $00
loc_0000D44A:
    dc.b    $FF
    dc.b    $0C
    dc.b    $00
    dc.b    $2B
    dc.b    $FF
    dc.b    $08
    dc.b    $C2
    dc.b    $26
    dc.b    $04
    dc.b    $50
    dc.b    $04
    dc.b    $B0
    dc.b    $03
    dc.b    $80
    dc.b    $03
    dc.b    $9C
    dc.b    $03
    dc.b    $5C
    dc.b    $03
    dc.b    $B4
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $10
    dc.b    $FF
    dc.b    $08
    dc.b    $C3
    dc.b    $A6
    dc.b    $03
    dc.b    $4C
    dc.b    $04
    dc.b    $B8
    dc.b    $04
    dc.b    $6C
    dc.b    $03
    dc.b    $C0
    dc.b    $03
    dc.b    $E8
    dc.b    $03
    dc.b    $50
    dc.b    $04
    dc.b    $B8
    dc.b    $04
    dc.b    $6C
    dc.b    $FF
    dc.b    $08
    dc.b    $C5
    dc.b    $26
    dc.b    $03
    dc.b    $C0
    dc.b    $03
    dc.b    $E8
    dc.b    $03
    dc.b    $BC
    dc.b    $03
    dc.b    $A8
    dc.b    $03
    dc.b    $A0
    dc.b    $03
    dc.b    $EC
    dc.b    $03
    dc.b    $64
    dc.b    $03
    dc.b    $34
    dc.b    $FF
    dc.b    $00
loc_0000D48C:
    dc.b    $FF
    dc.b    $0C
    dc.b    $00
    dc.b    $2B
    dc.b    $FF
    dc.b    $08
    dc.b    $C2
    dc.b    $26
    dc.b    $04
    dc.b    $4C
    dc.b    $03
    dc.b    $B8
    dc.b    $04
    dc.b    $68
    dc.b    $03
    dc.b    $B4
    dc.b    $03
    dc.b    $58
    dc.b    $03
    dc.b    $A8
    dc.b    $03
    dc.b    $A0
    dc.b    $03
    dc.b    $C0
    dc.b    $FF
    dc.b    $08
    dc.b    $C3
    dc.b    $A6
    dc.b    $03
    dc.b    $64
    dc.b    $04
    dc.b    $08
    dc.b    $03
    dc.b    $64
    dc.b    $04
    dc.b    $08
    dc.b    $03
    dc.b    $30
    dc.b    $03
    dc.b    $7C
    dc.b    $03
    dc.b    $A8
    dc.b    $03
    dc.b    $A0
    dc.b    $FF
    dc.b    $08
    dc.b    $C5
    dc.b    $26
    dc.b    $03
    dc.b    $C0
    dc.b    $03
    dc.b    $64
    dc.b    $04
    dc.b    $08
    dc.b    $03
    dc.b    $64
    dc.b    $04
    dc.b    $08
    dc.b    $03
    dc.b    $34
    dc.b    $FF
    dc.b    $00
loc_0000D4CA:
    dc.b    $FF
    dc.b    $0C
    dc.b    $00
    dc.b    $2B
    dc.b    $FF
    dc.b    $08
    dc.b    $C2
    dc.b    $26
    dc.b    $04
    dc.b    $34
    dc.b    $04
    dc.b    $24
    dc.b    $04
    dc.b    $48
    dc.b    $03
    dc.b    $D4
    dc.b    $03
    dc.b    $B8
    dc.b    $03
    dc.b    $AC
    dc.b    $03
    dc.b    $B4
    dc.b    $FF
    dc.b    $08
    dc.b    $C3
    dc.b    $A6
    dc.b    $03
    dc.b    $74
    dc.b    $04
    dc.b    $00
    dc.b    $03
    dc.b    $74
    dc.b    $04
    dc.b    $00
    dc.b    $FF
    dc.b    $08
    dc.b    $C5
    dc.b    $30
    dc.b    $03
    dc.b    $E0
    dc.b    $04
    dc.b    $0C
    dc.b    $04
    dc.b    $BC
    dc.b    $03
    dc.b    $E0
    dc.b    $03
    dc.b    $88
    dc.b    $03
    dc.b    $34
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $40
    dc.b    $FF
    dc.b    $08
    dc.b    $C6
    dc.b    $A6
    dc.b    $03
    dc.b    $74
    dc.b    $04
    dc.b    $00
    dc.b    $03
    dc.b    $74
    dc.b    $04
    dc.b    $00
    dc.b    $03
    dc.b    $74
    dc.b    $04
    dc.b    $00
    dc.b    $03
    dc.b    $74
    dc.b    $04
    dc.b    $00
    dc.b    $FF
    dc.b    $08
    dc.b    $C8
    dc.b    $26
    dc.b    $03
    dc.b    $74
    dc.b    $04
    dc.b    $00
    dc.b    $03
    dc.b    $38
    dc.b    $03
    dc.b    $38
    dc.b    $03
    dc.b    $38
    dc.b    $FF
    dc.b    $00
loc_0000D524:
    dc.b    $FF
    dc.b    $0C
    dc.b    $00
    dc.b    $2B
    dc.b    $FF
    dc.b    $08
    dc.b    $C2
    dc.b    $26
    dc.b    $04
    dc.b    $44
    dc.b    $04
    dc.b    $2C
    dc.b    $03
    dc.b    $40
    dc.b    $04
    dc.b    $10
    dc.b    $04
    dc.b    $54
    dc.b    $03
    dc.b    $C0
    dc.b    $04
    dc.b    $A4
    dc.b    $04
    dc.b    $04
    dc.b    $FF
    dc.b    $08
    dc.b    $C3
    dc.b    $A6
    dc.b    $04
    dc.b    $00
    dc.b    $03
    dc.b    $B8
    dc.b    $FF
    dc.b    $08
    dc.b    $C5
    dc.b    $26
    dc.b    $04
    dc.b    $B4
    dc.b    $03
    dc.b    $A8
    dc.b    $03
    dc.b    $7C
    dc.b    $03
    dc.b    $A0
    dc.b    $04
    dc.b    $00
    dc.b    $03
    dc.b    $C8
    dc.b    $03
    dc.b    $70
    dc.b    $04
    dc.b    $90
    dc.b    $FF
    dc.b    $08
    dc.b    $C6
    dc.b    $A6
    dc.b    $03
    dc.b    $74
    dc.b    $03
    dc.b    $BC
    dc.b    $04
    dc.b    $00
    dc.b    $03
    dc.b    $F4
    dc.b    $03
    dc.b    $34
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $20
    dc.b    $FF
    dc.b    $08
    dc.b    $C8
    dc.b    $26
    dc.b    $03
    dc.b    $B4
    dc.b    $03
    dc.b    $E8
    dc.b    $03
    dc.b    $58
    dc.b    $04
    dc.b    $0C
    dc.b    $03
    dc.b    $B0
    dc.b    $04
    dc.b    $00
    dc.b    $03
    dc.b    $BC
    dc.b    $03
    dc.b    $3C
    dc.b    $FF
    dc.b    $00
loc_0000D580:
    dc.b    $FF
    dc.b    $0C
    dc.b    $00
    dc.b    $2B
    dc.b    $FF
    dc.b    $08
    dc.b    $C2
    dc.b    $26
    dc.b    $03
    dc.b    $6C
    dc.b    $04
    dc.b    $14
    dc.b    $03
    dc.b    $BC
    dc.b    $03
    dc.b    $84
    dc.b    $04
    dc.b    $7C
    dc.b    $03
    dc.b    $C8
    dc.b    $03
    dc.b    $D8
    dc.b    $03
    dc.b    $F4
    dc.b    $FF
    dc.b    $08
    dc.b    $C3
    dc.b    $A6
    dc.b    $03
    dc.b    $70
    dc.b    $03
    dc.b    $50
    dc.b    $04
    dc.b    $A8
    dc.b    $03
    dc.b    $74
    dc.b    $03
    dc.b    $A8
    dc.b    $03
    dc.b    $AC
    dc.b    $03
    dc.b    $74
    dc.b    $03
    dc.b    $B8
    dc.b    $FF
    dc.b    $08
    dc.b    $C5
    dc.b    $26
    dc.b    $04
    dc.b    $74
    dc.b    $03
    dc.b    $68
    dc.b    $03
    dc.b    $A0
    dc.b    $03
    dc.b    $EC
    dc.b    $03
    dc.b    $5C
    dc.b    $03
    dc.b    $E0
    dc.b    $03
    dc.b    $88
    dc.b    $03
    dc.b    $34
    dc.b    $FF
    dc.b    $00
loc_0000D5C2:
    dc.b    $FF
    dc.b    $0C
    dc.b    $00
    dc.b    $2B
    dc.b    $FF
    dc.b    $08
    dc.b    $C2
    dc.b    $26
    dc.b    $04
    dc.b    $78
    dc.b    $03
    dc.b    $E0
    dc.b    $03
    dc.b    $B4
    dc.b    $FF
    dc.b    $08
    dc.b    $C3
    dc.b    $A6
    dc.b    $04
    dc.b    $80
    dc.b    $03
    dc.b    $E4
    dc.b    $04
    dc.b    $78
    dc.b    $03
    dc.b    $70
    dc.b    $04
    dc.b    $00
    dc.b    $03
    dc.b    $B8
    dc.b    $03
    dc.b    $30
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $20
    dc.b    $FF
    dc.b    $08
    dc.b    $C5
    dc.b    $26
    dc.b    $03
    dc.b    $A0
    dc.b    $03
    dc.b    $A8
    dc.b    $03
    dc.b    $94
    dc.b    $03
    dc.b    $74
    dc.b    $03
    dc.b    $80
    dc.b    $03
    dc.b    $A0
    dc.b    $03
    dc.b    $EC
    dc.b    $03
    dc.b    $A8
    dc.b    $FF
    dc.b    $08
    dc.b    $C6
    dc.b    $A6
    dc.b    $03
    dc.b    $B0
    dc.b    $04
    dc.b    $20
    dc.b    $03
    dc.b    $40
    dc.b    $04
    dc.b    $38
    dc.b    $04
    dc.b    $1C
    dc.b    $03
    dc.b    $40
    dc.b    $04
    dc.b    $2C
    dc.b    $03
    dc.b    $40
    dc.b    $FF
    dc.b    $08
    dc.b    $C8
    dc.b    $26
    dc.b    $03
    dc.b    $9C
    dc.b    $03
    dc.b    $54
    dc.b    $03
    dc.b    $34
    dc.b    $FF
    dc.b    $00
loc_0000D61A:
    dc.b    $FF
    dc.b    $0C
    dc.b    $00
    dc.b    $2B
    dc.b    $FF
    dc.b    $08
    dc.b    $C2
    dc.b    $26
    dc.b    $04
    dc.b    $B8
    dc.b    $04
    dc.b    $6C
    dc.b    $03
    dc.b    $30
    dc.b    $04
    dc.b    $B8
    dc.b    $04
    dc.b    $6C
    dc.b    $03
    dc.b    $B4
    dc.b    $FF
    dc.b    $08
    dc.b    $C3
    dc.b    $A6
    dc.b    $04
    dc.b    $64
    dc.b    $04
    dc.b    $A0
    dc.b    $04
    dc.b    $98
    dc.b    $03
    dc.b    $3C
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $80
    dc.b    $FF
    dc.b    $0C
    dc.b    $00
    dc.b    $2B
    dc.b    $FF
    dc.b    $08
    dc.b    $C2
    dc.b    $26
    dc.b    $04
    dc.b    $94
    dc.b    $04
    dc.b    $84
    dc.b    $04
    dc.b    $3C
    dc.b    $03
    dc.b    $40
    dc.b    $04
    dc.b    $28
    dc.b    $03
    dc.b    $9C
    dc.b    $03
    dc.b    $B8
    dc.b    $03
    dc.b    $30
    dc.b    $FF
    dc.b    $08
    dc.b    $C3
    dc.b    $A6
    dc.b    $04
    dc.b    $88
    dc.b    $04
    dc.b    $70
    dc.b    $04
    dc.b    $8C
    dc.b    $03
    dc.b    $C8
    dc.b    $04
    dc.b    $30
    dc.b    $04
    dc.b    $18
    dc.b    $03
    dc.b    $40
    dc.b    $04
    dc.b    $40
    dc.b    $FF
    dc.b    $08
    dc.b    $C5
    dc.b    $26
    dc.b    $04
    dc.b    $28
    dc.b    $03
    dc.b    $C0
    dc.b    $FF
    dc.b    $08
    dc.b    $C5
    dc.b    $32
    dc.b    $03
    dc.b    $6C
    dc.b    $03
    dc.b    $84
    dc.b    $03
    dc.b    $EC
    dc.b    $03
    dc.b    $E0
    dc.b    $03
    dc.b    $D8
    dc.b    $FF
    dc.b    $08
    dc.b    $C6
    dc.b    $A6
    dc.b    $03
    dc.b    $F4
    dc.b    $04
    dc.b    $10
    dc.b    $04
    dc.b    $60
    dc.b    $03
    dc.b    $F8
    dc.b    $03
    dc.b    $90
    dc.b    $03
    dc.b    $E0
    dc.b    $03
    dc.b    $88
    dc.b    $03
    dc.b    $34
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $40
    dc.b    $FF
    dc.b    $08
    dc.b    $C8
    dc.b    $26
    dc.b    $03
    dc.b    $64
    dc.b    $04
    dc.b    $04
    dc.b    $03
    dc.b    $80
    dc.b    $03
    dc.b    $5C
    dc.b    $03
    dc.b    $BC
    dc.b    $03
    dc.b    $54
    dc.b    $03
    dc.b    $34
    dc.b    $FF
    dc.b    $00
loc_0000D6AC:
    dc.b    $FF
    dc.b    $00
loc_0000D6AE:
    dc.b    $FF
    dc.b    $0C
    dc.b    $00
    dc.b    $2B
    dc.b    $FF
    dc.b    $08
    dc.b    $C2
    dc.b    $26
    dc.b    $03
    dc.b    $78
    dc.b    $03
    dc.b    $78
    dc.b    $04
    dc.b    $14
    dc.b    $03
    dc.b    $3C
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $40
    dc.b    $FF
    dc.b    $08
    dc.b    $C3
    dc.b    $A6
    dc.b    $03
    dc.b    $6C
    dc.b    $03
    dc.b    $84
    dc.b    $03
    dc.b    $EC
    dc.b    $03
    dc.b    $E0
    dc.b    $03
    dc.b    $D8
    dc.b    $03
    dc.b    $F4
    dc.b    $03
    dc.b    $70
    dc.b    $03
    dc.b    $30
    dc.b    $FF
    dc.b    $08
    dc.b    $C5
    dc.b    $26
    dc.b    $03
    dc.b    $A4
    dc.b    $03
    dc.b    $EC
    dc.b    $03
    dc.b    $E0
    dc.b    $04
    dc.b    $10
    dc.b    $03
    dc.b    $88
    dc.b    $04
    dc.b    $00
    dc.b    $03
    dc.b    $60
    dc.b    $03
    dc.b    $34
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $80
    dc.b    $FF
    dc.b    $0C
    dc.b    $00
    dc.b    $2B
    dc.b    $FF
    dc.b    $08
    dc.b    $C2
    dc.b    $26
    dc.b    $03
    dc.b    $6C
    dc.b    $03
    dc.b    $84
    dc.b    $03
    dc.b    $EC
    dc.b    $03
    dc.b    $E0
    dc.b    $03
    dc.b    $D8
    dc.b    $03
    dc.b    $F4
    dc.b    $03
    dc.b    $CC
    dc.b    $03
    dc.b    $30
    dc.b    $FF
    dc.b    $08
    dc.b    $C3
    dc.b    $A6
    dc.b    $03
    dc.b    $6C
    dc.b    $03
    dc.b    $B8
    dc.b    $03
    dc.b    $BC
    dc.b    $04
    dc.b    $BC
    dc.b    $03
    dc.b    $D8
    dc.b    $03
    dc.b    $F4
    dc.b    $03
    dc.b    $C0
    dc.b    $03
    dc.b    $AC
    dc.b    $FF
    dc.b    $08
    dc.b    $C5
    dc.b    $26
    dc.b    $03
    dc.b    $F8
    dc.b    $04
    dc.b    $04
    dc.b    $03
    dc.b    $B0
    dc.b    $04
    dc.b    $74
    dc.b    $03
    dc.b    $68
    dc.b    $04
    dc.b    $00
    dc.b    $03
    dc.b    $98
    dc.b    $03
    dc.b    $3C
    dc.b    $FF
    dc.b    $00
loc_0000D730:
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $20
    dc.b    $FF
    dc.b    $08
    dc.b    $FA
    dc.b    $8C
    dc.b    $02
    dc.b    $E4
    dc.b    $02
    dc.b    $B0
    dc.b    $01
    dc.b    $F4
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $60
    dc.b    $FF
    dc.b    $0C
    dc.b    $00
    dc.b    $22
    dc.b    $FF
    dc.b    $08
    dc.b    $FA
    dc.b    $8C
    dc.b    $02
    dc.b    $B4
    dc.b    $02
    dc.b    $C4
    dc.b    $02
    dc.b    $D0
    dc.b    $02
    dc.b    $F0
    dc.b    $02
    dc.b    $C0
    dc.b    $02
    dc.b    $FC
    dc.b    $02
    dc.b    $C8
    dc.b    $02
    dc.b    $D4
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $40
    dc.b    $FF
    dc.b    $0C
    dc.b    $00
    dc.b    $22
    dc.b    $FF
    dc.b    $08
    dc.b    $FB
    dc.b    $0C
    dc.b    $02
    dc.b    $F8
    dc.b    $02
    dc.b    $D8
    dc.b    $02
    dc.b    $F8
    dc.b    $02
    dc.b    $D8
    dc.b    $02
    dc.b    $E8
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $08
    dc.b    $01
    dc.b    $FC
    dc.b    $02
    dc.b    $FC
    dc.b    $02
    dc.b    $C8
    dc.b    $02
    dc.b    $BC
    dc.b    $02
    dc.b    $E0
    dc.b    $02
    dc.b    $F4
    dc.b    $02
    dc.b    $B8
    dc.b    $02
    dc.b    $DC
    dc.b    $02
    dc.b    $EC
    dc.b    $01
    dc.b    $F8
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $80
    dc.b    $FF
    dc.b    $0C
    dc.b    $00
    dc.b    $22
    dc.b    $FF
    dc.b    $08
    dc.b    $FB
    dc.b    $22
    dc.b    $02
    dc.b    $CC
    dc.b    $05
    dc.b    $BC
    dc.b    $05
    dc.b    $4C
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $C0
    dc.b    $FF
    dc.b    $0C
    dc.b    $00
    dc.b    $22
    dc.b    $FF
    dc.b    $00
loc_0000D7A4:
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $20
    dc.b    $FF
    dc.b    $08
    dc.b    $FA
    dc.b    $16
    dc.b    $05
    dc.b    $30
    dc.b    $05
    dc.b    $18
    dc.b    $05
    dc.b    $30
    dc.b    $05
    dc.b    $18
    dc.b    $05
    dc.b    $24
    dc.b    $05
    dc.b    $58
    dc.b    $05
    dc.b    $1C
    dc.b    $05
    dc.b    $0C
    dc.b    $05
    dc.b    $44
    dc.b    $FF
    dc.b    $00
loc_0000D7C0:
    dc.b    $FF
    dc.b    $0C
    dc.b    $00
    dc.b    $0F
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $20
    dc.b    $FF
    dc.b    $08
    dc.b    $F9
    dc.b    $8E
    dc.b    $FF
    dc.b    $10
    dc.b    $00
    dc.b    $FE
    dc.b    $05
    dc.b    $3C
    dc.b    $05
    dc.b    $30
    dc.b    $05
    dc.b    $18
    dc.b    $05
    dc.b    $30
    dc.b    $05
    dc.b    $18
    dc.b    $05
    dc.b    $14
    dc.b    $05
    dc.b    $20
    dc.b    $05
    dc.b    $28
    dc.b    $FF
    dc.b    $10
    dc.b    $00
    dc.b    $FF
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $0A
    dc.b    $FF
    dc.b    $08
    dc.b    $FB
    dc.b    $18
    dc.b    $FF
    dc.b    $10
    dc.b    $00
    dc.b    $FE
    dc.b    $05
    dc.b    $10
    dc.b    $05
    dc.b    $38
    dc.b    $05
    dc.b    $64
    dc.b    $05
    dc.b    $04
    dc.b    $05
    dc.b    $68
    dc.b    $05
    dc.b    $10
    dc.b    $05
    dc.b    $38
    dc.b    $05
    dc.b    $64
    dc.b    $05
    dc.b    $50
    dc.b    $05
    dc.b    $04
    dc.b    $05
    dc.b    $44
    dc.b    $05
    dc.b    $40
    dc.b    $FF
    dc.b    $10
    dc.b    $00
    dc.b    $FC
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $40
    dc.b    $FF
    dc.b    $10
    dc.b    $00
    dc.b    $00
    dc.b    $FF
    dc.b    $0C
    dc.b    $00
    dc.b    $0F
    dc.b    $FF
    dc.b    $00
loc_0000D81A:
    dc.b    $FF
    dc.b    $08
    dc.b    $FA
    dc.b    $1C
    dc.b    $05
    dc.b    $3C
    dc.b    $05
    dc.b    $4C
    dc.b    $05
    dc.b    $4C
    dc.b    $05
    dc.b    $4C
    dc.b    $05
    dc.b    $48
    dc.b    $05
    dc.b    $40
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $18
    dc.b    $FF
    dc.b    $00
loc_0000D830:
    dc.b    $FF
    dc.b    $0C
    dc.b    $00
    dc.b    $0F
    dc.b    $FF
    dc.b    $08
    dc.b    $F9
    dc.b    $94
    dc.b    $05
    dc.b    $3C
    dc.b    $05
    dc.b    $2C
    dc.b    $05
    dc.b    $00
    dc.b    $05
    dc.b    $00
    dc.b    $05
    dc.b    $00
    dc.b    $05
    dc.b    $00
    dc.b    $05
    dc.b    $34
    dc.b    $05
    dc.b    $44
    dc.b    $05
    dc.b    $44
    dc.b    $05
    dc.b    $40
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $10
    dc.b    $FF
    dc.b    $0C
    dc.b    $00
    dc.b    $0F
    dc.b    $FF
    dc.b    $08
    dc.b    $F9
    dc.b    $90
    dc.b    $05
    dc.b    $3C
    dc.b    $05
    dc.b    $54
    dc.b    $05
    dc.b    $2C
    dc.b    $05
    dc.b    $08
    dc.b    $05
    dc.b    $1C
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $08
    dc.b    $FF
    dc.b    $08
    dc.b    $FB
    dc.b    $1C
    dc.b    $05
    dc.b    $30
    dc.b    $05
    dc.b    $18
    dc.b    $05
    dc.b    $30
    dc.b    $05
    dc.b    $18
    dc.b    $05
    dc.b    $60
    dc.b    $05
    dc.b    $5C
    dc.b    $05
    dc.b    $2C
    dc.b    $05
    dc.b    $44
    dc.b    $05
    dc.b    $40
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $10
    dc.b    $FF
    dc.b    $0C
    dc.b    $00
    dc.b    $0F
    dc.b    $FF
    dc.b    $00
loc_0000D886:
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $20
    dc.b    $FF
    dc.b    $08
    dc.b    $E7
    dc.b    $20
    dc.b    $43
    dc.b    $50
    dc.b    $43
    dc.b    $44
    dc.b    $43
    dc.b    $54
    dc.b    $43
    dc.b    $5C
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $40
    dc.b    $FF
    dc.b    $08
    dc.b    $EC
    dc.b    $16
    dc.b    $43
    dc.b    $94
    dc.b    $43
    dc.b    $40
    dc.b    $43
    dc.b    $98
    dc.b    $43
    dc.b    $9C
    dc.b    $43
    dc.b    $60
    dc.b    $43
    dc.b    $74
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $08
    dc.b    $43
    dc.b    $A8
    dc.b    $43
    dc.b    $4C
    dc.b    $43
    dc.b    $60
    dc.b    $43
    dc.b    $40
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $30
    dc.b    $FF
    dc.b    $08
    dc.b    $F2
    dc.b    $12
    dc.b    $43
    dc.b    $78
    dc.b    $43
    dc.b    $68
    dc.b    $43
    dc.b    $78
    dc.b    $43
    dc.b    $68
    dc.b    $43
    dc.b    $A0
    dc.b    $43
    dc.b    $A4
    dc.b    $43
    dc.b    $64
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $20
    dc.b    $43
    dc.b    $AC
    dc.b    $43
    dc.b    $6C
    dc.b    $43
    dc.b    $70
    dc.b    $43
    dc.b    $58
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $40
    dc.b    $43
    dc.b    $7C
    dc.b    $FF
    dc.b    $00
loc_0000D8E0:
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $20
    dc.b    $FF
    dc.b    $08
    dc.b    $D2
    dc.b    $0A
    dc.b    $83
    dc.b    $80
    dc.b    $83
    dc.b    $48
    dc.b    $83
    dc.b    $88
    dc.b    $83
    dc.b    $88
    dc.b    $83
    dc.b    $88
    dc.b    $FF
    dc.b    $04
    dc.b    $00
    dc.b    $20
    dc.b    $FF
    dc.b    $08
    dc.b    $D5
    dc.b    $0E
    dc.b    $83
    dc.b    $90
    dc.b    $83
    dc.b    $70
    dc.b    $83
    dc.b    $58
    dc.b    $83
    dc.b    $6C
    dc.b    $83
    dc.b    $8C
    dc.b    $83
    dc.b    $84
    dc.b    $FF
    dc.b    $00
; ---------- File End: game/how_to_play_obj.asm ----------

; Generic object to continue bytecode running when a button is pressed.
; Used in a few different places.
ObjResumeBytecodeOnBtnPress:
	lea (@MainCode).l, a1
	jmp ObjSys_InitObjWithFunc
@MainCode:
	move.b (rPad1Press).l, d0
	or.b (rPad2Press).l, d0
	andi.b #$F0, d0
	bne.w @StartABCPressed
	rts
@StartABCPressed:
	clr.b (rBytecode_StopRun).l
	move.b #2, (rBytecode_Ret).l
	jmp ObjSys_DeleteObjectA0

loc_0000D93E:
	MOVEM.l	A0, -(A7)
	CLR.w	D0
	MOVE.b	rOnePlayer_CurCutscene, D0
	LSL.w	#2, D0
	LEA	Cutscene_ArtTable, A1
	MOVEA.l	(A1,D0.w), A0
	MOVE.w	#$8000, D0
	JSR	System_DecompressComp
	MOVEM.l	(A7)+, A0
	CLR.w	D0
	MOVE.b	rOnePlayer_CurCutscene, D0
	MOVE.b	D0, D1
	ADDI.b	#9, D1
	LEA	loc_0000DA02, A1
	JSR	loc_00002AB0
	BCC.w	loc_0000D984
	RTS
loc_0000D984:
	MOVE.l	A0, $2E(A1)
	MOVE.b	#$B7, $6(A1)
	MOVE.b	#$FF, $7(A1)
	MOVE.b	D1, $8(A1)
	MOVE.w	#$0060, $A(A1)
	MOVE.w	#$0064, $E(A1)
	MOVE.w	#4, $1E(A1)
	MOVE.w	#$0038, $26(A1)
	MOVE.w	#6, $12(A1)
	MOVE.w	#$4000, $1C(A1)
	MOVEA.l	A1, A2
	CLR.w	D2
	MOVE.b	rOnePlayer_CurCutscene, D2
	LEA	loc_0000DA66, A3
	CLR.w	D3
	MOVE.b	(A3,D2.w), D3
	LEA	tbl_CutsceneCharAnims, A3
	LSL.w	#2, D2
	MOVEA.l	(A3,D2.w), A4
	LSL.w	#2, D3
	MOVE.l	(A4,D3.w), $32(A1)
	LEA	loc_000095FC, A1
	JSR	loc_00002AB0
	BCC.w	loc_0000D9F8
	RTS
loc_0000D9F8:
	MOVE.l	A2, $2E(A1)
	MOVE.b	D1, $8(A1)
	RTS
loc_0000DA02:
	JSR	ObjSys_UpdateObjAnim
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.w	$1E(A0), D0
	ADD.w	D0, $A(A0)
	SUBQ.w	#1, $26(A0)
	BEQ.w	loc_0000DA20
	RTS
loc_0000DA20:
	JSR	ObjSys_UpdateObjNextOpTimer
	JSR	ObjSys_UpdateObjAnim
	MOVEA.l	$2E(A0), A1
	TST.b	$7(A1)
	BEQ.w	loc_0000DA3A
	RTS
loc_0000DA3A:
	MOVE.w	#$0020, $26(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	JSR	ObjSys_UpdatePosInterpMove
	SUBQ.w	#1, $26(A0)
	BEQ.w	loc_0000DA56
	RTS
loc_0000DA56:
	CLR.b	$7(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	JMP	ObjSys_DeleteObjectA0
loc_0000DA66:
	dc.b	$01, $00, $03, $03, $00, $00, $04, $00, $01, $02, $01, $07, $03, $00, $04, $00 
loc_0000DA76:
	LEA	loc_0000DA02, A1
	JSR	loc_00002AB0
	BCC.w	loc_0000DA88
	RTS
loc_0000DA88:
	MOVE.l	A0, $2E(A1)
	MOVE.b	#$B7, $6(A1)
	MOVE.b	#$FF, $7(A1)
	MOVE.b	#8, $8(A1)
	MOVE.w	#$01E0, $A(A1)
	MOVE.w	#$0060, $E(A1)
	MOVE.w	#$FFFC, $1E(A1)
	MOVE.w	#$0038, $26(A1)
	MOVE.w	#$FFFA, $12(A1)
	MOVE.w	#$4000, $1C(A1)
	MOVE.l	#loc_0000DAEA, $32(A1)
	MOVEA.l	A1, A2
	LEA	Cutscene_ObjArleStart, A1
	JSR	loc_00002AB0
	BCC.w	loc_0000DADE
	RTS
loc_0000DADE:
	MOVE.l	A2, $2E(A1)
	MOVE.b	#8, $8(A1)
	RTS
loc_0000DAEA:
	dc.b	$02
	dc.b	$00 
	dc.b	$08
	dc.b	$06 
	dc.b	$0C
	dc.b	$13 
	dc.b	$00
	dc.b	$0B 
	dc.b	$FE
	dc.b	$00 
loc_0000DAF4:
	clr.w    d0
	move.b   (rOnePlayer_CurStage).l, d0
	lea (loc_0000DB16).l, a1
	move.b $0(a1, d0.w), (rOnePlayer_CurCutscene).l
	lea (loc_0000DB28).l, a1
	jmp ObjSys_InitObjWithFunc
loc_0000DB16:
	dc.b	$10
	dc.b	$00, $04, $0D, $03, $01, $0E, $07, $06, $0F, $02, $05, $08, $09, $0A, $0B, $0C, $11 
loc_0000DB28:
	MOVE.b	#$FF, $7(A0)
	BSR.w	loc_0000DC06
	JSR	ObjSys_UpdateObjNextOpTimer
	; #$11 used to be CutID_Unk2.
	CMPI.b	#$11, rOnePlayer_CurCutscene
	BCS.w	loc_0000DB5E
	MOVE.w	#$002E, D0
	JSR	Video_QueueBgMapFromId
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.w	#$002F, D0
	JSR	Video_QueueBgMapFromId
loc_0000DB5E:
	BSR.w	loc_0000DC36
	JSR	ObjSys_UpdateObjNextOpTimer
	BSR.w	loc_0000DDD2
	CLR.b	$00FF1886
	MOVE.w	#$00C0, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	ObjSys_UpdateObjNextOpTimer
	CLR.w	D0
	MOVE.b	rOnePlayer_CurStage, D0
	BSR.w	loc_0000DEEC
	MOVE.w	#1, $00FF18AA
	MOVE.w	#$00A0, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	ObjSys_UpdateObjNextOpTimer
	CMPI.b	#$11, rOnePlayer_CurStage
	BCS.w	loc_0000DBC2
	MOVE.w	#$0100, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	ObjSys_UpdateObjNextOpTimer
loc_0000DBC2:
	CLR.b	$7(A0)
	MOVE.w	#$0024, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	ObjSys_UpdateObjNextOpTimer
	BSR.w	loc_0000DE6A
	CLR.b	rBytecode_StopRun
	CLR.b	rBytecode_Ret
	ADDQ.b	#1, rOnePlayer_CurStage
	CMPI.b	#$12, rOnePlayer_CurStage
	BCC.w	loc_0000DC00
	MOVE.b	#1, rBytecode_Ret
loc_0000DC00:
	JMP	ObjSys_DeleteObjectA0
loc_0000DC06:
	CLR.w	D0
	MOVE.b	rOnePlayer_CurStage, D0
	LEA	loc_0000DC4E, A1
	CLR.w	D1
	MOVE.b	(A1,D0.w), D1
	BMI.w	loc_0000DC34
	LSL.w	#2, D1
	LEA	loc_0000DC60, A1
	MOVEA.l	(A1,D1.w), A2
	MOVEM.l	A0, -(A7)
	JSR	(A2)
	MOVEM.l	(A7)+, A0
loc_0000DC34:
	RTS
loc_0000DC36:
	CMPI.b	#cutID_EasyEnding, rOnePlayer_CurCutscene
	BCC.w	loc_0000DC4C
	JSR	loc_000055B0
	BSR.w	loc_0000D93E
loc_0000DC4C:
	RTS
loc_0000DC4E:
	dc.b	$00
	dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $01, $FF, $FF, $FF, $02, $03 
loc_0000DC60:
	dc.l	loc_0000DC70
	dc.l    loc_0000A368
	dc.l    loc_0000A3B6
	dc.l    loc_0000DCD4
loc_0000DC70:
	MOVEM.l	A0, -(A7)
	JSR	loc_0000A316
	MOVEM.l	(A7)+, A0
	MOVE.w	#$0012, D0
	BSR.w	loc_0000DEEC
	MOVEM.l	A0/D2, -(A7)
	LEA	lookup_portraitArt, A1
	MOVEA.l	$40(A1), A0
	MOVE.w	#0, D0
	JSR	System_DecompressComp
	MOVEM.l	(A7)+, D2/A0
	BSR.w	loc_0000DA76
	LEA	loc_0000DCB2, A1
	JMP	loc_00002AB0
loc_0000DCB2:
	MOVE.w	#$0080, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.w	#$9000, D0
	SWAP	D0
	JSR	Video_QueueBgMapSpecial
	JMP	ObjSys_DeleteObjectA0
loc_0000DCD4:
	MOVEM.l	A0/D2, -(A7)
	LEA	art_ingameAssets, A0
	MOVE.w	#$2000, D0
	JSR	System_DecompressComp
	LEA	art_bgGrass, A0
	MOVE.w	#$2000, D0
	JSR	System_DecompressComp
	JSR	loc_0000A3F4
	MOVEM.l	(A7)+, D2/A0
	MOVE.w	#$002D, D0
	JSR	Video_QueueBgMapFromId
	MOVE.w	#$0013, D0
	BSR.w	loc_0000DEEC
	LEA	loc_0000DD20, A1
	JMP	loc_00002AB0
loc_0000DD20:
	MOVE.l	#loc_0000DDC4, $32(A0)
	MOVE.w	#$0080, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.b	#$95, $6(A0)
	MOVE.b	#$19, $8(A0)
	MOVE.b	#$40, $9(A0)
	MOVE.w	#$0120, $A(A0)
	MOVE.w	#$FF90, $E(A0)
	MOVE.w	#$FFFF, $20(A0)
	MOVE.w	#$1000, $1C(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.w	$1E(A0), $E(A0)
	JSR	ObjSys_UpdatePosInterpMove
	JSR	ObjSys_UpdateObjAnim
	MOVE.w	$E(A0), $1E(A0)
	ADDI.w	#$FF90, $E(A0)
	CMPI.w	#$00C0, $1E(A0)
	BCC.w	loc_0000DD92
	RTS
loc_0000DD92:
	MOVE.l	#loc_0000DDAE, $32(A0)
	MOVE.b	#sfxID_PlacePuyo, D0
	BSR.w	SndDrv_QueueSoundEffect
	JSR	ObjSys_UpdateObjNextOpTimer
	JMP	ObjSys_UpdateObjAnim
loc_0000DDAE:
	dc.b	$08
	dc.b	$09 
	dc.b	$08
	dc.b	$1C 
	dc.b	$0C
	dc.b	$1D 
	dc.b	$08
	dc.b	$1C 
	dc.b	$08
	dc.b	$09 
	dc.b	$08
	dc.b	$1E 
	dc.b	$0C
	dc.b	$1F 
	dc.b	$08
	dc.b	$1E 
	dc.b	$FF
	dc.b	$00 
	dc.l	loc_0000DDAE
loc_0000DDC4:
	dc.b	$01
	dc.b	$0D 
	dc.b	$01
	dc.b	$24 
	dc.b	$01
	dc.b	$26 
	dc.b	$01
	dc.b	$25 
	dc.b	$FF
	dc.b	$00 
	dc.l	loc_0000DDC4
loc_0000DDD2:
	CLR.w	D0
	MOVE.b	rOnePlayer_CurStage, D0
	LEA	loc_0000DE48, A1
	CLR.w	D1
	MOVE.b	(A1,D0.w), D1
	BMI.w	loc_0000DE46
	LSL.w	#2, D1
	LEA	loc_0000DE5A, A1
	MOVEA.l	(A1,D1.w), A2
	MOVEM.l	A0, -(A7)
	JSR	(A2)
	MOVEM.l	(A7)+, A0
	MOVE.b	#0, D0
	MOVE.b	#0, D1
	LEA	palLookupTable, A2
	ADDA.l	#(pal_00002230-palLookupTable), A2
	CMPI.b	#$11, rOnePlayer_CurStage
	BEQ.w	loc_0000DE26
	ADDA.l	#$00000060, A2
loc_0000DE26:
	JSR	loc_00000E46
	MOVE.b	#2, D0
	MOVE.b	#0, D1
	LEA	palLookupTable, A2
	ADDA.l	#(pal_general-palLookupTable), A2
	JSR	loc_00000E46
loc_0000DE46:
	RTS
loc_0000DE48:
	dc.b	$00
	dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $01, $FF, $FF, $FF, $02, $03 
loc_0000DE5A:
	dc.l	loc_0000A334
	dc.l    loc_0000A382
	dc.l    loc_0000A3DA
	dc.l    loc_0000A334
loc_0000DE6A:
	CLR.w	D0
	MOVE.b	rOnePlayer_CurStage, D0
	LEA	loc_0000DEC8, A1
	TST.b	(A1,D0.w)
	BEQ.w	loc_0000DEAA
	JSR	ClearGP0ReloadNoInt
	MOVEM.l	A0, -(A7)
	JSR	ObjSys_Init
	MOVEM.l	(A7)+, A0
	JSR	Video_ClearScrollTables
	MOVE.w	#$FF20, rScrollYScanFront
	MOVE.w	#$FF60, rScrollYScanBack
loc_0000DEAA:
	CLR.w	D1
	MOVE.b	rOnePlayer_CurStage, D1
	LEA	loc_0000DEDA, A1
	CLR.w	D0
	MOVE.b	(A1,D1.w), D0
	ADDI.b	#$2C, D0
	JMP	Video_QueueBgMapFromId
loc_0000DEC8:
	dc.b	$00
	dc.b	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF, $00, $00, $00, $FF, $FF, $00 
loc_0000DEDA:
	dc.b	$00
	dc.b	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $04, $04, $04, $05, $00 
loc_0000DEEC:
	LSL.w	#2, D0
	LEA	credits_LookupTextbox, A1
	MOVEA.l	(A1,D0.w), A2
	MOVE.w	#$9100, D0
	SWAP	D0
	; See build_flags.asm for more information.
	if fFixCreditsShiftability == 1
		move.w #$0000, d0
	endif
	OR.l	(A2), D0
	JSR	Video_QueueBgMapSpecial
	LEA	loc_0000DF2C, A1
	JSR	loc_00002AB0
	BCC.w	loc_0000DF18
	RTS
loc_0000DF18:
	MOVE.w	(A2)+, $28(A1)
	MOVE.w	(A2)+, D0
	ADDI.w	#$0082, D0
	MOVE.w	D0, $2A(A1)
	MOVE.l	A2, $2E(A1)
	RTS
loc_0000DF2C:
	ADDQ.b	#1, $26(A0)
	MOVE.b	$26(A0), D0
	ANDI.b	#7, D0
	BEQ.w	loc_0000DF3E
	RTS
loc_0000DF3E:
	BSR.w	loc_0000DF52
	SUBQ.w	#1, $28(A0)
	BEQ.w	loc_0000DF4C
	RTS
loc_0000DF4C:
	JMP	ObjSys_DeleteObjectA0
loc_0000DF52:
	MOVE.w	#$8500, D0
	MOVEA.l	$2E(A0), A1
	MOVE.b	(A1)+, D0
	MOVE.l	A1, $2E(A0)
	MOVE.w	$2A(A0), D5
	ORI	#$0700, SR
	JSR	Video_SetVRAMAddressWrite
	ADDI.w	#$0080, D5
	MOVE.w	D0, $00C00000
	ADDQ.b	#1, D0
	JSR	Video_SetVRAMAddressWrite
	MOVE.w	D0, $00C00000
	ANDI	#$F8FF, SR
	ADDQ.w	#2, $2A(A0)
	MOVE.b	#sfxID_TextboxDialogue, D0
	BRA.w	SndDrv_QueueSoundEffect
	
; These are the textboxes for the end credits
credits_LookupTextbox:
	dc.l	credits_TextboxArleNadja
	dc.l	credits_TextboxSkeleton
	dc.l	credits_TextboxNasu
	dc.l	credits_TextboxMummy
	dc.l	credits_TextboxDraco
	dc.l	credits_TextboxSuketoudara
	dc.l	credits_TextboxSukiyapotes
	dc.l	credits_TextboxHarpy
	dc.l	credits_TextboxSasoriman
	dc.l	credits_TextboxPanotty
	dc.l	credits_TextboxZombie
	dc.l	credits_TextboxWitch
	dc.l	credits_TextboxZoDaimaoh
	dc.l	credits_TextboxSchezo
	dc.l	credits_TextboxMinotauros
	dc.l	credits_TextboxRulue
	dc.l	credits_TextboxSatan
	dc.l	credits_TextboxCarbuncle
	dc.l	credits_TextboxCast    
	dc.l	credits_TextboxAnd
credits_TextboxCast:
	creditsTextboxText $D7A4, "CAST"
	
credits_TextboxAnd:
	creditsTextboxText $D7A2, "AND***"
	
credits_TextboxArleNadja:
	creditsTextboxText $D7A2, "ARLE*NADJA"
	
credits_TextboxSkeleton:
	creditsTextboxText $D7A2, "SKELETON-T"
	
credits_TextboxNasu:
	creditsTextboxText $D7A2, "NASU GRAVE"
	
credits_TextboxMummy:
	creditsTextboxText $D7A2, "MUMMY"
	
credits_TextboxDraco:
	creditsTextboxText $D7A2, "DRACO CENTAUROS"
	
credits_TextboxSuketoudara:
	creditsTextboxText $D7A2, "SUKETOUDARA"
	
credits_TextboxHarpy:
	creditsTextboxText $D7A2, "HARPY"
	
credits_TextboxSukiyapotes:
	creditsTextboxText $D7A2, "SUKIYAPOTES"
	
credits_TextboxSasoriman:
	creditsTextboxText $D7A2, "SASORIMAN"
	
credits_TextboxZombie:
	creditsTextboxText $D7A2, "ZOMBIE"
	
credits_TextboxPanotty:
	creditsTextboxText $D7A2, "PANOTTY"
	
credits_TextboxWitch:
	creditsTextboxText $D7A2, "WITCH"
	
credits_TextboxZoDaimaoh:
	creditsTextboxText $D7A2, "ZO-DAIMAOH"
	
credits_TextboxSchezo:
	creditsTextboxText $D7A2, "SCHEZO"
	
credits_TextboxMinotauros:
	creditsTextboxText $D7A2, "MINOTAUROS"
	
credits_TextboxRulue:
	creditsTextboxText $D7A2, "RULUE"
	
credits_TextboxSatan:
	creditsTextboxText $D7A2, "SATAN"
	
credits_TextboxCarbuncle:
	creditsTextboxText $D79C, "CARBUNCLE"
	
; Dead Code
	rts
	

; Object Parameters:
; $7: Textbox Active Flag ($FF = True, $00 = False)
; $A-$B: X Pos in Textbox
; $C-$D: Y Pos in Textbox
; $E-$F: Textbox Width
; $10-$11 Textbox Height
; $12-$13 Textbox X & Y Pos (VRAM Address)
; $14-$15 Opponent Speaking Flag + ?
; $26-$27: Wait Timer
; $32-$35: Cutscene Pointer
Cutscene_ControllerObj:
	CLR.w	D0
	MOVE.b	rOnePlayer_CurCutscene, D0
	LSL.w	#2, D0
	LEA	Cutscene_CutLookupTbl, A1
	MOVE.l	(A1,D0.w), $32(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	JSR	GetMainControllerHeld
	ANDI.b	#$F0, D0
	BNE.w	CutCmd_End
	TST.w	$26(A0)
	BEQ.w	@StepCutscene
	SUBQ.w	#1, $26(A0)
	RTS
@StepCutscene:
	; Grab a byte from the cutscene pointer (A2), and store the increased pointer
	MOVEA.l	$32(A0), A2
	CLR.w	D0
	MOVE.b	(A2)+, D0
	MOVE.l	A2, $32(A0)
	
	; If the hightest bit isn't set, branch to E26C
	OR.b	D0, D0
	BPL.w	CutCmd_WriteChar
	
	; If the highest bit was set, run code depending on it
	ANDI.b	#$7F, D0
	LSL.w	#2, D0
	MOVEA.l	@Commands(PC,D0.w), A3
	
	; Get the next byte (argument to upcoming function call?)
	CLR.w	D0
	MOVE.b	(A2)+, D0
	MOVE.l	A2, $32(A0)
	JMP	(A3)
@Commands:
	dc.l	CutCmd_End
	dc.l	CutCmd_MakeTxtbox
	dc.l	CutCmd_ClearTxtbox
	dc.l	CutCmd_Wait
	dc.l	CutCmd_PlayArleAnim
	dc.l	CutCmd_PlayOpponentAnim
	dc.l	CutCmd_NewLine
	dc.l	CutCmd_ResetTextbox
	dc.l	NULL 
	dc.l	CutCmd_Whitespace
	dc.l	SndDrv_PlayVoice 
	
CutCmd_End:
	BSR.w	CutCmd_ClearTxtbox2
	JSR	ObjSys_UpdateObjNextOpTimer
	CLR.b	rBytecode_StopRun
	JMP	ObjSys_DeleteObjectA0
	
CutCmd_NewLine:
	SUBQ.l	#1, $32(A0)
CutCmd_NewLine2:
; Preform newline in textbox (if out of bounds, set to start of textbox
	CLR.w	$A(A0)
	ADDQ.w	#1, $C(A0)
	MOVE.w	$C(A0), D0
	CMP.w	$10(A0), D0
	BCS.w	@HeightNotHit
	CLR.w	$C(A0)
@HeightNotHit:
	RTS
	
CutCmd_ResetTextbox:
	SUBQ.l	#1, $32(A0)
	CLR.w	$A(A0)
	CLR.w	$C(A0)
	BSR.w	CutCmd_SetupTxtboxBgQueue
	ORI.w	#$8E00, D0
	SWAP	D0
	JMP	Video_QueueBgMapSpecial
	
CutCmd_MakeTxtbox:
	; Make copies of argument 1 (opponent speaking, width, height)
	MOVE.w	D0, D1
	MOVE.w	D0, D2
	
	; Get Textbox Width and Height into D0 and D1.
	ANDI.b	#$0F, D0
	LSR.b	#4, D1
	ANDI.b	#7, D1
	
	; Store them into $E-$11
	MOVE.w	D0, $E(A0)
	MOVE.w	D1, $10(A0)
	
	; Store opponent speaking flag into $14-$15
	LSR.w	#6, D2
	ANDI.b	#2, D2
	MOVE.w	D2, $14(A0)
	
	; Get next two arguments (Y and X position)
	MOVE.b	(A2)+, $12(A0)
	MOVE.b	(A2)+, $13(A0)
	
	; Store updated pointer
	MOVE.l	A2, $32(A0)
	
	; Reset X and Y position in the textbox
	CLR.w	$A(A0)
	CLR.w	$C(A0)
	
	; Gets the stored VRAM Address from $12(A0)
	; Puts it in the upperhalf of D0
	; Gets the stored textbox height from $10(A0)
	; LSL's by 4 and stores in the lower half of D0
	BSR.w	CutCmd_SetupTxtboxBgQueue
	
	; Create the textbox background and sprite corners
	ORI.w	#$8C00, D0
	SWAP	D0
	JSR	Video_QueueBgMapSpecial
	BSR.w	CutCmd_MakeTxtboxSprCorners
	
	; Set Textbox Active Flag
	MOVE.b	#$FF, $7(A0)
	RTS
	
CutCmd_ClearTxtbox:
	SUBQ.l	#1, $32(A0)
CutCmd_ClearTxtbox2:
	TST.b	$7(A0)
	BNE.w	@TextboxActive
	RTS
@TextboxActive:
	CLR.b	$7(A0)
	BSR.w	CutCmd_SetupTxtboxBgQueue
	ORI.w	#$8D00, D0
	SWAP	D0
	JMP	Video_QueueBgMapSpecial

CutCmd_SetupTxtboxBgQueue:
	MOVE.w	$12(A0), D0
	SWAP	D0
	CLR.w	D0
	MOVE.w	$10(A0), D0
	LSL.w	#4, D0
	OR.w	$E(A0), D0
	RTS
	
CutCmd_Whitespace:
	SUBQ.l	#1, $32(A0)
	BRA.w	CutCmd_Whitespace2
	
CutCmd_Wait:
	MULU.w	#$000A, D0
	MOVE.w	D0, $26(A0)
	RTS
	
CutCmd_PlayArleAnim:
	ORI.w	#$FF00, D0
	MOVE.w	D0, $00FF18AC
	RTS
	
CutCmd_PlayOpponentAnim:
	ORI.w	#$FF00, D0
	MOVE.w	D0, $00FF18AE
	RTS
	
CutCmd_WriteChar:
	; Load X and Y pos, and run some calcs to determine location in VRAM BG
	MOVE.w	$A(A0), D1
	MOVE.w	$C(A0), D2
	LSL.w	#1, D1
	MULU.w	#3, D2
	ADDQ.w	#1, D1
	ADDQ.w	#1, D2
	LSL.w	#1, D1
	LSL.w	#7, D2
	MOVE.w	$12(A0), D5
	ADD.w	D1, D5
	ADD.w	D2, D5
	; Calculate tile num for the top left of the letter to draw
	MOVE.w	D0, D1
	ANDI.b	#$0F, D0
	LSL.w	#1, D0
	ANDI.b	#$F0, D1
	LSL.w	#2, D1
	ADD.w	D1, D0
	ORI.w	#$8000, D0
	ORI	#$0700, SR
	
	; Setup the VDP to draw at the location in D5, and draw the top of the letter
	BSR.w	Video_SetVRAMAddressWrite
	MOVE.w	D0, vdpData1 ; Write top left of letter
	ADDQ.w	#1, D0
	MOVE.w	D0, vdpData1 ; Write top right of letter
	ADDI.w	#$0080, D5
	; Same thing, but for the bottom
	BSR.w	Video_SetVRAMAddressWrite
	ADDI.w	#$001F, D0
	MOVE.w	D0, vdpData1 ; Write bottom left of letter
	ADDQ.w	#1, D0
	MOVE.w	D0, vdpData1 ; Write bottom right of letter
	ANDI	#$F8FF, SR
	; Set the wait timer to 1 frame, and play a sound effect
	MOVE.w	#1, $26(A0)
	MOVE.b	#sfxID_TextboxDialogue, D0
	BSR.w	SndDrv_QueueSoundEffect
CutCmd_Whitespace2:
	; Increment position of cursor in textbox, and check for a new line.
	ADDQ.w	#1, $A(A0)
	MOVE.w	$A(A0), D0
	CMP.w	$E(A0), D0
	BCC.w	CutCmd_NewLine2
	RTS
	
	
CutCmd_MakeTxtboxSprCorners:
	MOVE.w	$12(A0), D0
	MOVE.w	D0, D1
	LSR.w	#1, D0
	ANDI.w	#$003F, D0
	LSR.w	#7, D1
	ANDI.w	#$003F, D1
	MOVE.w	$E(A0), D2
	LSL.w	#1, D2
	ADDQ.w	#1, D2
	LSL.w	#3, D2
	MOVE.w	$10(A0), D3
	MULU.w	#3, D3
	LSL.w	#3, D3
	LSL.w	#3, D0
	ADDI.w	#$0080, D0
	LSL.w	#3, D1
	ADDI.w	#$0080, D1
	ADD.w	D0, D2
	ADD.w	D1, D3
	MOVE.w	#3, D5
loc_0000E32C:
	LEA	loc_0000E3B8, A1
	JSR	loc_00002AB0
	BCS.w	loc_0000E370
	MOVE.l	A0, $2E(A1)
	MOVE.b	#$80, $6(A1)
	MOVE.b	#$20, $8(A1)
	MOVE.b	D5, $9(A1)
	MOVE.w	D0, $A(A1)
	BTST.l	#0, D5
	BEQ.w	loc_0000E360
	MOVE.w	D2, $A(A1)
loc_0000E360:
	MOVE.w	D1, $E(A1)
	BTST.l	#1, D5
	BEQ.w	loc_0000E370
	MOVE.w	D3, $E(A1)
loc_0000E370:
	DBF	D5, loc_0000E32C
	LEA	loc_0000E3A8, A1
	JSR	loc_00002AB0
	BCC.w	loc_0000E386
	RTS
loc_0000E386:
	MOVE.w	$14(A0), $14(A1)
	MOVE.l	A0, $2E(A1)
	MOVE.b	#$20, $8(A1)
	MOVE.b	#4, $9(A1)
	MOVE.w	D3, $E(A1)
	MOVE.b	#$80, $6(A1)
	RTS
loc_0000E3A8:
	MOVE.w	$14(A0), D0
	LEA	$00FF18B0, A1
	MOVE.w	(A1,D0.w), $A(A0)
loc_0000E3B8:
	MOVEA.l	$2E(A0), A1
	TST.b	$7(A1)
	BEQ.w	loc_0000E3C6
	RTS
loc_0000E3C6:
	JMP	ObjSys_DeleteObjectA0

Cutscene_CutLookupTbl:
	dc.l   	cutscene_SkeletonT
	dc.l   	cutscene_Suketoudara
	dc.l   	cutscene_Zombie
	dc.l   	cutscene_Draco
	dc.l   	cutscene_Nasu
	dc.l   	cutscene_Witch
	dc.l   	cutscene_Sasoriman
	dc.l   	cutscene_Harpy
	dc.l   	cutscene_ZohDaimaoh
	dc.l	cutscene_Schezo
	dc.l   	cutscene_Minotauros
	dc.l   	cutscene_Rulue
	dc.l   	cutscene_Satan
	dc.l   	cutscene_Mummy
	dc.l   	cutscene_Sukiyapotes
	dc.l   	cutscene_Panotty
	dc.l   	cutscene_EasyEnding

cutscene_Mummy:
	include "cutscene/cutscene_mummy.asm"
	even
cutscene_Sukiyapotes:
	include "cutscene/cutscene_sukiyapotes.asm"
	even
cutscene_Panotty:
	include "cutscene/cutscene_panotty.asm"
	even
cutscene_SkeletonT:
	include "cutscene/cutscene_skeletont.asm"
	even
cutscene_Suketoudara:
	include "cutscene/cutscene_suketoudara.asm"
	even
cutscene_Zombie:
	include "cutscene/cutscene_zombie.asm"
	even
cutscene_Draco:
	include "cutscene/cutscene_draco.asm"
	even
cutscene_Nasu:
	include "cutscene/cutscene_nasu.asm"
	even
cutscene_Witch:
	include "cutscene/cutscene_witch.asm"
	even
cutscene_Sasoriman:
	include "cutscene/cutscene_sasoriman.asm"
	even
cutscene_Harpy:
	include "cutscene/cutscene_harpy.asm"
	even
cutscene_ZohDaimaoh:
	include "cutscene/cutscene_zohdaimaoh.asm"
	even
cutscene_Schezo:
	include "cutscene/cutscene_schezo.asm"
	even
cutscene_Minotauros:
	include "cutscene/cutscene_minotauros.asm"
	even
cutscene_Rulue:
	include "cutscene/cutscene_rulue.asm"
	even
cutscene_Satan:
	include "cutscene/cutscene_satan.asm"
	even
cutscene_EasyEnding:
	include "cutscene/cutscene_easyending.asm"
	even

ResetUpdateSprites:
	CLR.w	rUpdateSpritesDirection
	CLR.w	rSpriteTableWordLength
	RTS
	
UpdateSprites:
	TST.w	rSpriteTableWordLength
	BEQ.w	@NeedsUpdated ; Check if sprite table needs updated
	RTS
@NeedsUpdated:
	; Setup object buffer and direction.
	LEA	ObjectBuffer, A0
	MOVEQ	#$40, D2
	TST.w	rUpdateSpritesDirection
	BEQ.w	@DontGoBackwards
	LEA	ObjectBuffer+($40*$3F), A0
	MOVEQ	#-$40, D2
@DontGoBackwards:
	LEA	rSpriteTable+8, A1
	LEA	tbl_sprMappings, A2
	LEA	rSpriteLinkTable+1, A4
	MOVE.w	#$003F, D0 ; Size of object table
	MOVE.w	#1, D1
	MOVE.b	$00FF0144, D4
	ROL.b	#1, D4
	ANDI.b	#1, D4
	EORI.b	#1, D4
	MOVE.b	$00FF0145, D5
	ROL.b	#2, D5
	ANDI.b	#2, D5
	EORI.b	#2, D5
	OR.b	D5, D4
	ORI.b	#$0C, D4
@LoopObjects:
	MOVE.b	$0(A0), D5
	AND.b	D4, D5
	BEQ.w	@SkipDrawing
	BTST.b	#7, $6(A0) ; Check if object is set to draw
	BEQ.w	@SkipDrawing
	MOVEM.l	D2, -(A7)
	BSR.w	@BuildObjectSprites
	MOVEM.l	(A7)+, D2
@SkipDrawing:
	ADDA.l	D2, A0 ; Go to next object table entry
	DBF	D0, @LoopObjects
	BSR.w	@BuildSpriteLinkedListPrio
	; Write length, invert direction for next time, and exit.
	LSL.w	#2, D1
	MOVE.w	D1, rSpriteTableWordLength
	NOT.w	rUpdateSpritesDirection
	RTS

; This will build four linked lists of sprites, one for each priority.
; This allows sprites to have a priority defined by it's link byte in the
; mapping (0-3).  0 being the highest and 3 being the lowest.
@BuildSpriteLinkedListPrio:
	LEA	rSpriteLinkTable, A0
	LEA	rSpriteLinkTable2, A1
	MOVE.w	#3, D0
	MOVE.b	#0, D2
@GotoNextPrio:
	MOVE.w	D1, D3 
	SUBQ.w	#1, D3
@GotoNextSprite:
	CMP.b	(A0,D3.w), D0
	BNE.w	@PrioNotMatch
	BSR.w	@MakeSpriteLink
@PrioNotMatch:
	DBF	D3, @GotoNextSprite
	DBF	D0, @GotoNextPrio
	; Write finalized link entries
	LEA	rSpriteTable, A0
	MOVE.w	D1, D0
	SUBQ.w	#1, D0
@LoopSpriteLinkWrite:
	MOVE.b	(A1)+, $3(A0) ; Write Link byte for sprite
	ADDA.l	#8, A0
	DBF	D0, @LoopSpriteLinkWrite
	RTS

@MakeSpriteLink:
	MOVE.b	D2, (A1,D3.w)
	MOVE.b	D3, D2
	RTS

@BuildObjectSprites:
	; Load Pointer to Objects sprite map (a5)
	CLR.w	D2
	MOVE.b	Obj_SprMap(A0), D2
	LSL.w	#2, D2
	MOVEA.l	(A2,D2.w), A5
	; Load Pointer to specific frame of sprite map (a3)
	CLR.w	D2
	MOVE.b	Obj_AnmFrm(A0), D2
	LSL.w	#2, D2
	MOVEA.l	(A5,D2.w), A3
	; Get count of sprites in this frame
	MOVE.w	(A3)+, D2
	SUBQ.w	#1, D2
@LoopSprites:
	MOVEM.l	A3, -(A7)
	BSR.w	@BuildSprite ; Build sprite and put in sprite table
	MOVEM.l	(A7)+, A3
	ADDA.l	#8, A3
	DBF	D2, @LoopSprites
	RTS

@BuildSprite:
	; Check if sprite table is full
	CMPI.w	#$0050, D1
	BCS.w	@TableNotFull
	RTS
@TableNotFull:
	; Increment sprite count
	ADDQ.w	#1, D1
	; Get and store Y pos of sprite
	MOVE.w	(A3)+, D3
	ADD.w	Obj_YPos(A0), D3
	SUB.w	rScrollYScanFront, D3
	MOVE.w	D3, (A1)+
	; Get and store sprite width/height
	MOVE.b	(A3)+, (A1)+
	; Skip link byte, store it in a different buffer instead.
	ADDA.l	#1, A1
	MOVE.b	(A3)+, (A4)+
	; Store Tile ID and Flags
	MOVE.w	(A3)+, (A1)+
	; Load and Store X Coordinate
	MOVE.w	(A3)+, D3
	ADD.w	Obj_XPos(A0), D3
	BNE.w	@NotZero ; X Coordinate not allowed to be 0?
	ADDQ.w	#1, D3
@NotZero:
	MOVE.w	D3, (A1)+
	RTS
	
; End of UpdateSprites
	
loc_0000F0D2:
	MOVEM.l	A2/D4/D3, -(A7)
	MOVE.b	D2, D3
	LSL.b	#1, D3
	LEA	$00FF1C6C, A2
	TST.b	$2A(A0)
	BEQ.w	loc_0000F0EE
	LEA	$00FF1C76, A2
loc_0000F0EE:
	MOVE.b	$8(A2), D4
	CMP.b	D4, D3
	BCS.w	loc_0000F10A
	MOVE.b	$9(A2), D4
	CMP.b	D3, D4
	BCS.w	loc_0000F10A
	MOVEM.l	(A7)+, D3/D4/A2
loc_0000F106:
	BRA.w	loc_0000F110
loc_0000F10A:
	MOVEM.l	(A7)+, D3/D4/A2
	RTS
loc_0000F110:
	MOVEM.l	A1, -(A7)
	LEA	$00FF1C6C, A1
	TST.b	$2A(A0)
	BEQ.w	loc_0000F128
	LEA	$00FF1C76, A1
loc_0000F128:
	MOVE.b	#0, $1(A1)
	MOVEM.l	(A7)+, A1
	RTS
loc_0000F134:
	MOVE.b	rCurGameMode, D2
	OR.b	rOnePlayer_CurStage, D2
	OR.b	$2A(A0), D2
	BNE.w	loc_0000F18A
	LEA	loc_0000F18C, A1
	JSR	loc_00002AB0
	BCS.w	loc_0000F18A
	MOVE.b	$0(A0), $0(A1)
	MOVE.b	#$80, $6(A1)
	MOVE.b	#$2A, $8(A1)
	MOVE.b	#3, $9(A1)
	JSR	loc_00005064
	ADDI.w	#$0030, D0
	MOVE.w	D0, $A(A1)
	MOVE.w	#$00D0, $E(A1)
	MOVE.w	#$00D0, $26(A1)
loc_0000F18A:
	RTS
loc_0000F18C:
	subq.w #1, $26(a0)
	beq.w loc_0000F1B6
lov_0000F194:
	addq.b #1, $28(a0)
	andi.b #$1F, $28(a0)
	move.b #$80, $6(a0)
	cmpi.b #$18, $28(a0)
	bcs.w loc_0000F1B4
	move.b #0, $6(a0)
loc_0000F1B4:
	rts
loc_0000F1B6:
	move.b #$85, $6(a0)
	move.w #$FFFF, $20(a0)
	move.w #$3000, $1c(a0)
	move.w #1, $16(a0)
	jsr ObjSys_UpdateObjNextOpTimer
	jsr ObjSys_UpdatePosInterpMove
	bcs.w loc_0000F1E0
	rts
loc_0000F1E0:
	jmp ObjSys_DeleteObjectA0
loc_0000F1E6:
	MOVE.b	rCurGameMode, D2
	OR.b	rOnePlayer_CurStage, D2
	OR.b	$2A(A0), D2
	BNE.w	loc_0000F23E
	LEA	loc_0000F28A, A1
	JSR	ObjSys_InitObjWithFunc
	BCS.w	loc_0000F23E
	MOVE.b	$0(A0), $0(A1)
	MOVE.l	A0, $2E(A1)
	MOVE.b	D0, $26(A1)
	MOVE.b	D1, $27(A1)
	MOVE.b	$2A(A0), $2A(A1)
	MOVE.w	#$0015, $28(A1)
	CMP.b	D0, D1
	BNE.w	loc_0000F234
	MOVE.w	#$000A, $28(A1)
loc_0000F234:
	MOVE.b	#$FF, $7(A1)
	BSR.w	loc_0000F240
loc_0000F23E:
	RTS
loc_0000F240:
	LEA	$00FF18D4, A1
	TST.b	$2A(A0)
	BEQ.w	loc_0000F254
	LEA	$00FF1A7E, A1
loc_0000F254:
	JSR	loc_00005022
	MOVE.w	#5, D0
	MOVE.w	#$009C, D1
loc_0000F262:
	MOVE.w	D1, D2
loc_0000F264:
	TST.b	(A2,D2.w)
	BEQ.w	loc_0000F272
	SUBI.w	#$000C, D2
	BCC.b	loc_0000F264
loc_0000F272:
	MOVE.w	D2, (A1)+
	SUBI.w	#$000C, D2
	MOVE.w	D2, (A1)+
	ADDQ.w	#2, D1
	DBF	D0, loc_0000F262
	ADDA.l	#$00000092, A1
	CLR.w	(A1)
	RTS
loc_0000F28A:
	BSR.w	loc_0000F32A
	BCS.w	loc_0000F318
	BSR.w	loc_0000F380
	JSR	loc_00004EAA
	BSR.w	loc_0000F3AE
	ADDA.l	#$00000018, A1
	ADDA.l	#$00000018, A2
	MOVE.w	#$0047, D0
	CLR.w	D1
loc_0000F2B2:
	MOVE.w	D0, D2
	LSL.w	#1, D2
	TST.b	(A3,D2.w)
	BMI.w	loc_0000F2D0
	TST.b	(A2,D2.w)
	BEQ.w	loc_0000F2D0
	ADDQ.w	#1, D1
	MOVE.w	D1, D2
	LSL.w	#1, D2
	MOVE.w	D0, (A1,D2.w)
loc_0000F2D0:
	DBF	D0, loc_0000F2B2
	MOVE.w	D1, (A1)
	BEQ.w	loc_0000F2DE
	BSR.w	loc_0000F45A
loc_0000F2DE:
	SUBQ.w	#1, $28(A0)
	BCS.w	loc_0000F2E8
	RTS
loc_0000F2E8:
	MOVE.b	#$FF, $2D(A0)
	CLR.w	$28(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	ADDI.w	#$000C, $28(A0)
	MOVE.b	$28(A0), D0
	CMP.b	$2C(A0), D0
	BCS.w	loc_0000F30E
	CLR.b	$28(A0)
loc_0000F30E:
	BSR.w	loc_0000F32A
	BCS.w	loc_0000F318
	RTS
loc_0000F318:
	MOVE.b	#0, $7(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	JMP	ObjSys_DeleteObjectA0
loc_0000F32A:
	MOVEA.l	$2E(A0), A1
	MOVE.b	$7(A1), D0
	ANDI.b	#3, D0
	CMPI.b	#3, D0
	BNE.w	loc_0000F37A
	TST.b	rCurGameMode
	BNE.w	loc_0000F358
	TST.w	$00FF18C8
	BNE.w	loc_0000F37A
	ANDI	#$FFFE, SR
	RTS
loc_0000F358:
	TST.b	$2B(A0)
	BNE.w	loc_0000F37A
	CLR.w	D0
	MOVE.b	$2A(A0), D0
	LEA	$00FF18C8, A1
	TST.b	(A1,D0.w)
	BNE.w	loc_0000F37A
	ANDI	#$FFFE, SR
	RTS
loc_0000F37A:
	ORI	#1, SR
	RTS
loc_0000F380:
	BSR.w	loc_0000F3CC
	TST.w	D0
	BMI.w	loc_0000F398
	MOVE.b	$26(A0), D2
	LSL.b	#4, D2
	ORI.b	#$80, D2
	MOVE.b	D2, (A2,D0.w)
loc_0000F398:
	TST.w	D1
	BMI.w	loc_0000F3AC
	MOVE.b	$27(A0), D2
	LSL.b	#4, D2
	ORI.b	#$80, D2
	MOVE.b	D2, (A2,D1.w)
loc_0000F3AC:
	RTS
loc_0000F3AE:
	BSR.w	loc_0000F3CC
	TST.w	D0
	BMI.w	loc_0000F3BE
	MOVE.b	#0, (A2,D0.w)
loc_0000F3BE:
	TST.w	D1
	BMI.w	loc_0000F3CA
	MOVE.b	#0, (A2,D1.w)
loc_0000F3CA:
	RTS
loc_0000F3CC:
	JSR	loc_00005022
	LEA	$00FF18D4, A1
	TST.b	$2A(A0)
	BEQ.w	loc_0000F3E6
	LEA	$00FF1A7E, A1
loc_0000F3E6:
	MOVE.w	$28(A0), D2
	LSL.w	#2, D2
	MOVE.w	loc_0000F402(PC,D2.w), D3
	LSL.w	#1, D3
	MOVE.w	(A1,D3.w), D0
	MOVE.w	loc_0000F404(PC,D2.w), D3
	LSL.w	#1, D3
	MOVE.w	(A1,D3.w), D1
	RTS
loc_0000F402:
	dc.w	$0000
loc_0000F404:
	dc.w	$0001, $0002, $0003, $0004, $0005, $0006, $0007, $0008, $0009, $000A, $000B, $0000, $0002, $0002, $0004, $0004, $0006, $0006, $0008, $0008, $000A, $0001, $0000, $0003, $0002, $0005, $0004, $0007, $0006, $0009, $0008, $000B 
	dc.w	$000A, $0002, $0000, $0004, $0002, $0006, $0004, $0008, $0006, $000A, $0008 ;0x20
loc_0000F45A:
	BSR.w	loc_0000F4E2
	BCC.w	loc_0000F464
	RTS
loc_0000F464:
	LEA	$00FF18EC, A2
	TST.b	$2A(A0)
	BEQ.w	loc_0000F478
	LEA	$00FF1A96, A2
loc_0000F478:
	JSR	loc_00005064
	ADDQ.w	#8, D0
	ADDQ.w	#8, D1
	MOVE.w	(A2)+, D2
	SUBQ.w	#1, D2
loc_0000F486:
	LEA	loc_0000F542, A1
	JSR	loc_00002AB0
	BCS.w	loc_0000F4CC
	MOVE.b	$0(A0), $0(A1)
	MOVE.l	A0, $2E(A1)
	MOVE.b	#$2A, $8(A1)
	MOVE.l	#loc_0000F4D6, $32(A1)
	MOVE.b	$2C(A0), $26(A1)
	CLR.l	D3
	MOVE.w	(A2)+, D3
	DIVU.w	#6, D3
	LSL.l	#4, D3
	ADD.w	D1, D3
	MOVE.w	D3, $E(A1)
	SWAP	D3
	ADD.w	D0, D3
	MOVE.w	D3, $A(A1)
loc_0000F4CC:
	DBF	D2, loc_0000F486
	ADDQ.b	#1, $2C(A0)
	RTS
loc_0000F4D6:
	dc.b	$01
	dc.b	$00 
	dc.b	$01
	dc.b	$01 
	dc.b	$01
	dc.b	$02 
	dc.b	$FF
	dc.b	$00 
	dc.l	loc_0000F4D6
loc_0000F4E2:
	MOVEA.l	A1, A2
	ADDA.l	#$00000092, A2
	CLR.w	D0
loc_0000F4EC:
	MOVE.w	(A2,D0.w), D1
	BEQ.w	loc_0000F51E
	MOVEM.l	A1, -(A7)
	MOVE.b	#0, D2
loc_0000F4FC:
	MOVE.w	(A1)+, D3
	CMP.w	(A2,D0.w), D3
	BEQ.w	loc_0000F50A
	MOVE.b	#$FF, D2
loc_0000F50A:
	ADDQ.w	#2, D0
	DBF	D1, loc_0000F4FC
	MOVEM.l	(A7)+, A1
	TST.b	D2
	BNE.b	loc_0000F4EC
	ORI	#1, SR
	RTS
loc_0000F51E:
	MOVE.w	(A1), D1
	ADDQ.w	#1, D1
	LSL.w	#1, D1
	ADD.w	D0, D1
	BCC.w	loc_0000F52C
	RTS
loc_0000F52C:
	MOVE.w	(A1), D1
loc_0000F52E:
	MOVE.w	(A1)+, (A2,D0.w)
	ADDQ.w	#2, D0
	DBF	D1, loc_0000F52E
	CLR.w	(A2,D0.w)
	ANDI	#$FFFE, SR
	RTS
loc_0000F542:
	MOVEA.l	$2E(A0), A1
	TST.b	$7(A1)
	BEQ.w	loc_0000F576
	JSR	ObjSys_UpdateObjAnim
	MOVE.b	#0, $6(A0)
	TST.b	$2D(A1)
	BEQ.w	loc_0000F574
	MOVE.b	$28(A1), D0
	CMP.b	$26(A0), D0
	BNE.w	loc_0000F574
	MOVE.b	#$80, $6(A0)
loc_0000F574:
	RTS
loc_0000F576:
	JMP	ObjSys_DeleteObjectA0
loc_0000F57C:
	LEA	$00FF1C6C, A2
	MOVE.w	#9, D0
	CLR.w	D1
loc_0000F588:
	MOVE.w	D1, (A2)+
	DBF	D0, loc_0000F588
	MOVE.b	rCurGameMode, D0
	ANDI.b	#3, D0
	BEQ.w	loc_0000F59E
	RTS
loc_0000F59E:
	CLR.w	$00FF18C8
	CLR.w	$00FF2286
	LEA	loc_0000F5B6, A1
	JMP	ObjSys_InitObjWithFunc
loc_0000F5B6:
	TST.w	$00FF18C8
	BNE.w	loc_0000F5DE
	ADDQ.w	#1, $26(A0)
	ANDI.w	#$7FFF, $26(A0)
	ADDQ.w	#1, $28(A0)
	ANDI.w	#$7FFF, $28(A0)
	BSR.w	loc_0000F68E
	BSR.w	loc_0000F600
	RTS
loc_0000F5DE:
	ADDQ.w	#1, $00FF0C5C
	MOVE.b	#3, D0
	LEA	palLookupTable, A2
	ADDA.l	#(pal_general-palLookupTable), A2
	JSR	Video_LoadPaletteIntoIndex
	JMP	ObjSys_DeleteObjectA0
loc_0000F600:
	TST.w	$2A(A0)
	BEQ.w	loc_0000F62A
	SUBQ.w	#1, $2A(A0)
	BNE.w	loc_0000F67A
	MOVE.b	#3, D0
	MOVE.b	#0, D1
	LEA	palLookupTable, A2
	ADDA.l	#(pal_general-palLookupTable), A2
	JMP	loc_00000E46
loc_0000F62A:
	MOVE.w	$00FF2286, D0
	LSR.w	#3, D0
	CMPI.w	#9, D0
	BCS.w	loc_0000F63E
	MOVE.w	#8, D0
loc_0000F63E:
	LSL.w	#1, D0
	LEA	loc_0000F67C, A1
	MOVE.w	(A1,D0.w), D1
	CMP.w	$28(A0), D1
	BCC.w	loc_0000F67A
	CLR.w	$28(A0)
	MOVE.b	#3, D0
	MOVE.b	#1, D1
	MOVE.b	#3, D2
	LEA	palLookupTable, A2
	ADDA.l	#(pal_optionsTextWhite-palLookupTable), A2
	JSR	loc_00000E28
	MOVE.w	#$0026, $2A(A0)
loc_0000F67A:
	RTS
loc_0000F67C:
	dc.w	$FFFF, $FFFF, $FFFF, $FFFF, $FFFF, $FFFF, $FFFF, $0060, $0030 
loc_0000F68E:
	MOVE.w	$00FF2286, D0
	LSR.w	#3, D0
	CMPI.w	#9, D0
	BCS.w	loc_0000F6A2
	MOVE.w	#8, D0
loc_0000F6A2:
	LSL.w	#1, D0
	LEA	loc_0000F72C, A1
	MOVE.w	(A1,D0.w), D1
	CMP.w	$26(A0), D1
	BCC.w	loc_0000F72A
	CLR.w	$26(A0)
	LEA	loc_0000F74A, A1
	JSR	loc_00002AB0
	BCS.w	loc_0000F72A
	MOVE.b	#$25, $8(A1)
	MOVE.w	#$1800, $1C(A1)
	MOVE.w	#$FFFF, $20(A1)
	JSR	UpdateRNG
	CLR.w	D1
	MOVE.b	D0, D1
	ANDI.b	#$7F, D1
	ADDI.w	#$0240, D1
	ANDI.b	#$5F, D0
	ADDI.b	#$90, D0
	MOVE.l	#loc_0000F73E, $32(A1)
	JSR	SignedSinWithMul
	MOVE.l	D2, $16(A1)
	ASL.l	#4, D2
	SWAP	D2
	ADDI.w	#$0110, D2
	MOVE.w	D2, $E(A1)
	JSR	SignedCosWithMul
	MOVE.l	D2, $12(A1)
	ASL.l	#4, D2
	SWAP	D2
	ADDI.w	#$0120, D2
	MOVE.w	D2, $A(A1)
loc_0000F72A:
	RTS
loc_0000F72C:
	dc.w	$FFFF, $FFFF, $FFFF, $FFFF, $FFFF, $FFFF, $0003, $0002, $0001 
loc_0000F73E:
	dc.b	$0C
	dc.b	$0A 
	dc.b	$06
	dc.b	$06 
	dc.b	$FE
	dc.b	$00 
loc_0000F744:
	dc.b	$03
	dc.b	$06 
	dc.b	$03
	dc.b	$0A 
	dc.b	$FE
	dc.b	$00 
loc_0000F74A:
	JSR	ObjSys_UpdateObjAnim
	MOVE.b	#$87, $6(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	JSR	ObjSys_UpdatePosInterpMove
	JSR	ObjSys_UpdateObjAnim
	BCS.w	loc_0000F76E
	RTS
loc_0000F76E:
	MOVE.l	#loc_0000F744, $32(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	JSR	ObjSys_UpdateObjAnim
	BCS.w	loc_0000F788
	RTS
loc_0000F788:
	JMP	ObjSys_DeleteObjectA0
	RTS
loc_0000F790:
	MOVEM.l	D0, -(A7)
	MOVE.w	#5, D0
	TST.b	$2A(A0)
	BEQ.w	loc_0000F7A6
	MOVE.b	rOnePlayer_CurCutscene, D0
loc_0000F7A6:
	LSL.w	#2, D0
	MOVEA.l	loc_0000F7B2(PC,D0.w), A2
	MOVEM.l	(A7)+, D0
	RTS
loc_0000F7B2:
	dc.l	loc_0000F7F2
	dc.l	loc_0000F812
	dc.l	loc_0000F83A
	dc.l	loc_0000F80A
	dc.l	loc_0000F7FA
	dc.l	loc_0000F842
	dc.l	loc_0000F82A
	dc.l	loc_0000F822
	dc.l	loc_0000F84A
	dc.l	loc_0000F852
	dc.l	loc_0000F85A
	dc.l	loc_0000F862
	dc.l	loc_0000F86A
	dc.l	loc_0000F802
	dc.l	loc_0000F81A
	dc.l	loc_0000F832
loc_0000F7F2:
	dc.b	$00, $C0, $03, $00, $00, $00, $FF, $00 
loc_0000F7FA:
	dc.b	$00, $40, $FF, $00, $00, $00, $FF, $83 
loc_0000F802:
	dc.b	$00, $10, $FF, $00, $00, $00, $FF, $83 
loc_0000F80A:
	dc.b	$00 
	dc.b	$80, $FF, $00, $00 
	dc.b	$00 
	dc.b	$FF
	dc.b	$82
loc_0000F812:
	dc.b	$00 
	dc.b	$60, $FF, $00, $00 
	dc.b	$00 
	dc.b	$FF
	dc.b	$83
loc_0000F81A:
	dc.b	$00, $20, $08, $00, $00, $00, $FF, $83 
loc_0000F822:
	dc.b	$00, $08, $08, $00, $00, $00, $FF, $83 
loc_0000F82A:
	dc.b	$40, $08, $FF, $30, $24, $00, $0C, $83 
loc_0000F832:
	dc.b	$00, $00, $FF, $00, $00, $00, $FF, $83 
loc_0000F83A:
	dc.b	$20, $00, $FF, $3C, $30, $6E, $FF, $83 
loc_0000F842:
	dc.b	$10
	dc.b	$00 
	dc.b	$FF
	dc.b	$30
	dc.b	$30 
	dc.b	$2C
	dc.b	$FF
	dc.b	$83
loc_0000F84A:
	dc.b	$00, $00, $FF, $00, $00, $00, $FF, $83 
loc_0000F852:
	dc.b	$00, $00, $FF, $3C, $30, $2A, $FF, $83 
loc_0000F85A:
	dc.b	$00, $00, $FF, $30, $24, $66, $FF, $83 
loc_0000F862:
	dc.b	$00, $00, $FF, $30, $24, $00, $08, $83 
loc_0000F86A:
	dc.b	$00, $00, $FF, $24, $24, $00, $08, $83 
Battle_PlayerObj_UselessFunc:
	RTS
loc_0000F874:
	MOVE.b	rCurGameMode, D0
	BTST.l	#2, D0
	BNE.w	loc_0000F89C
	LSL.b	#1, D0
	OR.b	$2A(A0), D0
	EORI.b	#1, D0
	AND.b	debug_CpuPlayer, D0
	BEQ.w	loc_0000F89C
	ANDI	#$FFFE, SR
	RTS
loc_0000F89C:
	ORI	#1, SR
	RTS
loc_0000F8A2:
	LEA	$00FF1C6C, A6
	TST.b	$2A(A0)
	BEQ.w	loc_0000F8B6
	LEA	$00FF1C76, A6
loc_0000F8B6:
	CMPI.w	#2, rMinuteTimer+2
	BCS.w	loc_0000F8CC
	MOVE.b	#1, $0(A6)
	BRA.w	loc_0000F904
loc_0000F8CC:
	TST.b	$0(A6)
	BNE.w	loc_0000F8EE
	MOVE.b	$9(A4), D0
	CMP.b	$3(A2), D0
	BCS.w	loc_0000F904
	EORI.b	#1, $0(A6)
	CLR.b	$1(A6)
	BRA.w	loc_0000F904
loc_0000F8EE:
	MOVE.b	$9(A4), D0
	CMP.b	$4(A2), D0
	BCC.w	loc_0000F904
	EORI.b	#1, $0(A6)
	BRA.w	loc_0000F904
loc_0000F904:
	CLR.w	D0
	MOVE.b	$0(A6), D0
	RTS
loc_0000F90C:
	TST.b	$2A(A0)
	BNE.w	loc_0000F916
	RTS
loc_0000F916:
	CLR.w	D0
	MOVE.b	rOnePlayer_CurCutscene, D0
	LSL.b	#2, D0
	MOVEA.l	loc_0000F926(PC,D0.w), A6
	JMP	(A6)
loc_0000F926:
	dc.l	loc_0000F966 
	dc.l	loc_0000F9A6
	dc.l	loc_0000F966 
	dc.l	loc_0000F966
	dc.l	loc_0000F966 
	dc.l	loc_0000F966 
	dc.l	loc_0000F966 
	dc.l	loc_0000F968 
	dc.l	loc_0000F966 
	dc.l	loc_0000F966 
	dc.l	loc_0000F966 
	dc.l	loc_0000F966 
	dc.l	loc_0000F966 
	dc.l	loc_0000F966 
	dc.l	loc_0000F966 
	dc.l	loc_0000F966 
loc_0000F966:
	RTS
loc_0000F968:
	MOVE.b	$0(A5), D0
	OR.b	$A(A5), D0
	BNE.w	loc_0000F976
	RTS
loc_0000F976:
	MOVE.b	#0, $20(A0)
	MOVE.b	#0, $21(A0)
	MOVE.b	$0(A5), D0
	CMP.b	$A(A5), D0
	BCC.w	loc_0000F994
	MOVE.b	#5, $20(A0)
loc_0000F994:
	MOVEM.l	(A7)+, A6
	MOVE.b	#0, $2C(A0)
	MOVE.b	#$FF, $2D(A0)
	RTS
loc_0000F9A6:
	CMPI.w	#$0018, $8(A4)
	BCS.w	loc_0000F9B2
	RTS
loc_0000F9B2:
	MOVEM.l	(A7)+, A6
	MOVE.w	#5, D0
	CLR.b	D1
loc_0000F9BC:
	MOVE.w	D0, D2
	LSL.w	#1, D2
	MOVE.b	(A5,D2.w), D3
	CMP.b	D1, D3
	BCS.w	loc_0000F9D0
	MOVE.b	D0, $20(A0)
	MOVE.b	D3, D1
loc_0000F9D0:
	DBF	D0, loc_0000F9BC
	MOVE.b	#0, $21(A0)
	MOVE.b	#0, $2C(A0)
	MOVE.b	#$FF, $2D(A0)
	RTS
loc_0000F9E8:
	BSR.w	loc_0000F874
	BCS.w	loc_0000F9F2
	RTS
loc_0000F9F2:
	JSR	loc_00005022
	MOVEA.l	A2, A3
	MOVEA.l	A2, A4
	MOVEA.l	A2, A5
	BSR.w	loc_0000F790
	ADDA.l	#$000000A8, A3
	ADDA.l	#$00000294, A4
	ADDA.l	#$0000029E, A5
	MOVEA.l	$32(A0), A1
	BSR.w	loc_0000F8A2
	MOVE.b	D0, D3
	BSR.w	loc_0000FAE6
	BSR.w	loc_000101DE
	BSR.w	loc_0000F90C
	CLR.w	D0
	LEA	$00FF1C3C, A6
loc_0000FA32:
	MOVE.b	$26(A1), D1
	BSR.w	loc_0000FB4E
	MOVE.w	D4, (A6)+
	MOVE.b	$27(A1), D1
	BSR.w	loc_0000FB4E
	MOVE.w	D4, (A6)+
	ADDQ.w	#1, D0
	CMPI.w	#$000C, D0
	BCS.b	loc_0000FA32
	MOVE.w	#$0015, D0
	CLR.w	D1
	CLR.w	D2
	LEA	loc_0000FA8E, A1
	LEA	$00FF1C3C, A6
loc_0000FA62:
	MOVE.w	(A1)+, D3
	MOVE.w	(A1)+, D4
	CLR.w	D5
	MOVE.w	(A6,D3.w), D6
	BEQ.w	loc_0000FA7A
	MOVE.w	(A6,D4.w), D5
	BEQ.w	loc_0000FA7A
	ADD.w	D6, D5
loc_0000FA7A:
	CMP.w	D1, D5
	BCS.w	loc_0000FA84
	MOVE.w	D5, D1
	MOVE.w	D0, D2
loc_0000FA84:
	DBF	D0, loc_0000FA62
	MOVE.w	D2, D0
	BRA.w	loc_0000FD42
loc_0000FA8E:
	dc.w	$002C, $0026, $0024, $001E, $001C, $0016, $0014, $000E, $000C, $0006, $0024, $002E, $001C, $0026, $0014, $001E, $000C, $0016, $0004, $000E, $0028, $002E, $0020, $0026, $0018, $001E, $0010, $0016, $0008, $000E, $0000, $0006 
	dc.w	$002C, $002A, $0024, $0022, $001C, $001A, $0014, $0012, $000C, $000A, $0004, $0002 ;0x20
loc_0000FAE6:
	MOVEM.l	D0, -(A7)
	MOVE.b	(A2,D0.w), D2
	BSR.w	loc_0000FB18
	BSR.w	loc_0000FB34
	MOVE.b	D0, $2C(A0)
	MOVE.b	$2(A2), D2
	BSR.w	loc_0000FB34
	MOVE.b	D0, $2D(A0)
	MOVE.b	#0, $27(A0)
	MOVE.b	#0, $26(A0)
	MOVEM.l	(A7)+, D0
	RTS
loc_0000FB18:
	MOVE.b	$00FF0104, D0
	SUBQ.b	#2, D0
	BCC.w	loc_0000FB26
	CLR.b	D0
loc_0000FB26:
	LSL.b	#4, D0
	ADD.b	D0, D2
	BCC.w	loc_0000FB32
	MOVE.b	#$FF, D2
loc_0000FB32:
	RTS
loc_0000FB34:
	CLR.w	D0
	MOVE.b	D2, D0
	CMPI.b	#$FF, D0
	BEQ.w	loc_0000FB4C
	LSR.b	#1, D2
	MOVE.b	D2, D0
	JSR	loc_00001202
	ADD.b	D2, D0
loc_0000FB4C:
	RTS
loc_0000FB4E:
	BSR.w	loc_0000FB8C
	BSR.w	loc_0000FCD2
	BSR.w	loc_0000FBB0
	BSR.w	loc_0000FBE6
	MOVE.b	$00FF1C34, D4
	MOVE.b	$00FF1C35, D5
	MOVE.b	$00FF1C36, D6
	MOVE.b	$2A(A0), D2
	ROR.b	#1, D2
	EORI.b	#$80, D2
	OR.b	$7(A2), D2
	BPL.w	loc_0000FB86
	LSL.b	#3, D5
	LSL.b	#1, D6
loc_0000FB86:
	ADD.b	D5, D4
	ADD.b	D6, D4
	RTS
loc_0000FB8C:
	MOVE.b	#0, D2
	TST.b	D3
	BNE.w	loc_0000FB9A
	MOVE.b	$5(A2), D2
loc_0000FB9A:
	MOVE.w	D0, D4
	LSR.w	#1, D4
loc_0000FB9E:
	LSL.b	#1, D2
	DBF	D4, loc_0000FB9E
	ANDI.b	#$80, D2
	MOVE.b	D2, $00FF1C3B
	RTS
loc_0000FBB0:
	MOVE.b	$00FF1C34, D1
	SUBQ.b	#1, D1
	CMPI.b	#3, D1
	BCC.w	loc_0000FBE4
	ADDQ.b	#3, $00FF1C34
	CMPI.b	#4, $00FF1C37
	BCC.w	loc_0000FBE4
	CLR.b	$00FF1C37
	CLR.b	$00FF1C39
	SUBQ.b	#4, $00FF1C34
loc_0000FBE4:
	RTS
loc_0000FBE6:
	CLR.b	$00FF1C35
	CLR.b	$00FF1C36
	BSR.w	loc_0000FBFC
	BSR.w	loc_0000FC82
	RTS
loc_0000FBFC:
	CLR.w	D1
	MOVE.b	$00FF1C37, D1
	SUBQ.b	#1, D1
	BPL.w	loc_0000FC0C
	RTS
loc_0000FC0C:
	CMPI.b	#4, D1
	BCS.w	loc_0000FC18
	MOVE.b	#3, D1
loc_0000FC18:
	MOVE.b	$00FF1C38, D2
	CMPI.b	#5, D2
	BCS.w	loc_0000FC2A
	MOVE.b	#4, D2
loc_0000FC2A:
	LSL.b	#2, D2
	OR.b	D2, D1
	TST.b	$00FF1C3B
	BEQ.w	loc_0000FC3C
	ADDI.b	#$14, D1
loc_0000FC3C:
	MOVE.b	loc_0000FC5A(PC,D1.w), $00FF1C35
	BPL.w	loc_0000FC58
	MOVE.b	$00FF1C37, D1
	LSL.b	#1, D1
	ADDQ.b	#1, D1
	MOVE.b	D1, $00FF1C35
loc_0000FC58:
	RTS
loc_0000FC5A:
	dc.b 	$00, $00, $00, $00, $03, $05, $07, $FF
	dc.b 	$02, $04, $06, $FF, $01, $03, $05, $FF
	dc.b 	$00, $00, $04, $FF, $00, $00, $00, $00
	dc.b 	$03, $05, $07, $00, $02, $04, $06, $00
	dc.b 	$01, $03, $05, $00, $04, $06, $08, $00
loc_0000FC82:
	CLR.w	D1
	MOVE.b	$00FF1C39, D1
	SUBQ.b	#1, D1
	BPL.w	loc_0000FC92
	RTS
loc_0000FC92:
	CMPI.b	#4, D1
	BCS.w	loc_0000FC9E
	MOVE.b	#3, D1
loc_0000FC9E:
	MOVE.b	$00FF1C3A, D2
	CMPI.b	#5, D2
	BCS.w	loc_0000FCB0
	MOVE.b	#4, D2
loc_0000FCB0:
	LSL.b	#2, D2
	OR.b	D2, D1
	MOVE.b	loc_0000FC5A(PC,D1.w), $00FF1C36
	BPL.w	loc_0000FCD0
	MOVE.b	$00FF1C39, D1
	LSL.b	#1, D1
	ADDQ.b	#1, D1
	MOVE.b	D1, $00FF1C36
loc_0000FCD0:
	RTS
loc_0000FCD2:
	MOVE.w	D0, D5
	LSL.w	#3, D5
	MOVE.w	D5, D6
	OR.b	D1, D6
	CLR.w	D1
	MOVE.b	$C(A5,D6.w), D1
	ANDI.b	#$0F, D1
	MOVE.b	D1, $00FF1C34
	MOVE.b	$C(A5,D6.w), D1
	LSR.b	#4, D1
	MOVE.b	D1, $00FF1C37
	BSR.w	loc_0000FD18
	MOVE.b	D1, $00FF1C38
	MOVE.b	$C(A5,D6.w), D1
	LSR.b	#4, D1
	MOVE.b	D1, $00FF1C39
	BSR.w	loc_0000FD18
	MOVE.b	D1, $00FF1C3A
	RTS
loc_0000FD18:
	CLR.b	D1
	MOVE.w	#5, D2
loc_0000FD1E:
	CMP.w	D5, D6
	BEQ.w	loc_0000FD30
	CMP.b	$C(A5,D5.w), D1
	BCC.w	loc_0000FD30
	MOVE.b	$C(A5,D5.w), D1
loc_0000FD30:
	ADDQ.w	#1, D5
	DBF	D2, loc_0000FD1E
	LSR.b	#4, D1
	ADDI.w	#$005A, D5
	ADDI.w	#$0060, D6
	RTS
loc_0000FD42:
	LSL.w	#1, D0
	MOVE.b	loc_0000FD5E(PC,D0.w), $20(A0)
	MOVE.b	loc_0000FD5F(PC,D0.w), $21(A0)
	MOVE.b	$7(A2), D0
	ANDI.b	#3, D0
	AND.b	D0, $21(A0)
	RTS
loc_0000FD5E:
	dc.b	$00
loc_0000FD5F:
	dc.b 	$00, $01, $00, $02, $00, $03, $00, $04
	dc.b 	$00, $05, $00, $00, $02, $01, $02, $02
	dc.b 	$02, $03, $02, $04, $02, $05, $02, $00
	dc.b 	$01, $01, $01, $02, $01, $03, $01, $04
	dc.b 	$01, $01, $03, $02, $03, $03, $03, $04
	dc.b 	$03, $05, $03
loc_0000FD8A:
	JSR	loc_00005022
	ADDA.l	#$0000029E, A2
	MOVE.w	#$000A, D0
	LEA	loc_0000FDBA, A3
loc_0000FDA0:
	MOVE.w	(A3)+, D1
	BEQ.w	loc_0000FDB4
	ADD.w	D0, D1
	TST.b	(A2,D1.w)
	BNE.b	loc_0000FDA0
	CLR.b	(A2,D0.w)
	BRA.b	loc_0000FDA0
loc_0000FDB4:
	SUBQ.w	#2, D0
	BCC.b	loc_0000FDA0
	RTS
loc_0000FDBA:
	dc.w	$FFFE, $FFFC, $FFFA, $0000, $FFFE, $FFFC, $0000, $FFFE, $0000, $0000, $0002, $0000, $0002, $0004, $0000 
loc_0000FDD8:
	JSR	loc_00005022
	MOVEA.l	A2, A3
	MOVEA.l	A2, A4
	MOVEA.l	A2, A5
	ADDA.l	#$00000018, A2
	ADDA.l	#$00000294, A3
	ADDA.l	#$0000029E, A4
	ADDA.l	#$000000A8, A5
	MOVE.w	#9, D0
loc_0000FE00:
	CLR.b	(A3,D0.w)
	DBF	D0, loc_0000FE00
	MOVE.w	#$0047, D0
	CLR.w	D1
	CLR.w	D2
loc_0000FE10:
	MOVE.b	(A2,D1.w), D2
	BEQ.b	loc_0000FE24
	LSR.b	#4, D2
	ANDI.b	#7, D2
	ADDQ.b	#1, (A3,D2.w)
	ADDQ.w	#1, $8(A3)
loc_0000FE24:
	ADDQ.w	#2, D1
	DBF	D0, loc_0000FE10
	CLR.w	D0
loc_0000FE2C:
	BSR.w	loc_0000FE42
	MOVE.w	D1, (A4)+
	ADDQ.w	#1, D0
	CMPI.w	#6, D0
	BCS.b	loc_0000FE2C
	BSR.w	loc_0000FD8A
	BRA.w	loc_0000FE66
loc_0000FE42:
	MOVE.w	#$0C00, D1
	MOVE.w	D0, D2
	LSL.w	#1, D2
	ADDI.w	#$0084, D2
loc_0000FE4E:
	TST.b	(A2,D2.w)
	BEQ.w	loc_0000FE5E
	SUBI.w	#$0100, D1
	MOVE.b	(A5,D2.w), D1
loc_0000FE5E:
	SUBI.w	#$000C, D2
	BCC.b	loc_0000FE4E
	RTS
loc_0000FE66:
	MOVE.b	rCurGameMode, D0
	ANDI.b	#3, D0
	LSL.b	#1, D0
	OR.b	$2A(A0), D0
	EORI.b	#1, D0
	BEQ.w	loc_0000FE80
	RTS
loc_0000FE80:
	JSR	loc_00005022
	ADDA.l	#$00000294, A2
	MOVEA.l	A2, A3
	ADDA.l	#$FFFFFC96, A3
	MOVE.w	#2, D0
	CMPI.w	#$0024, $8(A2)
	BCC.w	loc_0000FEB0
	SUBQ.w	#1, D0
	CMPI.w	#$0024, $8(A3)
	BCC.w	loc_0000FEB0
	SUBQ.w	#1, D0
loc_0000FEB0:
	MOVE.w	D0, $00FF18AA
	RTS
loc_0000FEB8:
	BSR.w	loc_0000F874
	BCS.w	loc_0000FEC2
	RTS
loc_0000FEC2:
	JSR	loc_00005022
	MOVEA.l	A2, A3
	MOVEA.l	A2, A4
	MOVEA.l	A2, A5
	ADDA.l	#$00000018, A2
	ADDA.l	#$000000A8, A3
	ADDA.l	#$0000029E, A4
	ADDA.l	#$000002AA, A5
	TST.b	$00FF1C2C
	BEQ.w	loc_0000FEF6
	ADDA.l	#$00000060, A5
loc_0000FEF6:
	CLR.w	D0
loc_0000FEF8:
	BSR.w	loc_0000FF10
	BSR.w	loc_0000FFF0
loc_0000FF00:
	ADDA.l	#8, A5
	ADDQ.w	#1, D0
	CMPI.w	#$000C, D0
	BCS.b	loc_0000FEF8
	RTS
loc_0000FF10:
	MOVE.w	D0, D1
	LSR.w	#1, D1
	MOVE.w	D0, D2
	ANDI.w	#1, D2
	SUBQ.w	#2, D2
	CLR.w	D3
	MOVE.w	D1, D4
	LSL.w	#1, D4
	CLR.w	D5
	MOVE.b	(A4,D4.w), D5
	ADD.w	D5, D2
	BMI.b	loc_0000FF4C
	BSR.w	loc_0000FF96
	BCS.w	loc_0000FF4C
	MOVEM.l	A1, -(A7)
	MOVE.w	D1, D3
	LSL.w	#2, D3
	MOVEA.l	loc_0000FF5A(PC,D3.w), A1
	MOVE.b	(A1,D2.w), D3
	MOVEM.l	(A7)+, A1
	ORI.b	#$10, D3
loc_0000FF4C:
	MOVE.w	#7, D4
loc_0000FF50:
	MOVE.b	D3, (A5,D4.w)
	DBF	D4, loc_0000FF50
	RTS
loc_0000FF5A:
	dc.l	loc_0000FF72
	dc.l	loc_0000FF7E
	dc.l	loc_0000FF8A
	dc.l	loc_0000FF7E
	dc.l	loc_0000FF7E
	dc.l	loc_0000FF72
loc_0000FF72:
	dc.b	$04, $05, $06, $07, $08, $09, $0A, $0B, $0C, $0D, $0E, $0F 
loc_0000FF7E:
	dc.b	$02, $05, $06, $07, $08, $09, $0A, $0B, $0C, $0D, $0E, $0F 
loc_0000FF8A:
	dc.b	$01, $02, $03, $07, $08, $09, $0A, $0B, $0C, $0D, $0E, $0F 
loc_0000FF96:
	TST.b	$00FF1C2C
	BNE.w	loc_0000FFA6
	ANDI	#$FFFE, SR
	RTS
loc_0000FFA6:
	ADDQ.w	#1, D2
	CMPI.w	#$000C, D2
	BCC.w	loc_0000FFE6
	MOVE.w	D2, D4
	MULU.w	#6, D4
	ADD.w	D1, D4
	LSL.w	#1, D4
	MOVE.b	(A2,D4.w), D5
	ANDI.b	#$F0, D5
	ADDI.w	#$000C, D4
loc_0000FFC6:
	MOVE.b	(A2,D4.w), D6
	ANDI.b	#$F0, D6
	CMP.b	D6, D5
	BNE.w	loc_0000FFE0
	ADDI.w	#$000C, D4
loc_0000FFD8:
	ADDQ.w	#1, D2
	CMPI.b	#$0B, D2
	BCS.b	loc_0000FFC6
loc_0000FFE0:
	ANDI	#$FFFE, SR
	RTS
loc_0000FFE6:
	MOVE.b	#$1F, D3
	ORI	#1, SR
	RTS
loc_0000FFF0:
	TST.b	$0(A5)
	BNE.w	loc_0000FFFA
	RTS
loc_0000FFFA:
	MOVE.w	D2, D3
	MULU.w	#6, D3
	ADD.w	D1, D3
	LSL.w	#1, D3
	MOVE.w	#$FFFF, D4
loc_0001000B:
	BSR.w	loc_00010066
	MOVE.w	#1, D4
	BSR.w	loc_00010066
	BSR.w	loc_0001001A
	RTS
loc_0001001A:
	CMPI.w	#$000B, D2
	BCC.w	loc_00010064
	MOVE.w	#$000C, D4
	ADD.w	D3, D4
	MOVE.b	(A2,D4.w), D5
	BEQ.b	loc_00010064
	ANDI.b	#$70, D5
	CMPI.b	#$60, D5
	BEQ.b	loc_00010064
	MOVE.b	(A2,D4.w), D5
	ANDI.b	#$0C, D5
	MOVE.b	$2(A2,D4.w), D6
	LSL.b	#1, D6
	ANDI.b	#4, D6
	AND.b	D5, D6
	BNE.b	loc_00010064
	MOVE.b	-$2(A2,D4.w), D6
	LSL.b	#2, D6
	ANDI.b	#8, D6
	AND.b	D5, D6
	BNE.b	loc_00010064
	MOVE.w	#6, D4
	BRA.w	loc_00010074
loc_00010064:
	RTS
loc_00010066:
	MOVE.w	D4, D5
	ADD.w	D1, D5
	CMPI.w	#6, D5
	BCS.w	loc_00010074
	RTS
loc_00010074:
	LSL.w	#1, D4
	ADD.w	D3, D4
	CLR.w	D5
	MOVE.b	(A2,D4.w), D5
	BEQ.b	loc_0001009A
	LSR.b	#4, D5
	ANDI.b	#7, D5
	MOVE.b	(A3,D4.w), D6
	ANDI.b	#3, D6
	BNE.w	loc_00010094
	ADDQ.b	#1, D6
loc_00010094:
	LSL.b	#4, D6
	ADD.b	D6, (A5,D5.w)
loc_0001009A:
	RTS
loc_0001009C:
	; See build_flags.asm for more information
	if fFixAiControlBug == 1
		ANDI.w	#0, D0
		ANDI.b	#0, D1
	else
		ANDI.w	#$FD8F, D0
		ANDI.b	#$F3, D1
	endif
	MOVEM.l	A2/A1/D3/D2, -(A7)
	MOVEA.l	$2E(A0), A1
	LEA	$00FF1C28, A2
	TST.b	$2A(A1)
	BEQ.w	loc_000100C0
	LEA	$00FF1C29, A2
loc_000100C0:
	ADDQ.b	#1, (A2)
	BNE.w	loc_000100CA
	MOVE.b	#$FF, (A2)
loc_000100CA:
	BSR.w	loc_000101B2
	MOVE.b	$20(A1), D2
	SUB.b	$1B(A0), D2
	BEQ.w	loc_00010106
	CLR.w	D3
	ROL.b	#1, D2
	ANDI.w	#1, D2
	OR.b	loc_00010134(PC,D2.w), D1
	TST.b	$2A(A1)
	BEQ.w	loc_00010106
	CMPI.b	#stgID_Suketoudara, rOnePlayer_CurStage
	BCC.w	loc_00010106
	TST.b	$27(A1)
	BMI.w	loc_00010106
	BSR.w	loc_0001017A
loc_00010106:
	MOVE.b	$21(A1), D2
	SUB.b	$2B(A0), D2
	BEQ.w	loc_00010128
	CLR.w	D3
	BSET.l	#5, D0
	ANDI.b	#3, D2
	CMPI.b	#3, D2
	BNE.w	loc_00010128
	EORI.b	#$60, D0
loc_00010128:
	OR.w	D3, D0
	BSR.w	loc_00010136
	MOVEM.l	(A7)+, D2/D3/A1/A2
	RTS
loc_00010134:
	dc.b	$08
	dc.b	$04
loc_00010136:
	MOVE.b	D0, D2
	ANDI.b	#$70, D0
	BEQ.w	loc_00010148
	MOVE.b	#$FF, $00FF1C2A
loc_00010148:
	BTST.l	#9, D0
	BEQ.w	loc_0001015A
	MOVE.b	#$80, $00FF1C2B
	RTS
loc_0001015A:
	CLR.w	D2
	MOVE.b	D1, D2
	LSR.b	#2, D2
	ANDI.b	#3, D2
	MOVE.b	loc_00010176(PC,D2.w), D3
	BNE.w	loc_0001016E
	RTS
loc_0001016E:
	MOVE.b	D3, $00FF1C2B
	RTS
loc_00010176:
	dc.b	$00
	dc.b	$84
	dc.b	$88
	dc.b	$00 
loc_0001017A:
	CMPI.b	#$FF, (A2)
	BCS.w	loc_00010184
	RTS
loc_00010184:
	MOVEM.l	D0, -(A7)
	MOVE.b	(A2), D0
	ANDI.b	#$0F, D0
	BEQ.w	loc_0001019A
	ANDI.b	#$F3, D1
	BRA.w	loc_000101AC
loc_0001019A:
	JSR	UpdateRNG
	ANDI.b	#1, D0
	BEQ.w	loc_000101AC
	EORI.b	#$0C, D1
loc_000101AC:
	MOVEM.l	(A7)+, D0
	RTS
loc_000101B2:
	MOVE.b	$2C(A1), D2
	TST.b	$27(A1)
	BEQ.w	loc_000101C2
	MOVE.b	$2D(A1), D2
loc_000101C2:
	CMP.b	$26(A1), D2
	BCC.w	loc_000101D4
	CLR.b	$26(A1)
	EORI.b	#$80, $27(A1)
loc_000101D4:
	CLR.w	D3
	MOVE.b	$27(A1), D3
	LSL.w	#2, D3
	RTS
loc_000101DE:
	TST.b	$6(A2)
	BMI.w	loc_000101FA
	TST.b	D3
	BNE.w	loc_000101FA
	CMPI.b	#8, $3(A6)
	BCC.w	loc_000101FC
	ADDQ.b	#1, $3(A6)
loc_000101FA:
	RTS
loc_000101FC:
	TST.b	$1(A6)
	BEQ.w	loc_00010372
	BRA.w	loc_00010208
loc_00010208:
	MOVEA.l	$4(A6), A1
	MOVE.b	(A1), D0
	LSR.b	#4, D0
	ADD.b	$2(A6), D0
	MOVE.b	D0, $20(A0)
	MOVE.b	(A1)+, D0
	ANDI.b	#$0F, D0
	MOVE.b	D0, $21(A0)
	MOVE.l	A1, $4(A6)
	TST.b	(A1)
	BPL.w	loc_00010230
	CLR.b	$1(A6)
loc_00010230:
	MOVEM.l	(A7)+, A1
	RTS
loc_00010236:
	MOVE.b	(A3)+, D1
	MOVE.b	(A3)+, D2
	CLR.w	D0
	MOVE.b	#$FF, D4
	CLR.b	D5
loc_00010242:
	MOVE.b	(A5,D0.w), D6
	CMP.b	D2, D6
	BCS.w	loc_0001025E
	ADDQ.b	#1, D5
	CMP.b	D4, D6
	BEQ.w	loc_0001025E
	MOVE.b	D0, $8(A6)
	MOVE.b	#1, D5
	MOVE.b	D6, D4
loc_0001025E:
	CMP.b	D1, D5
	BEQ.w	loc_00010272
	ADDQ.b	#2, D0
	CMPI.b	#$0C, D0
	BCS.b	loc_00010242
	ORI	#1, SR
	RTS
loc_00010272:
	MOVE.b	D0, $9(A6)
	BSR.w	loc_00010290
	MOVE.b	#0, $21(A0)
	MOVE.b	$8(A6), D0
	LSR.b	#1, D0
	MOVE.b	D0, $2(A6)
	ANDI	#$FFFE, SR
	RTS
loc_00010290:
	MOVE.b	$8(A6), D1
	CLR.w	D2
	CLR.b	D3
loc_00010298:
	BSR.w	loc_000102BE
	BCS.w	loc_000102B4
	MOVE.b	(A5,D2.w), D4
	CMP.b	D3, D4
	BCS.w	loc_000102B4
	MOVE.b	D4, D3
	MOVE.b	D2, D4
	LSR.b	#1, D4
	MOVE.b	D4, $20(A0)
loc_000102B4:
	ADDQ.b	#2, D2
	CMPI.b	#$0C, D2
	BCS.b	loc_00010298
	RTS
loc_000102BE:
	CMP.b	D1, D2
	BCS.w	loc_000102D0
	CMP.b	D2, D0
	BCS.w	loc_000102D0
	ORI	#1, SR
	RTS
loc_000102D0:
	ANDI	#$FFFE, SR
	RTS
loc_000102D6:
	dc.b	$00, $01, $03, $04, $05, $00 
loc_000102DC:
	MOVE.w	#4, D0
	LEA	$00FF1C2E, A2
loc_000102E6:
	MOVE.b	loc_000102D6(PC,D0.w), (A2,D0.w)
	DBF	D0, loc_000102E6
	BSR.w	loc_00010350
	MOVE.w	#$0028, D0
	CLR.w	D1
loc_000102FA:
	MOVE.b	(A3), D1
	LSR.b	#4, D1
	MOVE.b	(A2,D1.w), (A1,D0.w)
	MOVE.b	(A3)+, D1
	ANDI.b	#$0F, D1
	MOVE.b	(A2,D1.w), $1(A1,D0.w)
	ADDQ.b	#2, D0
	CMPI.w	#$002C, D0
	BCS.b	loc_000102FA
	CLR.w	D0
	MOVE.b	$2A(A0), D0
	LSL.w	#8, D0
	MOVE.b	$20(A1), D0
	LEA	$00FF111C, A4
loc_0001032A:
	MOVE.b	(A3)+, D1
	BMI.w	loc_0001034A
	LSR.b	#4, D1
	MOVE.b	(A2,D1.w), (A4,D0.w)
	MOVE.b	-$1(A3), D1
	ANDI.b	#$0F, D1
	MOVE.b	(A2,D1.w), $1(A4,D0.w)
	ADDQ.b	#2, D0
	BRA.b	loc_0001032A
loc_0001034A:
	MOVE.l	A3, $4(A6)
	RTS
loc_00010350:
	MOVE.w	#4, D1
loc_00010354:
	MOVE.w	#5, D0
	JSR	loc_00001202
	MOVE.b	(A2,D0.w), D2
	MOVE.b	(A2,D1.w), (A2,D0.w)
	MOVE.b	D2, (A2,D1.w)
	DBF	D1, loc_00010354
	RTS
loc_00010372:
	MOVEM.l	A3, -(A7)
	CLR.w	D0
	MOVE.b	$6(A2), D0
	JSR	loc_00001202
	LSL.w	#2, D0
	MOVEA.l	loc_000103AC(PC,D0.w), A3
	BSR.w	loc_00010236
	BCC.w	loc_00010398
	MOVEM.l	(A7)+, A3
	CLR.b	D3
	RTS
loc_00010398:
	BSR.w	loc_000102DC
	MOVE.b	#$FF, $1(A6)
	MOVEM.l	(A7)+, A3
	MOVEM.l	(A7)+, A3
	RTS
loc_000103AC:
    dc.l    loc_00010456
    dc.l    loc_00010462
    dc.l    loc_00010470
    dc.l    loc_0001047E
    dc.l    loc_0001041A
    dc.l    loc_00010428
    dc.l    loc_00010438
    dc.l    loc_00010448
    dc.l    loc_0001040A
    dc.l    loc_000103FA
    dc.l    loc_000103EA
    dc.l    loc_000103DC
loc_000103DC:
    dc.b    $03
    dc.b    $05
    dc.b    $00
    dc.b    $22
    dc.b    $10
    dc.b    $10
    dc.b    $11
    dc.b    $FF
    dc.b    $10
    dc.b    $00
    dc.b    $13
    dc.b    $23
    dc.b    $22
    dc.b    $FF
loc_000103EA:
    dc.b    $03
    dc.b    $06
    dc.b    $22
    dc.b    $01
    dc.b    $10
    dc.b    $31
    dc.b    $00
    dc.b    $21
    dc.b    $FF
    dc.b    $11
    dc.b    $01
    dc.b    $23
    dc.b    $13
    dc.b    $02
    dc.b    $22
    dc.b    $FF
loc_000103FA:
    dc.b    $03
    dc.b    $06
    dc.b    $00
    dc.b    $01
    dc.b    $12
    dc.b    $34
    dc.b    $10
    dc.b    $12
    dc.b    $FF
    dc.b    $02
    dc.b    $10
    dc.b    $11
    dc.b    $22
    dc.b    $10
    dc.b    $00
    dc.b    $FF
loc_0001040A:
    dc.b    $03
    dc.b    $06
    dc.b    $00
    dc.b    $23
    dc.b    $12
    dc.b    $10
    dc.b    $10
    dc.b    $31
    dc.b    $FF
    dc.b    $00
    dc.b    $13
    dc.b    $22
    dc.b    $10
    dc.b    $23
    dc.b    $11
    dc.b    $FF
loc_0001041A:
    dc.b    $03
    dc.b    $05
    dc.b    $00
    dc.b    $11
    dc.b    $02
    dc.b    $31
    dc.b    $10
    dc.b    $FF
    dc.b    $11
    dc.b    $22
    dc.b    $00
    dc.b    $01
    dc.b    $23
    dc.b    $FF
loc_00010428:
    dc.b    $03
    dc.b    $05
    dc.b    $11
    dc.b    $21
    dc.b    $00
    dc.b    $03
    dc.b    $40
    dc.b    $21
    dc.b    $FF
    dc.b    $11
    dc.b    $11
    dc.b    $00
    dc.b    $13
    dc.b    $01
    dc.b    $20
    dc.b    $FF
loc_00010438:
    dc.b    $03
    dc.b    $05
    dc.b    $00
    dc.b    $21
    dc.b    $01
    dc.b    $01
    dc.b    $30
    dc.b    $14
    dc.b    $FF
    dc.b    $01
    dc.b    $13
    dc.b    $11
    dc.b    $11
    dc.b    $02
    dc.b    $00
    dc.b    $FF
loc_00010448:
    dc.b    $03
    dc.b    $05
    dc.b    $01
    dc.b    $22
    dc.b    $10
    dc.b    $01
    dc.b    $10
    dc.b    $FF
    dc.b    $23
    dc.b    $22
    dc.b    $01
    dc.b    $13
    dc.b    $00
    dc.b    $FF
loc_00010456:
    dc.b    $02
    dc.b    $06
    dc.b    $01
    dc.b    $01
    dc.b    $00
    dc.b    $11
    dc.b    $FF
    dc.b    $00
    dc.b 	$01
    dc.b	$00
    dc.b	$10
    dc.b    $FF
loc_00010462:
    dc.b    $02
    dc.b    $06
    dc.b    $20
    dc.b    $10
    dc.b    $01
    dc.b    $01
    dc.b    $13
    dc.b    $FF
    dc.b    $12
    dc.b    $13
    dc.b    $01
    dc.b    $02
    dc.b    $13
    dc.b    $FF
loc_00010470:
    dc.b    $02
    dc.b    $06
    dc.b    $00
    dc.b    $01
    dc.b    $12
    dc.b    $13
    dc.b    $10
    dc.b    $FF
    dc.b    $02
    dc.b    $00
    dc.b    $12
    dc.b    $13
    dc.b    $10
    dc.b    $FF
loc_0001047E:
    dc.b    $02
    dc.b    $06
    dc.b    $00
    dc.b    $11
    dc.b    $00
    dc.b    $21
    dc.b    $13
    dc.b    $FF
    dc.b    $01
    dc.b    $10
    dc.b    $13
    dc.b    $13
    dc.b    $00
    dc.b    $FF

loc_0001048C:
	LEA	loc_000104A4, A1
	JSR	ObjSys_InitObjWithFunc
	LEA	loc_00010514, A1
	JMP	ObjSys_InitObjWithFunc
loc_000104A4:
	MOVE.b	#$80, $6(A0)
	MOVE.b	#$26, $8(A0)
	MOVE.w	#$0120, $A(A0)
	MOVE.w	#$0150, $E(A0)
	MOVE.l	#loc_000104EC, $32(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	CLR.w	D0
	MOVE.b	$00FF1C2B, D0
	BEQ.w	loc_000104E6
	ANDI.b	#$7F, D0
	MOVE.l	loc_000104F0(PC,D0.w), $32(A0)
	CLR.b	$00FF1C2B
loc_000104E6:
	JMP	ObjSys_UpdateObjAnim
loc_000104EC:
	dc.b	$00, $02 
	dc.b	$FE
	dc.b	$00 
loc_000104F0:
	dc.l	loc_000104FC
	dc.l	loc_00010504
	dc.l	loc_0001050C
loc_000104FC:
	dc.b	$02
	dc.b	$04 
	dc.b	$FF
	dc.b	$00 
	dc.l	loc_000104EC
loc_00010504:
	dc.l	$0803FF00	
	dc.l	loc_000104EC
loc_0001050C
	dc.l	$0805FF00	
	dc.l	loc_000104EC
loc_00010514:
	MOVE.b	#$80, $6(A0)
	MOVE.b	#$26, $8(A0)
	MOVE.w	#$0150, $A(A0)
	MOVE.w	#$0150, $E(A0)
	MOVE.l	#loc_0001055C, $32(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	TST.b	$00FF1C2A
	BEQ.w	loc_00010552
	MOVE.l	#loc_00010558, $32(A0)
	CLR.b	$00FF1C2A
loc_00010552:
	JMP	ObjSys_UpdateObjAnim
loc_00010558:
	dc.b	$01
	dc.b	$00 
	dc.b	$08
	dc.b	$01 
loc_0001055C:
	dc.b	$00
	dc.b	$00 
	dc.b	$FE
	dc.b	$00 
loc_00010560:
	LEA	$00FF111C, A1
	LEA	loc_00010572, A2
loc_0001056C:
	MOVE.b	(A2)+, (A1)+
	BPL.b	loc_0001056C
	RTS
loc_00010572:
	dc.b	$01, $00, $01, $03, $04, $00, $00, $00, $03, $00, $05, $03, $00, $04, $03, $04, $03, $00, $00, $00, $00, $04, $05, $05, $00, $00, $05, $05, $05, $05, $01, $01 
	dc.b	$05, $05, $03, $03, $03, $04, $03, $05, $05, $05, $04, $05, $01, $01, $01, $04, $01, $00, $00, $00, $04, $00, $01, $04, $01, $05, $01, $05, $01, $04, $04, $04 ;0x20
	dc.b	$05, $05, $00, $00, $05, $00, $05, $00, $04, $05, $03, $04, $03, $04, $04, $05, $03, $03, $03, $04, $03, $04, $03, $04, $FF ;0x40
	dc.b	$00 
loc_000105CC:
	MOVE.w	#$CB3E, $00FF18A8
	CLR.w	$00FF188C
	CLR.w	rFrameTimer
	CLR.b	$00FF1883
	JSR	Video_ClearScrollTables
	MOVE.w	#$8B00, D0
	MOVE.b	rVDPRegBTbl+rvtMode3, D0
	ORI.b	#4, D0
	MOVE.b	D0, rVDPRegBTbl+rvtMode3
	LEA	loc_0001062A, A1
	JSR	ObjSys_InitObjWithFunc
	MOVE.b	#0, $2A(A1)
	MOVE.l	#$80010000, D0
	JSR	Video_QueueBgMapSpecial
	JSR	loc_00003006
	JMP	loc_0001048C
loc_0001062A:
	CLR.l	D0
	BSR.w	loc_00008832
	JSR	loc_00004B26
	MOVE.w	#0, D3
	MOVE.w	#$FF38, D4
	JSR	loc_00003A08
	ORI	#$0700, SR
	JSR	loc_00004CCC
	ANDI	#$F8FF, SR
	JSR	ObjSys_UpdateObjNextOpTimer
	CLR.b	$00FF0104
	MOVE.b	#7, $8(A0)
	JSR	loc_000088E0
	JSR	ObjSys_UpdateObjNextOpTimer
loc_00010670:
	CLR.w	$00FF18C8
	CMPI.b	#9, $00FF188D
	BCS.w	loc_000106A4
	MOVE.w	#$0020, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	ObjSys_UpdateObjNextOpTimer
	CLR.b	rBytecode_Ret
	CLR.b	rBytecode_StopRun
	JMP	ObjSys_DeleteObjectA0
loc_000106A4:
	CLR.b	$9(A0)
	BSR.w	loc_0001083E
	BSR.w	loc_0001085A
	JSR	loc_00003BB2
	JSR	ObjSys_UpdateObjNextOpTimer
	BTST.b	#2, $7(A0)
	BEQ.w	loc_000106C8
	RTS
loc_000106C8:
	JSR	loc_0000436E
	BCS.w	loc_000107B8
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.b	$7(A0), D0
	ANDI.b	#3, D0
	BEQ.w	loc_000106FE
	BTST.b	#3, $7(A0)
	BNE.w	loc_000106F0
	RTS
loc_000106F0:
	BCLR.b	#3, $7(A0)
	MOVEQ	#1, D0
	JMP	loc_00008832
loc_000106FE:
	JSR	loc_00004EAA
	MOVE.w	D1, $26(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	ORI	#$0700, SR
	JSR	loc_00004CCC
	ANDI	#$F8FF, SR
	MOVE.w	#2, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	ObjSys_UpdateObjNextOpTimer
	TST.w	$26(A0)
	BEQ.w	loc_00010670
	JSR	loc_00004E12
	JSR	loc_0000863E
	JSR	loc_00008628
	JSR	ObjSys_UpdateObjNextOpTimer
	JSR	loc_00003EF6
	MOVE.w	#$0018, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	loc_00003F0E
	JSR	ObjSys_UpdateObjNextOpTimer
	JSR	loc_00003F62
	MOVE.w	#$0018, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	ObjSys_UpdateObjNextOpTimer
	JSR	loc_00004302
	BSET.b	#4, $7(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	BTST.b	#4, $7(A0)
	BEQ.w	loc_000107A0
	JMP	loc_0000435E
loc_000107A0:
	JSR	loc_000087A2
	ADDQ.b	#1, $9(A0)
	BCC.w	loc_000107B4
	MOVE.b	#$FF, $9(A0)
loc_000107B4:
	BRA.w	loc_000106FE
loc_000107B8:
	MOVE.b	#$FF, $00FF18C8
	MOVE.w	#5, $00FF188C
	JSR	loc_000063BA
	MOVE.b	#sfxID_Lose, D0
	JSR	SndDrv_QueueSoundEffect
	JSR	ObjSys_UpdateObjNextOpTimer
	TST.w	$26(A0)
	BEQ.w	loc_000107E8
	RTS
loc_000107E8:
	JSR	loc_00004B26
	ORI	#$0700, SR
	JSR	loc_00004CCC
	ANDI	#$F8FF, SR
	JSR	loc_00005022
	ANDI.w	#$007F, D0
	MOVE.w	#5, D1
	LEA	rScrollYScanFront, A2
loc_00010810:
	CLR.l	(A2,D0.w)
	ADDQ.w	#4, D0
	DBF	D1, loc_00010810
	MOVE.w	#$00E0, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.w	#$8400, D0
	SWAP	D0
	MOVE.b	#5, D0
	JSR	Video_QueueBgMapSpecial
	BRA.w	loc_00010670
loc_0001083E:
	TST.b	$00FF188C
	BEQ.w	loc_0001084A
	RTS
loc_0001084A:
	CLR.w	D0
	MOVE.b	$00FF188D, D0
	ADDQ.b	#7, D0
	JMP	HowToPlay_TextObjInit
loc_0001085A:
	CLR.w	D0
	MOVE.b	$00FF188D, D0
	ADDQ.b	#1, $00FF188D
	LSL.w	#2, D0
	MOVEA.l	loc_00010870(PC,D0.w), A1
	JMP	(A1)
loc_00010870:
	dc.l	loc_00010894
	dc.l	loc_000108E4
	dc.l	loc_00010940
	dc.l	loc_00010984
	dc.l	loc_00010998
	dc.l	loc_000109BA
	dc.l	loc_00010A2C
	dc.l	loc_00010B1E
	dc.l	loc_00010B24
loc_00010894:
	LEA	loc_000108B4, A1
	JSR	ObjSys_InitObjWithFunc
	BCC.w	loc_000108A6
	RTS
loc_000108A6:
	MOVE.l	A0, $2E(A1)
	MOVE.l	#loc_000108D0, $32(A1)
	RTS
loc_000108B4:
	JSR	ObjSys_UpdateObjAnim
	BCC.w	loc_000108C4
	JMP	ObjSys_DeleteObjectA0
loc_000108C4:
	MOVEA.l	$2E(A0), A1
	MOVE.b	$9(A0), $20(A1)
	RTS
loc_000108D0:
	dc.b	$40
	dc.b	$02 
	dc.b	$10
	dc.b	$01 
	dc.b	$10
	dc.b	$02 
	dc.b	$0C
	dc.b	$03 
	dc.b	$0C
	dc.b	$04 
	dc.b	$30
	dc.b	$05 
	dc.b	$0C
	dc.b	$04 
	dc.b	$0C
	dc.b	$03 
	dc.b	$00
	dc.b	$02 
	dc.b	$FE
	dc.b	$00 
loc_000108E4:
	MOVE.b	#2, $20(A0)
	LEA	loc_0001090A, A1
	JSR	ObjSys_InitObjWithFunc
	BCC.w	loc_000108FC
	RTS
loc_000108FC:
	MOVE.l	A0, $2E(A1)
	MOVE.l	#loc_00010926, $32(A1)
	RTS
loc_0001090A:
	JSR	ObjSys_UpdateObjAnim
	BCC.w	loc_0001091A
	JMP	ObjSys_DeleteObjectA0
loc_0001091A:
	MOVEA.l	$2E(A0), A1
	MOVE.b	$9(A0), $21(A1)
	RTS
loc_00010926:
	dc.b	$40
	dc.b	$00 
	dc.b	$10
	dc.b	$01 
	dc.b	$10
	dc.b	$02 
	dc.b	$10
	dc.b	$03 
	dc.b	$30
	dc.b	$00 
	dc.b	$08
	dc.b	$01 
	dc.b	$08
	dc.b	$02 
	dc.b	$08
	dc.b	$03 
	dc.b	$08
	dc.b	$00 
	dc.b	$08
	dc.b	$01 
	dc.b	$08
	dc.b	$02 
	dc.b	$00
	dc.b	$03 
	dc.b	$FE
	dc.b	$00 
loc_00010940:
	MOVE.b	#4, $20(A0)
	MOVE.b	#3, $21(A0)
loc_0001094C:
	LEA	loc_0001096A, A1
	JSR	ObjSys_InitObjWithFunc
	BCC.w	loc_0001095E
	RTS
loc_0001095E:
	MOVE.l	A0, $2E(A1)
	MOVE.w	#$0080, $26(A1)
	RTS
loc_0001096A:
	SUBQ.w	#1, $26(A0)
	BEQ.w	loc_00010974
	RTS
loc_00010974:
	MOVEA.l	$2E(A0), A1
	MOVE.b	#$80, $27(A1)
	JMP	ObjSys_DeleteObjectA0
loc_00010984:
	MOVE.b	#0, $27(A0)
	MOVE.b	#3, $20(A0)
	MOVE.b	#2, $21(A0)
	BRA.b	loc_0001094C
loc_00010998:
	MOVE.b	#$80, $27(A0)
	ADDQ.b	#1, $00FF188C
	MOVE.b	#4, $00FF188D
	MOVE.b	#2, $20(A0)
	MOVE.b	#0, $21(A0)
	RTS
loc_000109BA:
	MOVE.b	#0, $27(A0)
	JSR	loc_00004B26
	MOVE.w	#$0023, D0
	LEA	tbl_00010A2C_end, A1
loc_000109D0:
	MOVE.b	#$FF, -(A2)
	MOVE.b	-(A1), D1
	LSL.b	#4, D1
	MOVE.b	D1, -(A2)
	DBF	D0, loc_000109D0
	JSR	loc_00004EAA
	ORI	#$0700, SR
	JSR	loc_00004CCC
	ANDI	#$F8FF, SR
	MOVE.b	#0, $27(A0)
	MOVE.b	#4, $20(A0)
	MOVE.b	#0, $21(A0)
	BRA.w	loc_0001094C

	dc.b	$00, $09, $00, $0B, $08, $09, $00, $08, $0C, $0D, $08, $08, $00, $0C, $0D, $09, $09, $09, $00, $0C, $0D, $0D, $0C, $08, $09, $0C, $09, $0B, $0C, $08, $08, $08 
	dc.b	$08, $0B, $0B, $0C
tbl_00010A2C_end:

loc_00010A2C:
	MOVE.b	#6, $00FF188D
	CLR.w	D0
	MOVE.b	$00FF188C, D0
	LSL.b	#2, D0
	ADDQ.b	#1, $00FF188C
	CMPI.b	#$1A, $00FF188C
	BCS.w	loc_00010A58
	MOVE.w	#7, $00FF188C
loc_00010A58:
	MOVE.b	loc_00010A98(PC,D0.w), $20(A0)
	MOVE.b	loc_00010A99(PC,D0.w), $21(A0)
	MOVE.b	#0, $27(A0)
	LEA	loc_00010B00, A1
	JSR	loc_00002AB0
	BCS.w	loc_00010A84
	MOVE.l	A0, $2E(A1)
	MOVE.b	loc_00010A9A(PC,D0.w), $27(A1)
loc_00010A84:
	CLR.w	D1
	MOVE.b	loc_00010A9B(PC,D0.w), D1
	BMI.w	loc_00010A96
	MOVE.w	D1, D0
	JSR	HowToPlay_TextObjInit
loc_00010A96:
	RTS
loc_00010A98:
	dc.b	$04
loc_00010A99:
	dc.b	$00
loc_00010A9A:
	dc.b	$20
loc_00010A9B:
	dc.b	$10, $04, $00, $20, $FF, $03, $02, $40, $11, $03, $01, $20, $12, $03, $00, $20, $FF, $05, $03, $40, $13, $01, $00, $08, $14, $01, $00, $08, $FF, $01, $01, $08 
	dc.b	$FF, $02, $00, $08, $FF, $02, $00, $08, $FF, $03, $00, $08, $FF, $03, $00, $08, $FF, $03, $01, $08, $FF, $04, $00, $08, $FF, $04, $00, $40, $15, $02, $03, $10 ;0x20
	dc.b	$16, $02, $01, $10, $FF, $03, $02, $10, $FF, $03, $03, $10, $FF, $02, $03, $10, $FF, $04, $00, $40, $FF, $05, $02, $00, $FF, $05, $03, $00, $FF, $04, $01, $00 ;0x40
	dc.b	$FF, $04, $02, $00, $FF ;0x60
loc_00010B00:
	TST.w	$26(A0)
	BEQ.w	loc_00010B0E
	SUBQ.w	#1, $26(A0)
	RTS
loc_00010B0E:
	MOVEA.l	$2E(A0), A1
	MOVE.b	#$80, $27(A1)
	JMP	ObjSys_DeleteObjectA0
loc_00010B1E:
	MOVE.w	#$0012, $14(A0)
loc_00010B24:
	MOVE.b	#8, $00FF188D
	CLR.w	D0
	MOVE.b	$00FF188C, D0
	LSL.b	#1, D0
	ADDQ.b	#1, $00FF188C
	CMPI.b	#4, $00FF188C
	BCS.w	loc_00010B50
	MOVE.b	#9, $00FF188D
loc_00010B50:
	MOVE.b	loc_00010B64(PC,D0.w), $20(A0)
	MOVE.b	loc_00010B65(PC,D0.w), $21(A0)
	MOVE.b	#$80, $27(A0)
	RTS
loc_00010B64:
	dc.b	$01
loc_00010B65:
	dc.b	$01, $02, $01, $02, $01, $01, $02 
TitleScreen_CreateTitleObj:
	JSR	Video_ClearScrollTables
	LEA	loc_00010B8A, A1
	JSR	ObjSys_InitObjWithFunc
	BCS.w	loc_00010B88
	MOVE.w	#3, $28(A1)
loc_00010B88:
	RTS
loc_00010B8A:
	ADDQ.b	#1, $00FF188B
	CMPI.b	#6, $00FF188B
	BCS.w	loc_00010BA2
	CLR.b	$00FF188B
loc_00010BA2:
	MOVE.b	#1, D1
	BSR.w	titleScreen_fadeLogoToColor
	MOVE.w	#$0010, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	ObjSys_UpdateObjNextOpTimer
	CLR.w	D0
	MOVE.b	$00FF188A, D0
	LSL.w	#2, D0
	MOVEA.l	loc_00010BD8(PC,D0.w), A1
	ADDQ.b	#1, $00FF188A
	ANDI.b	#3, $00FF188A
	JMP	(A1)
loc_00010BD8:
	dc.l	loc_00010D20
	dc.l	loc_00010DA2
	dc.l	loc_00010E7A
	dc.l	loc_00010F8A
loc_00010BE8:
	LEA	loc_00010BF4, A1
	JMP	ObjSys_InitObjWithFunc
loc_00010BF4:
	MOVE.w	#2, $26(A0)
loc_00010BFA:
	TST.b	rBytecode_StopRun
	BEQ.w	loc_00010C56
	MOVE.b	#3, D0
	MOVE.b	#0, D1
	LEA	palLookupTable, A2
	ADDA.l	#(pal_optionsTextWhite-palLookupTable), A2
	JSR	loc_00000E46
	MOVE.w	#8, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	ObjSys_UpdateObjNextOpTimer
	TST.b	rBytecode_StopRun
	BEQ.w	loc_00010C56
	MOVE.b	#0, D1
	BSR.w	titleScreen_fadeLogoToColor
	MOVE.w	#$000E, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	ObjSys_UpdateObjNextOpTimer
	SUBQ.w	#1, $26(A0)
	BNE.b	loc_00010BFA
loc_00010C56:
	JMP	ObjSys_DeleteObjectA0
titleScreen_fadeLogoToColor:
	CLR.l	D0
	MOVE.b	$00FF188B, D0
	ADDI.b	#(((pal_titleScreenLogo_cycle)-palLookupTable)>>5), D0
	LSL.w	#5, D0
	LEA	palLookupTable, A2
	ADDA.l	D0, A2
	MOVE.b	#3, D0
	JMP	loc_00000E46
loc_00010C7C:
	BSR.w	loc_00010BE8
	MOVE.w	#$0100, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	ObjSys_UpdateObjNextOpTimer
	SUBQ.w	#1, $28(A0)
	BEQ.w	loc_00010C9C
	BRA.w	loc_00010B8A
loc_00010C9C:
	CLR.b	rBytecode_StopRun
	MOVE.b	$00FF188E, D0
	ADDQ.b	#1, D0
	MOVE.b	D0, rBytecode_Ret
	ANDI.b	#1, D0
	MOVE.b	D0, $00FF188E
	CMPI.b	#2, rBytecode_Ret
	BEQ.w	loc_00010CCC
	JMP	ObjSys_DeleteObjectA0
loc_00010CCC:
	CLR.w	D0
	MOVE.b	$00FF188F, D0
	ADDQ.b	#3, D0
	MOVE.b	D0, rOnePlayer_CurStage
	LEA	tbl_cutsceneOrder, A1
	MOVE.b	(A1,D0.w), rOnePlayer_CurCutscene
	ADDQ.b	#1, $00FF188F
	CMPI.b	#4, $00FF188F
	BCC.w	loc_00010D02
	JMP	ObjSys_DeleteObjectA0
loc_00010D02:
	CLR.b	$00FF188F
	JMP	ObjSys_DeleteObjectA0
	
loc_00010D0E:
	LEA	$00FF3000, A1
	MOVE.w	#$03FF, D0
loc_00010D18:
	CLR.w	(A1)+
	DBF	D0, loc_00010D18
	RTS
	
loc_00010D20:
	BSR.b	loc_00010D0E
	MOVE.b	#$80, $36(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.b	$36(A0), D0
	MOVE.w	#$2800, D1
	JSR	SignedSinWithMul
	SWAP	D2
	MOVE.w	D2, rScrollYScanFront
	SUBQ.b	#2, $36(A0)
	BCS.w	loc_00010D4E
	RTS
loc_00010D4E:
	MOVE.b	#sfxID_5F, D0
	JSR	SndDrv_QueueSoundEffect
	CLR.b	$36(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.b	$36(A0), D0
	ORI.b	#$80, D0
	MOVE.w	#$2800, D1
	JSR	SignedSinWithMul
	SWAP	D2
	ADDI.w	#$0038, D2
	BSR.w	loc_0001103E
	SUBQ.b	#4, $36(A0)
	BPL.w	loc_00010D88
	RTS
loc_00010D88:
	CLR.b	$00FF013A
	MOVE.w	#$0020, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	ObjSys_UpdateObjNextOpTimer
	BRA.w	loc_00010C7C
loc_00010DA2:
	MOVE.w	#$001C, $26(A0)
	MOVE.w	#4, $2A(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
loc_00010DB4:
	MOVE.w	#$0014, D0
	JSR	loc_00001202
	ADDI.w	#$0014, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.b	#sfxID_38, D0
	JSR	SndDrv_QueueSoundEffect
	MOVE.w	#$000C, D0
	JSR	ObjSys_SetObjNextOpTimer
	ADDQ.w	#1, $26(A0)
	BSR.w	loc_00011092
	JSR	ObjSys_UpdateObjNextOpTimer
	SUBQ.w	#1, $2A(A0)
	BNE.b	loc_00010DB4
	MOVE.w	#$0040, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.b	#$2A, $6(A0)
	CLR.w	$12(A0)
	MOVE.w	#$0040, $A(A0)
	MOVE.w	#$8000, $1A(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	JSR	ObjSys_UpdatePosInterpMove
	MOVE.w	$A(A0), D0
	BPL.w	loc_00010E32
	CLR.w	D0
loc_00010E32:
	ADDI.w	#$000C, D0
	MOVE.w	D0, $26(A0)
	BSR.w	loc_00011092
	TST.w	$A(A0)
	BMI.w	loc_00010E48
	RTS
loc_00010E48:
	MOVE.w	#$0010, D0
	JSR	ObjSys_SetObjNextOpTimer
	ADDQ.w	#1, $26(A0)
	BSR.w	loc_00011092
	JSR	ObjSys_UpdateObjNextOpTimer
	CLR.b	$00FF013A
	MOVE.w	#$0010, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	ObjSys_UpdateObjNextOpTimer
	BRA.w	loc_00010C7C
loc_00010E7A:
	CLR.b	$36(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.b	$36(A0), D0
	MOVE.w	#$7E00, D1
	JSR	SignedSinWithMul
	SWAP	D2
	MOVE.w	D2, $26(A0)
	BSR.w	loc_000110F0
	CMPI.b	#$40, $36(A0)
	BCC.w	loc_00010EAC
	ADDQ.b	#1, $36(A0)
	RTS
loc_00010EAC:
	MOVE.w	#$0030, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	ObjSys_UpdateObjNextOpTimer
	CLR.b	$36(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	ADDQ.b	#4, $36(A0)
	MOVE.b	$36(A0), D0
	ORI.b	#$80, D0
	MOVE.w	#$0C00, D1
	JSR	SignedSinWithMul
	SWAP	D2
	ADDI.w	#$007E, D2
	MOVE.w	D2, $26(A0)
	BSR.w	loc_000110F0
	TST.b	$36(A0)
	BEQ.w	loc_00010EF4
	RTS
loc_00010EF4:
	MOVE.w	#$0060, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.b	#$2A, $6(A0)
	MOVE.w	#$FFF8, $12(A0)
	MOVE.w	#$0080, $A(A0)
	MOVE.w	#$C000, $1A(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	JSR	ObjSys_UpdatePosInterpMove
	MOVE.w	$A(A0), D0
	BPL.w	loc_00010F32
	CLR.w	D0
loc_00010F32:
	MOVE.w	D0, $26(A0)
	BSR.w	loc_000110F0
	TST.w	$26(A0)
	BEQ.w	loc_00010F44
	RTS
loc_00010F44:
	CLR.b	$36(A0)
	MOVE.w	#$0010, $38(A0)
	MOVE.w	#1, $12(A0)
	MOVE.b	#sfxID_74, D0
	JSR	SndDrv_QueueSoundEffect
	JSR	ObjSys_UpdateObjNextOpTimer
	ADDI.b	#$14, $36(A0)
	MOVE.w	$38(A0), D0
	ADD.w	$12(A0), D0
	BMI.w	loc_00010C7C
	CMPI.w	#$0020, D0
	BCS.w	loc_00010F82
	NEG.w	$12(A0)
loc_00010F82:
	MOVE.w	D0, $38(A0)
	BRA.w	loc_00011120
loc_00010F8A:
	CLR.b	$36(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.b	$36(A0), D0
	MOVE.w	#$3000, D1
	JSR	SignedSinWithMul
	SWAP	D2
	MOVE.w	D2, rScrollYScanFront
	CMPI.b	#$40, $36(A0)
	BCC.w	loc_00010FBA
	ADDQ.b	#2, $36(A0)
	RTS
loc_00010FBA:
	MOVE.w	#8, $2A(A0)
loc_00010FC0:
	CLR.w	$26(A0)
	BSR.w	loc_000111A2
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.w	#$0038, D0
	JSR	ObjSys_SetObjNextOpTimer
	ADDQ.w	#2, $26(A0)
	BSR.w	loc_0001114A
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.w	#$001C, D0
	JSR	ObjSys_SetObjNextOpTimer
	SUBQ.w	#4, $26(A0)
	BSR.w	loc_0001114A
	JSR	ObjSys_UpdateObjNextOpTimer
	SUBQ.w	#4, $2A(A0)
	BCC.b	loc_00010FC0
	CLR.b	$00FF013A
	BSR.w	loc_000111BE
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.b	$36(A0), D0
	MOVE.w	#$3000, D1
	JSR	SignedSinWithMul
	SWAP	D2
	MOVE.w	D2, rScrollYScanFront
	CMPI.b	#$80, $36(A0)
	BCC.w	loc_0001103A
	ADDQ.b	#2, $36(A0)
	RTS
loc_0001103A:
	BRA.w	loc_00010C7C
loc_0001103E:
	LEA	$00FF3000, A1
	TST.b	$00FF013B
	BNE.w	loc_00011054
	LEA	$00FF3200, A1
loc_00011054:
	ADDA.w	#$00D0, A1
	MOVE.w	#$0037, D0
	MOVE.l	#$00370000, D1
	MOVE.l	#$00003800, D3
	DIVU.w	D2, D3
	CLR.l	D2
	MOVE.w	D3, D2
	LSL.l	#8, D2
	NEG.l	D2
loc_00011072:
	ADD.l	D2, D1
	MOVE.l	D1, D3
	SWAP	D3
	SUB.w	D0, D3
	MOVE.w	D3, -(A1)
	DBF	D0, loc_00011072
	MOVE.b	#$6A, $00FF013A
	EORI.b	#1, $00FF013B
	RTS
loc_00011092:
	LEA	$00FF3000, A1
	TST.b	$00FF013B
	BNE.w	loc_000110A8
	LEA	$00FF3200, A1
loc_000110A8:
	MOVE.l	#$00001C00, D2
	MOVE.w	$26(A0), D1
	DIVU.w	D1, D2
	CLR.l	D1
	MOVE.w	D2, D1
	LSL.l	#8, D1
	MULU.w	#$004C, D2
	LSR.w	#8, D2
	NEG.w	D2
	ADDI.w	#$004C, D2
	SWAP	D2
	CLR.w	D2
	CLR.w	D0
loc_000110CC:
	ADD.l	D1, D2
	MOVE.l	D2, D3
	SWAP	D3
	SUB.w	D0, D3
	MOVE.w	D3, (A1)+
	ADDQ.w	#1, D0
	CMPI.w	#$0098, D0
	BCS.b	loc_000110CC
	MOVE.b	#$9A, $00FF013A
	EORI.b	#1, $00FF013B
	RTS
loc_000110F0:
	MOVE.w	#$0037, D0
	MOVE.w	$26(A0), D1
	LEA	$00FF06E2, A1
loc_000110FE:
	MOVE.w	D1, D2
	MOVE.w	D0, D3
	CMPI.w	#$001C, D3
	BCS.w	loc_00011110
	NEG.w	D3
	ADDI.w	#$0038, D3
loc_00011110:
	MULU.w	D3, D2
	LSR.w	#4, D2
	NEG.w	D2
	MOVE.w	D2, (A1)+
	CLR.w	(A1)+
	DBF	D0, loc_000110FE
	RTS
loc_00011120:
	MOVE.b	$36(A0), D0
	MOVE.w	$38(A0), D1
	LSL.w	#5, D1
	MOVE.w	#$0037, D3
	LEA	$00FF06E2, A1
loc_00011134:
	JSR	SignedSinWithMul
	SWAP	D2
	MOVE.w	D2, (A1)+
	CLR.w	(A1)+
	ADDI.b	#$16, D0
	DBF	D3, loc_00011134
	RTS
loc_0001114A:
	LEA	$00FF3000, A1
	TST.b	$00FF013B
	BNE.w	loc_00011160
	LEA	$00FF3200, A1
loc_00011160:
	MOVE.l	#$00003800, D0
	MOVE.w	$26(A0), D1
	ADDI.w	#$0038, D1
	DIVU.w	D1, D0
	CLR.l	D2
	MOVE.w	D0, D2
	LSL.l	#8, D2
	MOVE.l	#$00300000, D1
	CLR.w	D0
loc_0001117E:
	ADD.l	D2, D1
	MOVE.l	D1, D3
	SWAP	D3
	SUB.w	D0, D3
	MOVE.w	D3, (A1)+
	ADDQ.w	#1, D0
	CMPI.w	#$00A8, D0
	BCS.b	loc_0001117E
	MOVE.b	#$AA, $00FF013A
	EORI.b	#1, $00FF013B
	RTS
loc_000111A2:
	LEA	loc_000111B2, A1
	MOVE.w	$2A(A0), D0
	MOVEA.l	(A1,D0.w), A2
	JMP	(A2)
loc_000111B2:
	dc.l	loc_00011218
	dc.l	loc_000111D0
	dc.l	loc_000111BE
loc_000111BE:
	LEA	$00FF06E2, A1
	MOVE.w	#$008F, D0
loc_000111C8:
	CLR.l	(A1)+
	DBF	D0, loc_000111C8
	RTS
loc_000111D0:
	JSR	UpdateRNG
	ANDI.b	#$80, D0
	MOVE.b	D0, D4
	MOVE.w	#$0180, D0
	MOVE.w	#$A000, D1
	LEA	$00FF06E2, A1
	MOVE.w	#$008F, D3
loc_000111EE:
	MOVEM.l	D0, -(A7)
	LSR.w	#1, D0
	JSR	SignedSinWithMul
	MOVEM.l	(A7)+, D0
	SWAP	D2
	ADDI.w	#$00A0, D2
	TST.b	D4
	BEQ.w	loc_0001120C
	NEG.w	D2
loc_0001120C:
	MOVE.w	D2, (A1)+
	CLR.w	(A1)+
	SUBQ.w	#1, D0
	DBF	D3, loc_000111EE
	RTS
loc_00011218:
	CLR.b	D0
	CLR.w	D1
	LEA	$00FF06E2, A1
	MOVE.w	#$008F, D3
loc_00011226:
	JSR	SignedSinWithMul
	SWAP	D2
	MOVE.w	D2, (A1)+
	CLR.w	(A1)+
	ADDQ.b	#5, D0
	ADDI.w	#$0020, D1
	DBF	D3, loc_00011226
	RTS
; Dead Code
	ori #$700, SR
	move.w #5, d0
	move.w #$2980, d5
loc_0001124A:
	jsr Video_SetVRAMAddressWrite
	addi.w #$A80, d5
	move.w #$3F, d1
loc_00011258:
	move.w #0, (vdpData1).l
	dbf d1, loc_00011258
	dbf d0, loc_0001124A
	andi #$F8FF, SR
	rts
	
tbl_sprMappings:
	dc.l	sprMappings_puyoRed
	dc.l	sprMappings_puyoYellow
	dc.l	sprMappings_attacks
	dc.l	sprMappings_puyoGreen
	dc.l	sprMappings_puyoPurple
	dc.l	sprMappings_puyoBlue
	dc.l	sprMappings_battleUI
	dc.l	sprMappings_staffText
	dc.l	sprMappings_arle
	dc.l	sprMappings_skeletont
	dc.l	sprMappings_suketoudara
	dc.l	sprMappings_zombie
	dc.l	sprMappings_draco
	dc.l	sprMappings_nasu
	dc.l	sprMappings_witch
	dc.l	sprMappings_sasoriman
	dc.l	sprMappings_harpy
	dc.l	sprMappings_zoh
	dc.l	sprMappings_schezo
	dc.l	sprMappings_minotauros
	dc.l	sprMappings_rulue
	dc.l	sprMappings_satan
	dc.l	sprMappings_mummy
	dc.l	sprMappings_sukiyapotes
	dc.l	sprMappings_panotty
	dc.l	sprMappings_carbuncle
	dc.l	sprMappings_puyoBig
	dc.l	sprMappings_bgBirds
	dc.l	sprMappings_leftoverCreditsText ; Leftover from Arcade version
	dc.l	sprMappings_bgLightning
	dc.l	sprMappings_unk11 ; Unknown Mappings
	dc.l	sprMappings_gameoverLetters
	dc.l	sprMappings_textbox
	dc.l	sprMappings_levelCursor
	dc.l	sprMappings_portraitFlash
	dc.l	sprMappings_portraitFlash
	dc.l	sprMappings_title
	dc.l	sprMappings_unk6 ; Unknown Mappings
	dc.l	sprMappings_demoControls
	dc.l	sprMappings_twoPlayer
	dc.l	sprMappings_title
	dc.l	sprMappings_gameoverText
	dc.l	sprMappings_tutorial
	
sprMappings_tutorial:
	include "art/sprite_mappings/tutorial/sprites.asm"
sprMappings_title:
	include "art/sprite_mappings/title/title.asm"
sprMappings_twoPlayer:
	include "art/sprite_mappings/twoPlayer/sprites.asm"
sprMappings_demoControls:
	include "art/sprite_mappings/demo/controls.asm"
sprMappings_unk6:
	include "art/sprite_mappings/unknown/unknown6.asm"
sprMappings_staffText:
	dc.l	rSprMapStaffText
	dc.l	rSprMapStaffText+$A2
	dc.l	rSprMapStaffText+($A2*2)
	dc.l	rSprMapStaffText+($A2*3)
	dc.l	rSprMapStaffText+($A2*4)
	dc.l	rSprMapStaffText+($A2*5)
	dc.l	rSprMapStaffText+($A2*6)
	dc.l	rSprMapStaffText+($A2*7)
sprMappings_portraitFlash:
	include "art/sprite_mappings/portrait/flash.asm"
sprMappings_levelCursor:
	include "art/sprite_mappings/twoplayer/cursor.asm"
sprMappings_textbox:
	include "art/sprite_mappings/cutscene/textbox.asm"
sprMappings_gameoverLetters:
	include "art/sprite_mappings/gameover/letters.asm"
sprMappings_unk11:
	include "art/sprite_mappings/unknown/unknown11.asm"
sprMappings_arle:
	include "art/sprite_mappings/cutscene/arle.asm"
sprMappings_panotty:
	include "art/sprite_mappings/cutscene/panotty.asm"
sprMappings_sukiyapotes:
	include "art/sprite_mappings/cutscene/sukiyapotes.asm"
sprMappings_mummy:
	include "art/sprite_mappings/cutscene/mummy.asm"
sprMappings_skeletont:
	include "art/sprite_mappings/cutscene/skeleton-t.asm"
sprMappings_suketoudara:
	include "art/sprite_mappings/cutscene/suketoudara.asm"
sprMappings_zombie:
	include "art/sprite_mappings/cutscene/zombie.asm"
sprMappings_draco:
	include "art/sprite_mappings/cutscene/draco.asm"
sprMappings_nasu:
	include "art/sprite_mappings/cutscene/nasu.asm"
sprMappings_witch:
	include "art/sprite_mappings/cutscene/witch.asm"
sprMappings_sasoriman:
	include "art/sprite_mappings/cutscene/sasoriman.asm"
sprMappings_harpy:
	include "art/sprite_mappings/cutscene/harpy.asm"
sprMappings_zoh:
	include "art/sprite_mappings/cutscene/zoh.asm"
sprMappings_schezo:
	include "art/sprite_mappings/cutscene/schezo.asm"
sprMappings_minotauros:
	include "art/sprite_mappings/cutscene/minotauros.asm"
sprMappings_rulue:
	include "art/sprite_mappings/cutscene/rulue.asm"
sprMappings_satan:
	include "art/sprite_mappings/cutscene/satan.asm"
sprMappings_leftoverCreditsText:
	include "art/sprite_mappings/leftover/credits_text.asm"
sprMappings_gameoverText:
	include "art/sprite_mappings/game/game_over.asm"
sprMappings_puyoRed:
	include "art/sprite_mappings/game/puyo_red.asm"
sprMappings_puyoYellow:
	include "art/sprite_mappings/game/puyo_yellow.asm"
sprMappings_attacks:
	include "art/sprite_mappings/game/attack_effects.asm"
sprMappings_puyoGreen:
	include "art/sprite_mappings/game/puyo_green.asm"
sprMappings_puyoPurple:
	include "art/sprite_mappings/game/puyo_purple.asm"
sprMappings_puyoBlue:
	include "art/sprite_mappings/game/puyo_blue.asm"
sprMappings_battleUI:
	include "art/sprite_mappings/game/misc_ui.asm"
sprMappings_carbuncle:
	include "art/sprite_mappings/game/carbuncle.asm"
sprMappings_puyoBig:
	include "art/sprite_mappings/game/puyo_big.asm"
sprMappings_bgBirds:
	include "art/sprite_mappings/cutscene/bg_birds.asm"
sprMappings_bgLightning:
	include "art/sprite_mappings/cutscene/bg_lightning.asm"
sprMappings_scoreText:
	include "art/sprite_mappings/game/score.asm"
	
; ---------- File Start: game/bg_mappings.asm ----------
; This contains the majority of the code and data related to background mappings

Video_LoadQueuedBgMaps:
	; Load index into D0.  If it's zero, return.
	MOVE.w	$00FF0CDE, D0
	BEQ.w	@NoBGsToLoad
	
	; Backup index and initialize variables
	MOVE.w	$00FF0CDE, $00FF0DE0
	CLR.w	$00FF0CDE
	CLR.w	D2
	
	; Load ???? into D2
	MOVE.b	$00FF0A32, D2
	
	; Load 16-bit value into D1
	ANDI.b	#3, D2
	LSL.b	#1, D2
	MOVE.w	loc_0001442E(PC,D2.w), D1
	
	; Decrease D0 index by 1 and load A2 with the table pointer
	SUBQ.w	#1, D0
	LEA	$00FF0CE0, A2
	
	; For each non-loaded index in the table, load it.
@BgLoadLoop:
	MOVEM.l	A2/D1/D0, -(A7)
	BSR.w	Video_LoadBGQueueEntry	; Loads the actual mapping
	MOVEM.l	(A7)+, D0/D1/A2
	ADDA.l	#4, A2
	DBF	D0, @BgLoadLoop
@NoBGsToLoad:
	RTS
loc_0001442E:
	dc.w	$0040 
	dc.w	$0080
	dc.w	$0100 
	dc.w	$0100

Video_LoadBGQueueEntry:
	MOVE.b	(A2), D2 ; First byte in queued 4 byte entry
	BPL.w	loadBGMappings ; If the entry is a BG mapping table pointer, load that instead.
	BRA.w	@UnkBranch ; Useless branch?
@UnkBranch:
	ANDI.w	#$007F, D2
	LSL.w	#2, D2
	MOVEA.l	loc_0001444C(PC,D2.w), A4
	JMP	(A4)
loc_0001444C:
	dc.l	loc_0001514A ; 0x80
	dc.l	loc_00015204 ; 0x81
	dc.l	loc_00015212 ; 0x82
	dc.l	loc_00014E82 ; 0x83
	dc.l	BgLoad_BattleCrumbleFloor ; 0x84
	dc.l	loc_000154D2 ; 0x85
	dc.l	loc_0001529E ; 0x86
	dc.l	loc_000152AC ; 0x87
	dc.l	loc_00014CF8 ; 0x88
	dc.l	loc_00014B54 ; 0x89
	dc.l	loc_00014B14 ; 0x8A
	dc.l	loc_0001493C ; 0x8B
	dc.l	loc_00014A64 ; 0x8C
	dc.l	loc_00014AEA ; 0x8D
	dc.l	loc_00014A50 ; 0x8E
	dc.l	loc_000149F8 ; 0x8F
	dc.l	loc_00015520 ; 0x90
	dc.l	loc_000155DE ; 0x91
	dc.l	BgLoad_GameOverNumber ; 0x92
	dc.l	loc_000148E2 ; 0x93
	dc.l	loc_00015550 ; 0x94
	dc.l	loc_0001557C ; 0x95 (Menu screen stuff?)
	dc.l	loc_000148B8 ; 0x96
	dc.l	loc_0001473C ; 0x97
	dc.l	loc_00014652 ; 0x98
	dc.l	loc_000146A2 ; 0x99
	dc.l	loc_000145B8 ; 0x9A
	dc.l	loc_0001451E ; 0x9B
	dc.l	loc_000144C0 ; 0x9C
loc_000144C0:
	MOVE.w	$2(A2), D5
	LEA	loc_000144E2, A4
	CLR.w	D0
	MOVE.b	$1(A2), D0
	MULU.w	#$000C, D0
	ADDA.w	D0, A4
	MOVE.w	#2, D3
	MOVE.w	#1, D4
	BRA.w	loadBGWordIndexYLoop
loc_000144E2:
	dc.w 	$424B, $424C, $424D, $4257, $4258, $4259, $424F, $4250
	dc.w 	$4251, $425B, $425C, $425D, $4252, $4253, $4254, $425E
	dc.w 	$425F, $4260, $4A51, $4A50, $4A4F, $4A5D, $4A5C, $4A5B
	dc.w 	$4A4D, $4A4C, $4A4B, $4A59, $4A58, $4A57
loc_0001451E:
	MOVE.w	#$C204, D2
	TST.b	rCurMainPlayer
	BEQ.w	loc_00014530
	MOVE.w	#$C234, D2
loc_00014530:
	CLR.w	D5
	MOVE.b	$1(A2), D5
	SUBQ.b	#1, D5
	LSL.w	#7, D5
	ADD.w	D2, D5
	LEA	loc_00014570, A4
	MOVE.w	#$000B, D3
	MOVE.w	#1, D4
	BSR.w	loadBGWordIndexYLoop
	CLR.w	D5
	MOVE.b	$1(A2), D5
	NEG.b	D5
	ADDI.b	#$0F, D5
	LSL.w	#7, D5
	ADD.w	D2, D5
	LEA	loc_00014588, A4
	MOVE.w	#$000B, D3
	MOVE.w	#1, D4
	BRA.w	loadBGWordIndexYLoop
loc_00014570:
	dc.w	$C1E8, $C1E9, $C1E9, $C1E9, $C1E9, $C1E9, $C1E9, $C1E9, $C1E9, $C1E9, $C1E9, $C1EA 
loc_00014588:
	dc.w 	$C1EB, $C1AB, $C1AB, $C1AB, $C1AB, $C1AB, $C1AB, $C1AB
	dc.w 	$C1AB, $C1AB, $C1AB, $C1EC, $C1ED, $C1EE, $C1EE, $C1EE
	dc.w 	$C1EE, $C1EE, $C1EE, $C1EE, $C1EE, $C1EE, $C1EE, $C1EF
loc_000145B8:
	LEA	loc_0001460E, A1
	MOVE.w	#3, D0
	MOVE.w	#$A500, D6
	MOVE.w	#$C21E, D5
	TST.b	rCurMainPlayer
	BEQ.w	loc_000145D8
	MOVE.w	#$C22A, D5
loc_000145D8:
	BSR.w	loc_00014890
	CLR.w	D0
	MOVE.b	rOnePlayer_CurCutscene, D0
	LSL.w	#2, D0
	LEA	loc_00014612, A1
	ADDA.w	D0, A1
	MOVE.w	#3, D0
	MOVE.w	#$A500, D6
	MOVE.w	#$C21E, D5
	TST.b	rCurMainPlayer
	BNE.w	loc_00014608
	MOVE.w	#$C22A, D5
loc_00014608:
	BSR.w	loc_00014890
	RTS
loc_0001460E:
	dc.b	$80, $A2, $96, $88 
loc_00014612:
	dc.b 	$A4, $94, $88, $96
	dc.b 	$A6, $80, $A2, $80
	dc.b 	$B2, $9C, $98, $82
	dc.b 	$86, $A2, $80, $84
	dc.b 	$9A, $80, $A4, $A8
	dc.b 	$AC, $90, $84, $8E
	dc.b 	$A4, $84, $9C, $9E
	dc.b 	$8E, $80, $9E, $B0
	dc.b 	$B2, $9C, $8E, $00
	dc.b 	$A4, $8E, $88, $B2
	dc.b 	$98, $90, $9A, $9C
	dc.b 	$A2, $A8, $96, $A8
	dc.b 	$A4, $80, $A6, $9A
	dc.b 	$98, $A8, $98, $B0
	dc.b 	$9E, $9C, $A6, $88
	dc.b 	$9E, $80, $9A, $9C
loc_00014652:
	MOVE.w	#$C506, D5
	MOVE.w	#$A500, D6
	LEA	loc_0001468E, A1
	MOVE.w	#9, D0
	BSR.w	loc_00014882
	MOVE.w	#$C606, D5
	MOVE.w	#$A500, D6
	LEA	loc_00014698, A1
	MOVE.w	#9, D0
	BSR.w	loc_00014882
	MOVE.w	$2(A2), D2
	MOVE.w	#$C608, D5
	MOVE.w	#$8500, D6
	BRA.w	loc_000146F2
loc_0001468E:
	dc.w 	$9E96, $80B0, $00A6, $9098, $8800
loc_00014698:
	dc.w 	$0000, $0000, $0000, $00A4, $8884
loc_000146A2:
	MOVE.w	#$C706, D5
	MOVE.w	#$A500, D6
	LEA	loc_000146DE, A1
	MOVE.w	#9, D0
	BSR.w	loc_00014882
	MOVE.w	#$C806, D5
	MOVE.w	#$A500, D6
	LEA	loc_000146E8, A1
	MOVE.w	#9, D0
	BSR.w	loc_00014882
	MOVE.w	$2(A2), D2
	MOVE.w	#$C808, D5
	MOVE.w	#$8500, D6
	BRA.w	loc_000146F2
loc_000146DE:
	dc.w 	$829C, $9AA8, $A400, $0000, $0000
loc_000146E8:
	dc.w 	$0000, $0000, $0000, $009E, $A6A4
loc_000146F2:
	TST.b	rCurMainPlayer
	BEQ.w	loc_00014700
	ADDI.w	#$0030, D5
loc_00014700:
	CLR.l	$00FF1894
	MOVE.b	#2, $00FF1898
	LEA	$00FF1899, A1
loc_00014714:
	ANDI.l	#$0000FFFF, D2
	BEQ.w	loc_0001472E
	DIVU.w	#$000A, D2
	SWAP	D2
	ADDQ.b	#1, D2
	LSL.b	#1, D2
	MOVE.b	D2, -(A1)
	SWAP	D2
	BRA.b	loc_00014714
loc_0001472E:
	LEA	$00FF1894, A1
	MOVE.w	#4, D0
	BRA.w	loc_00014890
loc_0001473C:
	BSR.w	loc_0001474A
	BSR.w	loc_000147EC
	BSR.w	loc_00014802
	RTS
loc_0001474A:
	CMPI.b	#stgID_Draco, rOnePlayer_CurStage
	BCS.w	loc_0001479C
	CMPI.b	#stgID_Schezo, rOnePlayer_CurStage
	BCC.w	loc_0001477E
	LEA	loc_000147D4, A1
	BSR.w	loc_000147B6
	MOVE.b	rOnePlayer_CurStage, D0
	SUBQ.b	#3, D0
	LEA	$00FF189A, A1
	BRA.w	loc_000147C8
loc_0001477E:
	LEA	loc_000147DC, A1
	BSR.w	loc_000147B6
	MOVE.b	rOnePlayer_CurStage, D0
	SUBI.b	#$0D, D0
	LEA	$00FF189B, A1
	BRA.w	loc_000147C8
loc_0001479C:
	LEA	loc_000147E4, A1
	BSR.w	loc_000147B6
	MOVE.b	rOnePlayer_CurStage, D0
	LEA	$00FF189B, A1
	BRA.w	loc_000147C8
loc_000147B6:
	MOVE.w	#7, D0
	LEA	$00FF1894, A2
loc_000147C0:
	MOVE.b	(A1)+, (A2)+
	DBF	D0, loc_000147C0
	RTS
loc_000147C8:
	ADDQ.b	#2, D0
	ADDI.b	#$35, D0
	LSL.b	#1, D0
	MOVE.b	D0, (A1)
	RTS
loc_000147D4:
	dc.b	$00, $A4, $A6, $80, $8C, $88, $00, $00 
loc_000147DC:
	dc.b	$A4, $A6, $80, $8C, $88, $00, $6E, $00 
loc_000147E4:
	dc.b	$96, $88, $A4, $A4, $9C, $9A, $00, $00 
loc_000147EC:
	MOVE.w	#$C520, D5
	MOVE.w	#$C500, D6
	MOVE.w	#7, D0
	LEA	$00FF1894, A1
	BRA.w	loc_00014890
loc_00014802:
	MOVE.w	#$E520, D5
	MOVE.w	#7, D3
	MOVE.w	#1, D4
	CMPI.b	#stgID_Draco, rOnePlayer_CurStage
	BCS.w	loc_0001483A
	MOVE.w	#$C000, D6
	LEA	loc_0001484E, A4
	CMPI.b	#stgID_ZohDaimaoh, rOnePlayer_CurStage
	BCS.w	loc_00014836
	LEA	loc_0001485E, A4
loc_00014836:
	BRA.w	loadBGByteIndexYLoop
loc_0001483A:
	LEA	loc_0001486E, A4
	LEA	loc_0001487E, A5
	MOVE.w	#$8000, D6
	BRA.w	loadBGBytePal2
loc_0001484E:
	dc.b	$11, $12, $13, $14, $15, $16, $17, $18, $22, $23, $24, $25, $26, $27, $28, $29 
loc_0001485E:
	dc.b 	$4F, $4E, $4F, $4E, $4F, $4E, $4F, $4E, $53, $52, $53, $52, $53, $52, $53, $52
loc_0001486E:
	dc.b	$0D, $0E, $15, $16, $0D, $0E, $15, $16, $0F, $10, $17, $18, $0F, $10, $17, $18 
loc_0001487E:
	dc.b	$A0, $0A, $A0, $0A 
loc_00014882:
	TST.b	rCurMainPlayer
	BEQ.w	loc_00014890
	ADDI.w	#$0030, D5
loc_00014890:
	MOVE.b	(A1)+, D6
	JSR	Video_SetVRAMAddressWrite
	ADD.w	D1, D5
	MOVE.w	D6, vdpData1
	ADDQ.b	#1, D6
	JSR	Video_SetVRAMAddressWrite
	SUB.w	D1, D5
	ADDQ.w	#2, D5
	MOVE.w	D6, vdpData1
	DBF	D0, loc_00014890
	RTS
loc_000148B8:
	MOVE.w	#$0027, D3
	MOVE.w	#0, D4
	MOVE.w	$2(A2), D5
	ANDI.w	#$FF00, D5
	ADDI.w	#$E000, D5
	CLR.w	D0
	MOVE.b	$3(A2), D0
	MULU.w	#$0050, D0
	LEA	bgmap_titleBG1, A4
	ADDA.w	D0, A4
	BRA.w	loadBGWordIndexYLoop
loc_000148E2:
	MOVE.w	#$C71E, D5
	MOVE.w	#$8500, D6
	TST.b	$1(A2)
	BEQ.w	loc_000148FA
	MOVE.w	#$C72A, D5
	MOVE.w	#$A500, D6
loc_000148FA:
	MOVE.w	$2(A2), D2
	LEA	$00FF18A4, A3
	CLR.l	(A3)+
	BSR.w	loc_000157A2
	LEA	$00FF18A4, A3
	MOVE.w	#3, D0
loc_00014914:
	BSR.w	Video_SetVRAMAddressWrite
	ADD.w	D1, D5
	MOVE.b	(A3)+, D6
	ADDQ.b	#1, D6
	LSL.b	#1, D6
	MOVE.w	D6, vdpData1
	ADDQ.b	#1, D6
	BSR.w	Video_SetVRAMAddressWrite
	SUB.w	D1, D5
	MOVE.w	D6, vdpData1
	ADDQ.w	#2, D5
	DBF	D0, loc_00014914
	RTS
loc_0001493C:
	MOVE.w	#$0010, D3
	MOVE.w	#9, D4
	MOVE.w	#$C716, D5
	BSR.w	Video_SetVRAMAddressWrite
	ADD.w	D1, D5
	MOVE.w	#$C4D8, vdpData1
	MOVE.w	D3, D0
	SUBQ.w	#1, D0
loc_0001495A:
	MOVE.w	#$C4D9, vdpData1
	DBF	D0, loc_0001495A
	MOVE.w	#$C4DA, vdpData1
	MOVE.w	D4, D0
	SUBQ.w	#1, D0
loc_00014972:
	BSR.w	Video_SetVRAMAddressWrite
	MOVE.w	#$C4DB, vdpData1
	MOVE.w	D3, D2
	SUBQ.w	#1, D2
loc_00014982:
	MOVE.w	#$8500, vdpData1
	DBF	D2, loc_00014982
	MOVE.w	#$C4DC, vdpData1
	ADD.w	D1, D5
	DBF	D0, loc_00014972
	BSR.w	Video_SetVRAMAddressWrite
	MOVE.w	#$C4DD, vdpData1
	MOVE.w	D3, D0
	SUBQ.w	#1, D0
loc_000149AC:
	MOVE.w	#$C4DE, vdpData1
	DBF	D0, loc_000149AC
	MOVE.w	#$C4DF, vdpData1
	RTS

; ----- $92 Start -----
BgLoad_GameOverNumber:
	CLR.w	D0
	MOVE.b	$1(A2), D0
	LSL.w	#6, D0
	ADDI.w	#$0200, D0
	ORI.w	#$A000, D0
	MOVE.w	#$C70C, D5
	MOVE.w	#6, D4
@YLoop:
	BSR.w	Video_SetVRAMAddressWrite
	ADDI.w	#$0080, D5
	MOVE.w	#7, D3
@XLoop:
	MOVE.w	D0, vdpData1
	ADDQ.b	#1, D0
	DBF	D3, @XLoop
	DBF	D4, @YLoop
	RTS
; ----- $92 End -----

loc_000149F8:
	MOVE.w	#6, D3
	MOVE.w	#2, D4
	MOVE.w	#$DEB8, D5
	MOVE.w	#$E100, D6
	LEA	loc_00014A24, A4
	TST.b	$1(A2)
	BEQ.w	loadBGByteIndexYLoop
	MOVE.w	#$E900, D6
	LEA	loc_00014A3A, A4
	BRA.w	loadBGByteIndexYLoop
loc_00014A24:
	dc.b	$FC, $FC, $CA, $C8, $F1, $C0, $FC, $D5, $D6, $CD, $CE, $CF, $D0, $D1, $DF, $E5, $DD, $DE, $DF, $E0, $E1, $00 
loc_00014A3A:
	dc.b	$FC, $C0, $F1, $C8, $CA, $FC, $FC, $D1, $D0, $CF, $CE, $CD, $D6, $D5, $E1, $E0, $DF, $DE, $DD, $E5, $DF, $00 

loc_00014A50:
	BSR.w	loc_00014AF8
	SUBQ.w	#2, D3
	SUBQ.w	#2, D4
	ADDI.w	#$0082, D5

	MOVE.w	#$83FB, D6
	BRA.w	loadBGClearYLoop
loc_00014A64:
	BSR.w	loc_00014AF8
	MOVEM.l	D5/D4/D3, -(A7)
	LEA	rPlaneBuffer, A1
loc_00014A72:
	BSR.w	Video_SetVRAMAddressRead
	ADD.w	D1, D5
	MOVE.w	D3, D0
loc_00014A7A:
	MOVE.w	vdpData1, D2
	MOVE.w	D2, (A1)+
	DBF	D0, loc_00014A7A
	DBF	D4, loc_00014A72
	MOVEM.l	(A7)+, D3/D4/D5
	SUBQ.w	#2, D3
	SUBQ.w	#2, D4
	ADDQ.w	#2, D5
	BSR.w	Video_SetVRAMAddressWrite
	SUBQ.w	#2, D5
	ADD.w	D1, D5
	MOVE.w	D3, D0
loc_00014A9E:
	MOVE.w	#$83F8, vdpData1
	DBF	D0, loc_00014A9E
loc_00014AAA:
	BSR.w	Video_SetVRAMAddressWrite
	ADD.w	D1, D5
	MOVE.w	#$83FA, vdpData1
	MOVE.w	D3, D0
loc_00014ABA:
	MOVE.w	#$83FB, vdpData1
	DBF	D0, loc_00014ABA
	MOVE.w	#$83FC, vdpData1
	DBF	D4, loc_00014AAA
	ADDQ.w	#2, D5
	BSR.w	Video_SetVRAMAddressWrite
	SUBQ.w	#2, D5
	MOVE.w	D3, D0
loc_00014ADC:
	MOVE.w	#$83FE, vdpData1
	DBF	D0, loc_00014ADC
	RTS
loc_00014AEA:
	BSR.w	loc_00014AF8
	LEA	rPlaneBuffer, A4
	BRA.w	loadBGWordIndexYLoop
loc_00014AF8:
	CLR.w	D3
	MOVE.b	$1(A2), D3
	MOVE.w	D3, D4
	ANDI.b	#$0F, D3
	LSR.b	#4, D4
	LSL.w	#1, D3
	ADDQ.w	#1, D3
	MULU.w	#3, D4
	MOVE.w	$2(A2), D5
	RTS
loc_00014B14:
	CLR.w	D5
	MOVE.b	$1(A2), D5
	LSL.w	#7, D5
	ADDI.w	#$5F00, D5
	BSR.w	Video_SetVRAMAddressRead
	LEA	vdpData1, A3
	LEA	$00FF0000, A4
	MOVE.w	#$003F, D0
loc_00014B34:
	MOVE.w	(A3), (A4)+
	DBF	D0, loc_00014B34
	MOVE.w	#$6580, D5
	BSR.w	Video_SetVRAMAddressWrite
	LEA	$00FF0000, A4
	MOVE.w	#$003F, D0
loc_00014B4C:
	MOVE.w	(A4)+, (A3)
	DBF	D0, loc_00014B4C
	RTS
loc_00014B54:
	LEA	$00FF0000, A0
	CLR.l	D0
	MOVE.w	$2(A2), D0
	ADDA.l	D0, A0
	BCLR.b	#4, $7(A0)
	JSR	loc_00005022
	MOVEA.l	A2, A3
	MOVEA.l	A2, A4
	ADDI.w	#$0A14, D0
	ADDA.l	#$0000000C, A2
	ADDA.l	#$000001E0, A3
	ADDA.l	#$00000144, A4
	MOVE.w	#$008E, D2
	MOVE.w	#5, D3
	MOVE.w	#$0016, D4
loc_00014B94:
	MOVE.b	(A3,D2.w), D5
	BEQ.w	loc_00014BA6
	BSR.w	loc_00014BBC
	BSET.b	#4, $7(A0)
loc_00014BA6:
	SUBQ.w	#4, D0
	DBF	D3, loc_00014BB6
	MOVE.w	#5, D3
	SUBI.w	#$00E8, D0
	SUBQ.w	#2, D4
loc_00014BB6:
	SUBQ.w	#2, D2
	BCC.b	loc_00014B94
	RTS
loc_00014BBC:
	CLR.w	D7
	LSL.b	#1, D5
	MOVE.b	$1(A3,D2.w), D6
	CMP.b	D5, D6
	BCS.w	loc_00014BD4
	MOVE.b	D6, D7
	SUB.b	D5, D7
	ADDQ.w	#1, D7
	MOVE.b	D5, D6
	SUBQ.b	#1, D6
loc_00014BD4:
	CLR.w	D1
	MOVE.b	(A4,D2.w), D1
	LSR.b	#3, D1
	ANDI.b	#$0C, D1
	MOVEA.l	loc_00014C50(PC,D1.w), A5
	MOVE.b	(A5,D7.w), D5
	BPL.w	loc_00014BF2
	CLR.b	(A3,D2.w)
	RTS
loc_00014BF2:
	CLR.w	D1
	MOVE.b	D6, D1
	LSL.w	#7, D1
	ADD.w	D0, D1
	ADD.b	D4, D6
	CMPI.b	#3, D6
	BCS.w	loc_00014C08
	MOVE.b	#2, D6
loc_00014C08:
	TST.w	D7
	BEQ.w	loc_00014C12
	MOVE.b	#1, D6
loc_00014C12:
	ANDI.w	#$00FF, D6
	LSL.w	#2, D6
	MOVEA.l	loc_00014C44(PC,D6.w), A5
	SWAP	D0
	MOVE.b	(A4,D2.w), D0
	MOVE.b	D0, D7
	ANDI.b	#$70, D7
	CMPI.b	#$60, D7
	BEQ.w	loc_00014C34
	OR.b	D5, D7
	MOVE.b	D7, D0
loc_00014C34:
	JSR	loc_00004D88
	JSR	(A5)
	SWAP	D0
	ADDQ.b	#1, $1(A3,D2.w)
	RTS
loc_00014C44:
	dc.l	loc_00014CDA 
	dc.l	loc_00014CC0
	dc.l	loc_00014CAA
loc_00014C50:
	dc.l	loc_00014C60
	dc.l	loc_00014C78
	dc.l	loc_00014C90
	dc.l	loc_00014CA8
loc_00014C60:
	dc.b	$01, $01, $02, $02, $02, $01, $03, $03, $01, $02, $02, $02, $01, $03, $03, $01, $02, $02, $01, $03, $01, $02, $FF 
	dc.b	$00 
loc_00014C78:
	dc.b	$01, $02, $02, $02, $02, $01, $03, $01, $02, $01, $03, $01, $02, $01, $03, $01, $02, $01, $03, $01, $02, $01, $03, $FF 
loc_00014C90:
	dc.b	$01, $01, $02, $02, $02, $02, $03, $03, $02, $02, $02, $02, $03, $03, $02, $01, $03, $03, $01, $03, $03, $01, $FF 
	dc.b	$00 
loc_00014CA8:
	dc.b	$01
	dc.b	$FF
loc_00014CAA:
	MOVE.w	D1, D5
	BSR.w	Video_SetVRAMAddressWrite
	MOVE.w	#$83FE, vdpData1
	MOVE.w	#$83FE, vdpData1
loc_00014CC0:
	MOVE.w	D1, D5
	ADDI.w	#$0080, D5
	BSR.w	Video_SetVRAMAddressWrite
	MOVE.w	D0, D5
	MOVE.w	D5, vdpData1
	ADDQ.w	#2, D5
	MOVE.w	D5, vdpData1
loc_00014CDA:
	MOVE.w	D1, D5
	ADDI.w	#$0100, D5
	BSR.w	Video_SetVRAMAddressWrite
	MOVE.w	D0, D5
	ADDQ.w	#1, D5
	MOVE.w	D5, vdpData1
	ADDQ.w	#2, D5
	MOVE.w	D5, vdpData1
	RTS
loc_00014CF8:
	CLR.w	D2
	MOVE.b	$1(A2), D2
	LSL.b	#2, D2
	LEA	loc_00014FBA, A4
	MOVEA.l	(A4,D2.w), A3
	BSR.w	loc_00014E4A
	MOVE.w	$2(A2), D6
	ANDI.w	#$8000, D6
	CLR.w	D2
	MOVE.b	$3(A2), D2
	MULU.w	#$0030, D2
	LEA	loc_00014D5A, A4
	ADDA.w	D2, A4
	MOVE.w	#1, D2
	BTST.b	#1, rCurGameMode
	BEQ.w	loc_00014D3C
	MOVE.w	#3, D2
loc_00014D3C:
	BSR.w	Video_SetVRAMAddressWrite
	ADD.w	D1, D5
	MOVE.w	#5, D0
loc_00014D46:
	MOVE.w	(A4)+, D3
	OR.w	D6, D3
	MOVE.w	D3, vdpData1
	DBF	D0, loc_00014D46
	DBF	D2, loc_00014D3C
	RTS
loc_00014D5A:
	dc.w 	$0000, $0000, $0464, $0466, $0000, $0000
	dc.w 	$0000, $0000, $0465, $0467, $0000, $0000
	dc.w 	$0000, $0000, $0000, $0000, $0000, $0000
	dc.w 	$0000, $0000, $0000, $0000, $0000, $0000
	dc.w 	$0000, $0000, $0468, $046A, $0000, $0000
	dc.w 	$0000, $0000, $0469, $046B, $0000, $0000
	dc.w 	$0000, $0000, $0000, $0000, $0000, $0000
	dc.w 	$0000, $0000, $0000, $0000, $0000, $0000
	dc.w 	$0000, $0000, $046C, $046E, $0000, $0000
	dc.w 	$0000, $0000, $046D, $046F, $0000, $0000
	dc.w 	$04E0, $0574, $056C, $056C, $056C, $056C
	dc.w 	$04E1, $0575, $056D, $056D, $056D, $056D
	dc.w 	$0000, $0000, $0470, $0472, $0000, $0000
	dc.w 	$0000, $0000, $0471, $0473, $0000, $0000
	dc.w 	$0000, $0000, $0000, $0000, $0000, $0000
	dc.w 	$0000, $0000, $0000, $0000, $0000, $0000
	dc.w 	$0000, $0000, $0474, $0476, $0000, $0000
	dc.w 	$0000, $0000, $0475, $0477, $0000, $0000
	dc.w 	$04E0, $057E, $056C, $056C, $056C, $056C
	dc.w 	$04E1, $057F, $056D, $056D, $056D, $056D
loc_00014E4A:
	BTST.b	#1, rCurGameMode
	BEQ.w	loc_00014E6C
	CLR.w	D5
	MOVE.b	$3(A2), D5
	LSR.b	#1, D5
	LSL.w	#2, D5
	ADDQ.b	#3, D5
	MULU.w	D1, D5
	ADDQ.w	#2, D5
	ADD.w	$0(A3), D5
	RTS
loc_00014E6C:
	CLR.w	D5
	MOVE.b	$3(A2), D5
	MULU.w	#3, D5
	ADDQ.b	#2, D5
	MULU.w	D1, D5
	ADDQ.w	#2, D5
	ADD.w	$0(A3), D5
	RTS
loc_00014E82:
	CLR.w	D2
	MOVE.b	rCurGameMode, D2
	ANDI.b	#2, D2
	OR.b	$1(A2), D2
	LSL.b	#2, D2
	LEA	loc_00014FBA, A4
	MOVEA.l	(A4,D2.w), A3
	TST.b	$3(A2)
	BMI.w	loc_00014F7C
	CLR.w	D5
	MOVE.b	$3(A2), D5
	MULU.w	D1, D5
	ADD.w	$0(A3), D5
	MOVE.w	$2(A3), D3
	MOVE.w	$4(A3), D4
	CLR.w	D2
	MOVE.b	$3(A2), D2
	LSL.b	#1, D2
	SUB.w	D2, D4
	MOVE.w	$6(A3), D6
	CLR.w	D2
	MOVE.b	$3(A2), D2
	MULU.w	D3, D2
	LSL.w	#1, D2
	MOVEA.l	$8(A3), A4
	ADDA.w	D2, A4
	BSR.w	Video_SetVRAMAddressWrite
	ADD.w	D1, D5
	MOVE.w	D3, D0
	ADDQ.w	#1, D0
loc_00014EE2:
	MOVE.w	D6, vdpData1
	DBF	D0, loc_00014EE2
	BSR.w	Video_SetVRAMAddressWrite
	ADD.w	D1, D5
	MOVE.w	#$C4D8, vdpData1
	MOVE.w	D3, D0
	SUBQ.w	#1, D0
loc_00014EFE:
	MOVE.w	#$C4D9, vdpData1
	DBF	D0, loc_00014EFE
	MOVE.w	#$C4DA, vdpData1
	MOVE.w	D4, D0
	SUBQ.w	#1, D0
	BMI.w	loc_00014F42
loc_00014F1A:
	BSR.w	Video_SetVRAMAddressWrite
	MOVE.w	#$C4DB, vdpData1
	MOVE.w	D3, D2
	SUBQ.w	#1, D2
loc_00014F2A:
	MOVE.w	(A4)+, vdpData1
	DBF	D2, loc_00014F2A
	MOVE.w	#$C4DC, vdpData1
	ADD.w	D1, D5
	DBF	D0, loc_00014F1A
loc_00014F42:
	BSR.w	Video_SetVRAMAddressWrite
	MOVE.w	#$C4DD, vdpData1
	MOVE.w	D3, D0
	SUBQ.w	#1, D0
loc_00014F52:
	MOVE.w	#$C4DE, vdpData1
	DBF	D0, loc_00014F52
	MOVE.w	#$C4DF, vdpData1
	ADD.w	D1, D5
	BSR.w	Video_SetVRAMAddressWrite
	MOVE.w	D3, D0
	ADDQ.w	#1, D0
loc_00014F70:
	MOVE.w	D6, vdpData1
	DBF	D0, loc_00014F70
	RTS
loc_00014F7C:
	MOVE.w	$4(A3), D5
	LSR.w	#1, D5
	ADDQ.w	#1, D5
	MULU.w	D1, D5
	ADD.w	$0(A3), D5
	MOVE.w	$6(A3), D6
	MOVE.w	$2(A3), D3
	BSR.w	Video_SetVRAMAddressWrite
	ADD.w	D1, D5
	MOVE.w	D3, D0
	ADDQ.w	#1, D0
loc_00014F9C:
	MOVE.w	D6, vdpData1
	DBF	D0, loc_00014F9C
	BSR.w	Video_SetVRAMAddressWrite
	MOVE.w	D3, D0
	ADDQ.w	#1, D0
loc_00014FAE:
	MOVE.w	D6, vdpData1
	DBF	D0, loc_00014FAE
	RTS
loc_00014FBA:
	dc.l    loc_00014FCA
	dc.l    loc_00014FD6
	dc.l    loc_00014FE2
	dc.l    loc_00014FEE
loc_00014FCA:
	dc.b	$C2, $86, $00, $06, $00, $0E, $80, $00
	dc.l    loc_00014FFA
loc_00014FD6:
	dc.b    $C2, $BA, $00, $06, $00, $0E, $80, $00
	dc.l    loc_00014FFA
loc_00014FE2:
	dc.b    $C2, $86, $00, $06, $00, $0E, $80, $00
	dc.l    loc_000150A2
loc_00014FEE:
	dc.b    $C2, $BA, $00, $06, $00, $0E, $80, $00
	dc.l    loc_000150A2
loc_00014FFA:
	dc.b	$00, $00, $00, $00, $04, $64, $04, $66, $00, $00, $00, $00, $00, $00, $00, $00, $04, $65, $04, $67, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00 ;0x40
	dc.b	$00, $00, $00, $00, $00, $00, $00, $00, $04, $68, $04, $6A, $00, $00, $00, $00, $00, $00, $00, $00, $04, $69, $04, $6B, $00, $00, $00, $00, $00, $00, $00, $00 ;0x60
	dc.b	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $6C, $04, $6E, $00, $00, $00, $00, $00, $00, $00, $00, $04, $6D, $04, $6F, $00, $00, $00, $00 ;0x80
	dc.b	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $70, $04, $72, $00, $00, $00, $00, $00, $00, $00, $00, $04, $71, $04, $73 ;0xA0
	dc.b	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $74, $04, $76, $00, $00, $00, $00, $00, $00, $00, $00 ;0xC0
	dc.b	$04, $75, $04, $77, $00, $00, $00, $00
loc_000150A2
	dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $64, $04, $66, $00, $00, $00, $00 ;0xE0
	dc.b	$00, $00, $00, $00, $04, $65, $04, $67, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00 ;0x100
	dc.b	$00, $00, $00, $00, $00, $00, $00, $00, $04, $6C, $04, $6E, $00, $00, $00, $00, $00, $00, $00, $00, $04, $6D, $04, $6F, $00, $00, $00, $00, $04, $E0, $05, $74 ;0x120
	dc.b	$05, $6C, $05, $6C, $05, $6C, $05, $6C, $04, $E1, $05, $75, $05, $6D, $05, $6D, $05, $6D, $05, $6D, $00, $00, $00, $00, $04, $74, $04, $76, $00, $00, $00, $00 ;0x140
	dc.b	$00, $00, $00, $00, $04, $75, $04, $77, $00, $00, $00, $00, $04, $E0, $05, $7E, $05, $6C, $05, $6C, $05, $6C, $05, $6C, $04, $E1, $05, $7F, $05, $6D, $05, $6D ;0x160
	dc.b	$05, $6D, $05, $6D, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00 ;0x180
loc_0001514A:
	CLR.w	D2
	MOVE.b	$1(A2), D2
	LSL.w	#2, D2
	LEA	sprMappings_scoreText, A3
	MOVEA.l	(A3,D2.w), A4
	MOVE.b	$2(A2), D4
	BEQ.w	loc_0001517A
	BMI.w	loc_0001517A
	MOVE.b	$00FF05C7, D4
	ANDI.b	#$10, D4
	BEQ.w	loc_0001517A
	MOVE.b	#$FF, D4
loc_0001517A:
	NOT.b	D4
	MOVE.w	(A4)+, D0
	CLR.l	D3
loc_00015180:
	ANDI.b	#1, D3
	ADDA.l	D3, A4
	CLR.b	D3
	MOVE.w	(A4)+, D5
	BNE.w	loc_00015192
	BSR.w	loc_000151C8
loc_00015192:
	MOVE.w	(A4)+, D2
loc_00015194:
	MOVE.b	(A4)+, D2
	ADDQ.b	#1, D3
	CMPI.b	#$FF, D2
	BEQ.w	loc_000151C2
	BSR.w	loc_000151EC
	BSR.w	Video_SetVRAMAddressWrite
	ADD.w	D1, D5
	MOVE.w	D2, vdpData1
	ADDQ.b	#1, D2
	BSR.w	Video_SetVRAMAddressWrite
	SUB.w	D1, D5
	ADDQ.w	#2, D5
	MOVE.w	D2, vdpData1
	BRA.b	loc_00015194
loc_000151C2:
	DBF	D0, loc_00015180
	RTS
loc_000151C8:
	MOVEM.l	D1/D0, -(A7)
	MOVE.w	#$C104, D5
	MOVE.b	$3(A2), D0
	MOVE.b	rCurMainPlayer, D1
	EOR.b	D1, D0
	BEQ.w	loc_000151E4
	MOVE.w	#$C134, D5
loc_000151E4:
	ADD.w	(A4)+, D5
	MOVEM.l	(A7)+, D0/D1
	RTS
loc_000151EC:
	AND.b	D4, D2
	CMPI.b	#$FE, D2
	BEQ.w	loc_000151F8
	RTS
loc_000151F8:
	MOVE.b	$3(A2), D2
	ADDI.b	#$37, D2
	LSL.b	#1, D2
	RTS
loc_00015204:
	MOVE.w	$00FF18A8, D5
	MOVE.w	#$8500, D2
	BRA.w	loc_00015228
loc_00015212:
	MOVE.w	#$CC22, D5
	TST.b	rCurMainPlayer
	BEQ.w	loc_00015224
	MOVE.w	#$CB1E, D5
loc_00015224:
	MOVE.w	#$A500, D2
loc_00015228:
	MOVEM.l	D2, -(A7)
	LEA	$00FF0000, A3
	CLR.l	D3
	MOVE.w	$2(A2), D3
	MOVE.l	$A(A3,D3.l), D2
	BSR.w	loc_0001575C
	MOVEM.l	(A7)+, D2
loc_00015244:
	LEA	$00FF18A0, A3
	CLR.w	D3
	BSR.w	Video_SetVRAMAddressWrite
loc_00015250:
	BSR.w	loc_00015280
	MOVE.w	D2, vdpData1
	ADDQ.w	#1, D3
	CMPI.w	#8, D3
	BCS.b	loc_00015250
	CLR.w	D3
	ADD.w	D1, D5
	BSR.w	Video_SetVRAMAddressWrite
loc_0001526A:
	BSR.w	loc_00015280
	ADDQ.b	#1, D2
	MOVE.w	D2, vdpData1
	ADDQ.w	#1, D3
	CMPI.w	#8, D3
	BCS.b	loc_0001526A
	RTS
loc_00015280:
	MOVE.b	(A3,D3.w), D2
	BMI.w	loc_0001528E
	ADDQ.b	#1, D2
	LSL.b	#1, D2
	RTS
loc_0001528E:
	CLR.w	D4
	MOVE.b	D2, D4
	ANDI.b	#$7F, D4
	MOVE.b	loc_0001529C(PC,D4.w), D2
	RTS
loc_0001529C:
	dc.b	$00
	dc.b	$4A
loc_0001529E:
	MOVE.w	$00FF18A8, D5
	MOVE.w	#$8500, D2
	BRA.w	loc_000152C2
loc_000152AC:
	MOVE.w	#$A500, D2
	MOVE.w	#$CC22, D5
	TST.b	rCurMainPlayer
	BEQ.w	loc_000152C2
	MOVE.w	#$CB1E, D5
loc_000152C2:
	MOVEM.l	D2, -(A7)
	LEA	$00FF18A0, A3
	MOVE.w	#7, D2
loc_000152D0:
	MOVE.b	#$80, (A3)+
	DBF	D2, loc_000152D0
	LEA	$00FF18A8, A3
	LEA	$00FF0000, A4
	CLR.l	D3
	MOVE.w	$2(A2), D3
	MOVE.w	$1E(A4,D3.l), D2
	BEQ.w	loc_00015302
	MOVEM.l	D3, -(A7)
	BSR.w	loc_000157A2
	MOVEM.l	(A7)+, D3
	MOVE.b	#$81, -(A3)
loc_00015302:
	CLR.l	D2
	MOVE.w	$12(A4,D3.l), D2
	DIVU.w	#$2710, D2
	SWAP	D2
	BSR.w	loc_000157A2
	MOVEM.l	(A7)+, D2
	BRA.w	loc_00015244
	
; ----- $84 Start -----
BgLoad_BattleCrumbleFloor:
	BSR.w	@GetCrumbleMapNumber
	LSL.b	#1, D2
	OR.b	$1(A2), D2
	MOVE.b	rCurMainPlayer, D0
	EOR.b	D0, D2
	LSL.w	#2, D2
	LEA	@CrumbleMappingsTable, A4
	MOVEA.l	(A4,D2.w), A3
	CLR.w	D2
	MOVE.b	$3(A2), D2
	MOVE.w	$4(A3), D0
	MULU.w	D0, D2
	MOVEA.l	$0(A3), A4
	ADDA.w	D2, A4
	MOVE.w	$8(A3), D6
	MOVE.w	$A(A3), D3
	MOVE.w	#1, D4
	MOVE.w	$C(A3), D5
	BSR.w	@loc_000153D8
	TST.b	$3(A2)
	BEQ.w	@loc_00015372
	CMPI.b	#5, $3(A2)
	BEQ.w	@loc_0001539C
	RTS
@loc_00015372:
	MOVE.w	$6(A3), D6
	MOVE.w	#$000B, D3
	MOVE.w	#1, D4
	MOVE.w	$10(A3), D5
	BSR.w	loadBGClearYLoop
	MOVE.w	$6(A3), D6
	MOVE.w	#$000B, D3
	MOVE.w	#$0025, D4
	MOVE.w	$E(A3), D5
	BSR.w	loadBGClearYLoop
	RTS
@loc_0001539C:
	MOVE.w	$4(A3), D3
	MULU.w	#6, D3
	MOVEA.l	$0(A3), A4
	ADDA.w	D3, A4
	MOVE.w	$6(A3), D6
	MOVE.w	#$000B, D3
	MOVE.w	#1, D4
	MOVE.w	$10(A3), D5
	BSR.w	@loc_000153D8
	MOVE.w	$6(A3), D6
	MOVE.w	$A(A3), D3
	MOVE.w	#1, D4
	MOVE.w	$C(A3), D5
	MOVEA.l	$0(A3), A4
	BSR.w	@loc_000153D8
	RTS
@loc_000153D8:
	CMPI.w	#$0040, $4(A3)
	BCS.w	loadBGByteIndexYLoop
	BRA.w	loadBGWordIndexYLoop

@GetCrumbleMapNumber:
	CLR.w	D2
	MOVE.b	rCurGameMode, D2
	ANDI.b	#3, D2
	BEQ.w	@InStoryMode
	CMPI.b	#1, D2
	BEQ.w	@InVSMode
	MOVE.b	#3, D2
@InVSMode:
	RTS
@InStoryMode:
	CLR.w	D0
	MOVE.b	rOnePlayer_CurStage, D0
	MOVE.b	@StageMappingTable(PC,D0.w), D2
	RTS
@StageMappingTable: ; Goes in order from Lesson 1-3, then to Stage 1-13.
	dc.b 3
	dc.b 3
	dc.b 3
	dc.b 0
	dc.b 0
	dc.b 0
	dc.b 0
	dc.b 0
	dc.b 0
	dc.b 0
	dc.b 0
	dc.b 2
	dc.b 2
	dc.b 2
	dc.b 2
	dc.b 2
@CrumbleMappingsTable:
	dc.l	@Grass1PSide
	dc.l	@Grass2PSide
	dc.l	@Cabin1PSide
	dc.l	@Cabin2PSide
	dc.l	@Stone1PSide
	dc.l	@Stone2PSide
	dc.l	@Puzzle1PSide
	dc.l	@Puzzle2PSide
	
; Format for below data:
; 	dc.l	Mapping Data Pointer
;	dc.w	Tiles per frame
;	dc.w	Palette (Plane Attribute) - High Priority
;	dc.w	Palette (Plane Attribute) - Low Priority
;	dc.w	Width of Frame
;	dc.w	Position - Frame (Plane B)
;	dc.w	Position - Tiles to Clear (Plane A)
;	dc.w	Position - Tiles to Redraw (Plane A)
@Grass1PSide:
	dc.l	bgmap_grassCrumbleFloor
	dc.w	32
	dc.w	$C000
	dc.w	$4000
	dc.w	15
	dc.w	$ED00
	dc.w	$CD04
	dc.w	$C004 
@Grass2PSide:
	dc.l	bgmap_grassCrumbleFloor
	dc.w	32
	dc.w	$C000
	dc.w	$4000
	dc.w	15
	dc.w	$ED30
	dc.w	$CD34
	dc.w	$C034 
@Cabin1PSide:
	dc.l    bgmap_cabinCrumbleFloor
	dc.w 	32
	dc.w	$E000
	dc.w	$6000
	dc.w	15
	dc.w	$ED00
	dc.w	$CD04
	dc.w	$C004
@Cabin2PSide:
	dc.l	bgmap_cabinCrumbleFloor
	dc.w 	32
	dc.w	$E000
	dc.w	$6000
	dc.w	15
	dc.w	$ED30
	dc.w	$CD34
	dc.w	$C034
@Stone1PSide:
	dc.l	bgmap_stoneCrumbleFloor
	dc.w 	24
	dc.w	$C000
	dc.w	$4000
	dc.w	11
	dc.w	$ED04
	dc.w	$CD04
	dc.w	$C004
@Stone2PSide:
	dc.l	bgmap_stoneCrumbleFloor
	dc.w 	24
	dc.w	$C000
	dc.w	$4000
	dc.w	11
	dc.w	$ED34
	dc.w	$CD34
	dc.w	$C034
@Puzzle1PSide:
	dc.l	bgmap_puzzleCrumbleFloor1P
	dc.w 	64
	dc.w	$C000
	dc.w	$4000
	dc.w	15
	dc.w	$ED00
	dc.w	$CD04
	dc.w	$C004
@Puzzle2PSide:
	dc.l	bgmap_puzzleCrumbleFloor2P
	dc.w 	64
	dc.w	$C000
	dc.w	$4000
	dc.w	15
	dc.w	$ED30
	dc.w	$CD34
	dc.w	$C034
; ----- $84 End -----

loc_000154D2:
	CLR.w	D2
	MOVE.b	rOnePlayer_CurCutscene, D2
	LSL.b	#2, D2
	LEA	loc_00015E46, A4
	MOVEA.l	(A4,D2.w), A3
	MOVE.b	$1(A2), D2
	LSL.b	#2, D2
	MOVEA.l	(A3,D2.w), A4
	MOVE.w	(A4)+, D3
	MOVE.w	(A4)+, D4
	MOVE.w	(A4)+, D5
	MOVE.w	#$E400, D6
	BSR.w	loadBGByteIndexYLoop
	CMPI.b	#cutID_Panotty, rOnePlayer_CurCutscene
	BNE.w	loc_0001551E
	CMPI.b	#$0E, $1(A2)
	BNE.w	loc_0001551E
	MOVE.b	#sfxID_7D, D0
	JSR	SndDrv_QueueSoundEffect
loc_0001551E:
	RTS
loc_00015520:
	CLR.w	D2
	MOVE.b	rOnePlayer_CurCutscene, D2
	LSL.b	#2, D2
	LEA	loc_00015E46, A4
	MOVEA.l	(A4,D2.w), A3
	MOVE.b	$1(A2), D2
	LSL.b	#2, D2
	MOVEA.l	(A3,D2.w), A4
	MOVE.w	(A4)+, D3
	MOVE.w	(A4)+, D4
	MOVE.w	(A4)+, D5
	ADDI.w	#$0FEE, D5
	MOVE.w	#$8000, D6
	BRA.w	loadBGByteIndexYLoop
loc_00015550:
	CLR.w	D2
	MOVE.b	rOnePlayer_CurCutscene, D2
	LSL.b	#2, D2
	LEA	loc_00015E46, A4
	MOVEA.l	(A4,D2.w), A3
	MOVE.b	$1(A2), D2
	LSL.b	#2, D2
	MOVEA.l	(A3,D2.w), A4
	MOVE.w	(A4)+, D3
	MOVE.w	(A4)+, D4
	MOVE.w	(A4)+, D5
	MOVE.w	#$8100, D6
	BRA.w	loadBGByteIndexYLoop

; ----- $95 Start -----
loc_0001557C:
	MOVE.w	#2, D0
	MOVE.w	#$EA08, D5
	SWAP	D5
	MOVE.w	#$CA58, D5
	MOVE.w	#$0400, D6
loc_0001558E:
	ANDI.w	#$0FFF, D6
	ORI.w	#$4000, D6
	CMP.b	$1(A2), D0
	BNE.w	loc_000155A6
	ANDI.w	#$0FFF, D6
	ORI.w	#$2000, D6
loc_000155A6:
	MOVEM.l	D0, -(A7)
	BSR.w	loc_000155B8
	MOVEM.l	(A7)+, D0
	DBF	D0, loc_0001558E
	RTS
loc_000155B8:
	MOVE.w	#9, D3
	MOVE.w	#6, D4
loc_000155C0:
	BSR.w	Video_SetVRAMAddressWrite
	ADD.w	D1, D5
	MOVE.w	D3, D0
loc_000155C8:
	MOVE.w	D6, vdpData1
	ADDQ.b	#1, D6
	DBF	D0, loc_000155C8
	DBF	D4, loc_000155C0
	SUBI.w	#$06EA, D5
	RTS
; ----- $95 End -----

loc_000155DE:
	CLR.w	D3
	MOVE.b	$1(A2), D3
	SUBQ.w	#1, D3
	MOVE.w	$2(A2), D5
	BSR.w	Video_SetVRAMAddressWrite
	ADD.w	D1, D5
	MOVE.w	#$8550, vdpData1
	MOVE.w	D3, D0
loc_000155FA:
	MOVE.w	#$8551, vdpData1
	DBF	D0, loc_000155FA
	MOVE.w	#$8552, vdpData1
	MOVE.w	#1, D4
loc_00015612:
	BSR.w	Video_SetVRAMAddressWrite
	ADD.w	D1, D5
	MOVE.w	#$8553, vdpData1
	MOVE.w	D3, D0
loc_00015622:
	MOVE.w	#$8554, vdpData1
	DBF	D0, loc_00015622
	MOVE.w	#$8555, vdpData1
	DBF	D4, loc_00015612
	BSR.w	Video_SetVRAMAddressWrite
	ADD.w	D1, D5
	MOVE.w	#$8556, vdpData1
	MOVE.w	D3, D0
loc_0001564A:
	MOVE.w	#$8557, vdpData1
	DBF	D0, loc_0001564A
	MOVE.w	#$8558, vdpData1
	RTS

loadBGMappings:
	MOVEA.l	(A2), A3
	MOVE.w	(A3)+, D2
	CLR.w	D3
	MOVE.b	(A3)+, D3
	SUBQ.b	#1, D3
	CLR.w	D4
	MOVE.b	(A3)+, D4
	SUBQ.b	#1, D4
	MOVE.w	(A3)+, D5
	MOVEA.l	loadBGFunctionList(PC,D2.w), A4
	JMP	(A4)
loadBGFunctionList:
	dc.l	loadBGClear
	dc.l	loadBGByteIndex
	dc.l	loadBGWordIndex
	dc.l	loadBGUnused 
	dc.l	loadBGByteIndexPal 
	
loadBGClear:
	MOVE.w	(A3)+, D6
loadBGClearYLoop:
	BSR.w	Video_SetVRAMAddressWrite
	CLR.w	D0
	MOVE.w	D3, D0
@xloop:
	MOVE.w	D6, vdpData1
	DBF	D0, @xloop
	ADD.w	D1, D5
	DBF	D4, loadBGClearYLoop
	RTS
	
loadBGByteIndex:
	MOVEA.l	(A3)+, A4
	MOVE.w	(A3)+, D6
loadBGByteIndexYLoop:
	BSR.w	Video_SetVRAMAddressWrite
	CLR.w	D0
	MOVE.w	D3, D0
@xloop:
	MOVE.b	(A4)+, D6
	MOVE.w	D6, vdpData1
	DBF	D0, @xloop
	ADD.w	D1, D5
	DBF	D4, loadBGByteIndexYLoop
	RTS
	
loadBGWordIndex:
	MOVEA.l	(A3)+, A4
loadBGWordIndexYLoop:
	BSR.w	Video_SetVRAMAddressWrite
	CLR.w	D0
	MOVE.w	D3, D0
@xloop:
	MOVE.w	(A4)+, vdpData1
	DBF	D0, @xloop
	ADD.w	D1, D5
	DBF	D4, loadBGWordIndexYLoop
	RTS
	
loadBGUnused:
	MOVEA.l	(A3)+, A4
	MOVEA.l	(A3)+, A5
	MOVE.w	(A3)+, D6
	MOVE.w	(A3)+, D2
@yloop:
	BSR.w	Video_SetVRAMAddressWrite
	CLR.w	D0
	MOVE.w	D3, D0
@xloop:
	BSR.w	@writeByte
	DBF	D0, @xloop
	ADD.w	D1, D5
	DBF	D4, @yloop
	RTS
@writeByte:
	MOVE.b	(A4)+, D6
	MOVE.b	(A5)+, D2
	BEQ.w	@writeByteD6
	MOVE.w	D2, vdpData1
	RTS
@writeByteD6:
	MOVE.w	D6, vdpData1
	RTS
	
loadBGByteIndexPal:
	movea.l (A3)+, A4
	movea.l (A3)+, A5
	move.w (A3)+, D6
loadBGBytePal2:
	CLR.b	D2
@yloop:
	BSR.w	Video_SetVRAMAddressWrite
	SWAP	D5
	CLR.w	D0
	MOVE.w	D3, D0
@xloop:
	ANDI.b	#3, D2
	BNE.w	@skipload
	MOVE.b	(A5)+, D7
	ROR.w	#1, D7
@skipload:
	ROR.w	#2, D7
	MOVE.w	D7, D5
	ANDI.w	#$6000, D5
	OR.w	D6, D5
	MOVE.b	(A4)+, D5
	MOVE.w	D5, vdpData1
	ADDQ.b	#1, D2
	DBF	D0, @xloop
	SWAP	D5
	ADD.w	D1, D5
	DBF	D4, @yloop
	RTS

loc_0001575C:
	DIVU.w	#$2710, D2
	LEA	$00FF18A8, A3
	MOVE.w	#2, D3
	MOVE.l	D2, D4
	SWAP	D4
loc_0001576E:
	ANDI.l	#$0000FFFF, D4
	DIVU.w	#$000A, D4
	SWAP	D4
	MOVE.b	D4, -(A3)
	SWAP	D4
	DBF	D3, loc_0001576E
	MOVE.b	D4, -(A3)
	MOVE.w	#2, D3
	MOVE.w	D2, D4
loc_0001578A:
	ANDI.l	#$0000FFFF, D4
	DIVU.w	#$000A, D4
	SWAP	D4
	MOVE.b	D4, -(A3)
	SWAP	D4
	DBF	D3, loc_0001578A
	MOVE.b	D4, -(A3)
	RTS
loc_000157A2:
	ANDI.l	#$0000FFFF, D2
	BEQ.w	loc_000157B8
	DIVU.w	#$000A, D2
	SWAP	D2
	MOVE.b	D2, -(A3)
	SWAP	D2
	BRA.b	loc_000157A2
loc_000157B8:
	RTS

Video_SetVRAMAddressWrite:
	MOVE.w	D5, D7
	ANDI.w	#$3FFF, D7
	ORI.w	#$4000, D7
	MOVE.w	D7, vdpControl1 ; 600E
	MOVE.w	D5, D7
	ROL.w	#2, D7
	ANDI.w	#3, D7
	MOVE.w	D7, vdpControl1
	RTS

Video_SetVRAMAddressRead:
	MOVE.w	D5, D7
	ANDI.w	#$3FFF, D7
	MOVE.w	D7, vdpControl1
	MOVE.w	D5, D7
	ROL.w	#2, D7
	ANDI.w	#3, D7
	MOVE.w	D7, vdpControl1
	RTS

; Frame 1 seems to be included twice for each of these.  Need to investigate why.
bgmap_grassCrumbleFloor:
	incbin "art/bg_mappings/boards/floor_crumble/grass/frame_1.bgbyte"
	incbin "art/bg_mappings/boards/floor_crumble/grass/frame_2.bgbyte"
	incbin "art/bg_mappings/boards/floor_crumble/grass/frame_3.bgbyte"
	incbin "art/bg_mappings/boards/floor_crumble/grass/frame_4.bgbyte"
	incbin "art/bg_mappings/boards/floor_crumble/grass/frame_5.bgbyte"
	incbin "art/bg_mappings/boards/floor_crumble/grass/frame_1.bgbyte"
	incbin "art/bg_mappings/boards/floor_crumble/grass/board_top.bgbyte"
bgmap_stoneCrumbleFloor:
	incbin "art/bg_mappings/boards/floor_crumble/ruins/frame_1.bgbyte"
	incbin "art/bg_mappings/boards/floor_crumble/ruins/frame_2.bgbyte"
	incbin "art/bg_mappings/boards/floor_crumble/ruins/frame_3.bgbyte"
	incbin "art/bg_mappings/boards/floor_crumble/ruins/frame_4.bgbyte"
	incbin "art/bg_mappings/boards/floor_crumble/ruins/frame_5.bgbyte"
	incbin "art/bg_mappings/boards/floor_crumble/ruins/frame_1.bgbyte"
	incbin "art/bg_mappings/boards/floor_crumble/ruins/board_top.bgbyte"
bgmap_cabinCrumbleFloor:
	incbin "art/bg_mappings/boards/floor_crumble/cabin/frame_1.bgbyte"
	incbin "art/bg_mappings/boards/floor_crumble/cabin/frame_2.bgbyte"
	incbin "art/bg_mappings/boards/floor_crumble/cabin/frame_3.bgbyte"
	incbin "art/bg_mappings/boards/floor_crumble/cabin/frame_4.bgbyte"
	incbin "art/bg_mappings/boards/floor_crumble/cabin/frame_5.bgbyte"
	incbin "art/bg_mappings/boards/floor_crumble/cabin/frame_1.bgbyte"
	incbin "art/bg_mappings/boards/floor_crumble/cabin/board_top.bgbyte"
bgmap_puzzleCrumbleFloor1P:
	incbin "art/bg_mappings/boards/floor_crumble/puzzle/1p_frame_1.bgbyte"
	incbin "art/bg_mappings/boards/floor_crumble/puzzle/1p_frame_2.bgbyte"
	incbin "art/bg_mappings/boards/floor_crumble/puzzle/1p_frame_3.bgbyte"
	incbin "art/bg_mappings/boards/floor_crumble/puzzle/1p_frame_4.bgbyte"
	incbin "art/bg_mappings/boards/floor_crumble/puzzle/1p_frame_5.bgbyte"
	incbin "art/bg_mappings/boards/floor_crumble/puzzle/1p_frame_1.bgbyte"
	incbin "art/bg_mappings/boards/floor_crumble/puzzle/1p_board_top.bgbyte"
bgmap_puzzleCrumbleFloor2P:
	incbin "art/bg_mappings/boards/floor_crumble/puzzle/2p_frame_1.bgbyte"
	incbin "art/bg_mappings/boards/floor_crumble/puzzle/2p_frame_2.bgbyte"
	incbin "art/bg_mappings/boards/floor_crumble/puzzle/2p_frame_3.bgbyte"
	incbin "art/bg_mappings/boards/floor_crumble/puzzle/2p_frame_4.bgbyte"
	incbin "art/bg_mappings/boards/floor_crumble/puzzle/2p_frame_5.bgbyte"
	incbin "art/bg_mappings/boards/floor_crumble/puzzle/2p_frame_1.bgbyte"
	incbin "art/bg_mappings/boards/floor_crumble/puzzle/2p_board_top.bgbyte"

portrait_default_base_bgmap:
	dc.w	$0009
	dc.w	$0006
	dc.w	$C61E
	incbin "art/bg_mappings/portrait/normal_base.bgbyte"
portrait_defeated_base_bgmap:
	dc.w	$0009
	dc.w	$0006
	dc.w	$C61E
	incbin "art/bg_mappings/portrait/defeated_base.bgbyte"
loc_00015E46:
	dc.l	tbl_portrait_skeleton_t_bgmap
	dc.l	tbl_portrait_suketoudara_bgmap
	dc.l	tbl_portrait_zombie_bgmap
	dc.l	tbl_portrait_draco_bgmap
	dc.l	tbl_portrait_nasu_bgmap
	dc.l	tbl_portrait_witch_bgmap
	dc.l	tbl_portrait_sasoriman_bgmap
	dc.l	tbl_portrait_harpy_bgmap
	dc.l	tbl_portrait_zoh_bgmap
	dc.l	tbl_portrait_schezo_bgmap
	dc.l	tbl_portrait_minotauros_bgmap
	dc.l	tbl_portrait_rulue_bgmap
	dc.l	tbl_portrait_satan_bgmap
	dc.l    tbl_portrait_mummy_bgmap
    dc.l    tbl_portrait_sukiyapotes_bgmap
    dc.l    tbl_portrait_panotty_bgmap
    dc.l    tbl_portrait_skeleton_t_bgmap
tbl_portrait_mummy_bgmap:
    dc.l    portrait_default_base_bgmap
    dc.l    portrait_defeated_base_bgmap
    dc.l    @portrait_mummy_fragment_0
    dc.l    @portrait_mummy_fragment_1
    dc.l    @portrait_mummy_fragment_2
    dc.l    @portrait_mummy_fragment_3
    dc.l    @portrait_mummy_fragment_4
    dc.l    @portrait_mummy_fragment_5
    dc.l    @portrait_mummy_fragment_6
    dc.l    @portrait_mummy_fragment_7
    dc.l    @portrait_mummy_fragment_8
    dc.l    @portrait_mummy_fragment_9
@portrait_mummy_fragment_0:
	dc.w	$0003
	dc.w	$0001
	dc.w	$C724
	incbin	"art/bg_mappings/portrait/mummy/0.bgbyte"
@portrait_mummy_fragment_1:
	dc.w	$0003
	dc.w	$0001
	dc.w	$C724
	incbin	"art/bg_mappings/portrait/mummy/1.bgbyte"
@portrait_mummy_fragment_2:
	dc.w	$0003
	dc.w	$0001
	dc.w	$C724
	incbin	"art/bg_mappings/portrait/mummy/2.bgbyte"
@portrait_mummy_fragment_3:
	dc.w	$0003
	dc.w	$0001
	dc.w	$C724
	incbin	"art/bg_mappings/portrait/mummy/3.bgbyte"
@portrait_mummy_fragment_4:
	dc.w	$0003
	dc.w	$0001
	dc.w	$C724
	incbin	"art/bg_mappings/portrait/mummy/4.bgbyte"
@portrait_mummy_fragment_5:
	dc.w	$0003
	dc.w	$0001
	dc.w	$C724
	incbin	"art/bg_mappings/portrait/mummy/5.bgbyte"
@portrait_mummy_fragment_6:
	dc.w	$0007
	dc.w	$0002
	dc.w	$C720
	incbin	"art/bg_mappings/portrait/mummy/6.bgbyte"
@portrait_mummy_fragment_7:
	dc.w	$0007
	dc.w	$0002
	dc.w	$C720
	incbin	"art/bg_mappings/portrait/mummy/7.bgbyte"
@portrait_mummy_fragment_8:
	dc.w	$0007
	dc.w	$0002
	dc.w	$C720
	incbin	"art/bg_mappings/portrait/mummy/8.bgbyte"
@portrait_mummy_fragment_9:
	dc.w	$0009
	dc.w	$0006
	dc.w	$C61E
	incbin	"art/bg_mappings/portrait/mummy/9.bgbyte"
tbl_portrait_sukiyapotes_bgmap:
    dc.l    portrait_default_base_bgmap
    dc.l    portrait_defeated_base_bgmap
    dc.l    @portrait_sukiyapotes_fragment_0
    dc.l    @portrait_sukiyapotes_fragment_1
    dc.l    @portrait_sukiyapotes_fragment_2
    dc.l    @portrait_sukiyapotes_fragment_3
    dc.l    @portrait_sukiyapotes_fragment_4
    dc.l    @portrait_sukiyapotes_fragment_5
    dc.l    @portrait_sukiyapotes_fragment_6
    dc.l    @portrait_sukiyapotes_fragment_7
    dc.l    @portrait_sukiyapotes_fragment_8
    dc.l    @portrait_sukiyapotes_fragment_9
    dc.l    @portrait_sukiyapotes_fragment_10
    dc.l    @portrait_sukiyapotes_fragment_11
@portrait_sukiyapotes_fragment_0:
	dc.w	$0004
	dc.w	$0002
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/sukiyapotes/0.bgbyte"
@portrait_sukiyapotes_fragment_1:
	dc.w	$0004
	dc.w	$0002
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/sukiyapotes/1.bgbyte"
@portrait_sukiyapotes_fragment_2:
	dc.w	$0007
	dc.w	$0005
	dc.w	$C6A0
	incbin	"art/bg_mappings/portrait/sukiyapotes/2.bgbyte"
@portrait_sukiyapotes_fragment_3:
	dc.w	$0007
	dc.w	$0005
	dc.w	$C6A0
	incbin	"art/bg_mappings/portrait/sukiyapotes/3.bgbyte"
@portrait_sukiyapotes_fragment_4:
	dc.w	$0007
	dc.w	$0005
	dc.w	$C6A0
	incbin	"art/bg_mappings/portrait/sukiyapotes/4.bgbyte"
@portrait_sukiyapotes_fragment_11:
	dc.w	$0006
	dc.w	$0004
	dc.w	$C624
	incbin	"art/bg_mappings/portrait/sukiyapotes/11.bgbyte"
@portrait_sukiyapotes_fragment_5:
	dc.w	$0001
	dc.w	$0000
	dc.w	$C826
	incbin	"art/bg_mappings/portrait/sukiyapotes/5.bgbyte"
@portrait_sukiyapotes_fragment_6:
	dc.w	$0001
	dc.w	$0000
	dc.w	$C826
	incbin	"art/bg_mappings/portrait/sukiyapotes/6.bgbyte"
@portrait_sukiyapotes_fragment_7:
	dc.w	$0001
	dc.w	$0000
	dc.w	$C826
	incbin	"art/bg_mappings/portrait/sukiyapotes/7.bgbyte"
@portrait_sukiyapotes_fragment_8:
	dc.w	$0001
	dc.w	$0000
	dc.w	$C826
	incbin	"art/bg_mappings/portrait/sukiyapotes/8.bgbyte"
@portrait_sukiyapotes_fragment_9:
	dc.w	$0001
	dc.w	$0000
	dc.w	$C826
	incbin	"art/bg_mappings/portrait/sukiyapotes/9.bgbyte"
@portrait_sukiyapotes_fragment_10:
	dc.w	$0001
	dc.w	$0000
	dc.w	$C826
	incbin	"art/bg_mappings/portrait/sukiyapotes/10.bgbyte"
tbl_portrait_panotty_bgmap:
    dc.l    portrait_default_base_bgmap
    dc.l    portrait_defeated_base_bgmap
    dc.l    @portrait_panotty_fragment_0
    dc.l    @portrait_panotty_fragment_1
    dc.l    @portrait_panotty_fragment_2
    dc.l    @portrait_panotty_fragment_3
    dc.l    @portrait_panotty_fragment_4
    dc.l    @portrait_panotty_fragment_5
    dc.l    @portrait_panotty_fragment_6
    dc.l    @portrait_panotty_fragment_7
    dc.l    @portrait_panotty_fragment_8
    dc.l    @portrait_panotty_fragment_9
    dc.l    @portrait_panotty_fragment_10
    dc.l    @portrait_panotty_fragment_11
    dc.l    @portrait_panotty_fragment_12
@portrait_panotty_fragment_0:
	dc.w	$0004
	dc.w	$0001
	dc.w	$C822
	incbin	"art/bg_mappings/portrait/panotty/0.bgbyte"
@portrait_panotty_fragment_1:
	dc.w	$0004
	dc.w	$0001
	dc.w	$C822
	incbin	"art/bg_mappings/portrait/panotty/1.bgbyte"
@portrait_panotty_fragment_2:
	dc.w	$0005
	dc.w	$0001
	dc.w	$C822
	incbin	"art/bg_mappings/portrait/panotty/2.bgbyte"
@portrait_panotty_fragment_3:
	dc.w	$0005
	dc.w	$0001
	dc.w	$C822
	incbin	"art/bg_mappings/portrait/panotty/3.bgbyte"
@portrait_panotty_fragment_4:
	dc.w	$0005
	dc.w	$0001
	dc.w	$C822
	incbin	"art/bg_mappings/portrait/panotty/4.bgbyte"
@portrait_panotty_fragment_5:
	dc.w	$0009
	dc.w	$0005
	dc.w	$C61E
	incbin	"art/bg_mappings/portrait/panotty/5.bgbyte"
@portrait_panotty_fragment_6:
	dc.w	$0009
	dc.w	$0005
	dc.w	$C61E
	incbin	"art/bg_mappings/portrait/panotty/6.bgbyte"
@portrait_panotty_fragment_7:
	dc.w	$0009
	dc.w	$0005
	dc.w	$C61E
	incbin	"art/bg_mappings/portrait/panotty/7.bgbyte"
@portrait_panotty_fragment_8:
	dc.w	$0009
	dc.w	$0005
	dc.w	$C61E
	incbin	"art/bg_mappings/portrait/panotty/8.bgbyte"
@portrait_panotty_fragment_9:
	dc.w	$0009
	dc.w	$0005
	dc.w	$C61E
	incbin	"art/bg_mappings/portrait/panotty/9.bgbyte"
@portrait_panotty_fragment_10:
	dc.w	$0005
	dc.w	$0002
	dc.w	$C7A0
	incbin	"art/bg_mappings/portrait/panotty/10.bgbyte"
@portrait_panotty_fragment_11:
	dc.w	$0005
	dc.w	$0002
	dc.w	$C7A0
	incbin	"art/bg_mappings/portrait/panotty/11.bgbyte"
@portrait_panotty_fragment_12:
	dc.w	$0005
	dc.w	$0002
	dc.w	$C7A0
	incbin	"art/bg_mappings/portrait/panotty/12.bgbyte"

tbl_portrait_skeleton_t_bgmap:
    dc.l    portrait_default_base_bgmap
    dc.l    portrait_defeated_base_bgmap
    dc.l    @portrait_skeleton_t_fragment_0
    dc.l    @portrait_skeleton_t_fragment_1
    dc.l    @portrait_skeleton_t_fragment_2
    dc.l    @portrait_skeleton_t_fragment_3
    dc.l    @portrait_skeleton_t_fragment_4
    dc.l    @portrait_skeleton_t_fragment_5
    dc.l    @portrait_skeleton_t_fragment_6
    dc.l    @portrait_skeleton_t_fragment_7
    dc.l    @portrait_skeleton_t_fragment_8
    dc.l    @portrait_skeleton_t_fragment_9
    dc.l    @portrait_skeleton_t_fragment_10
    dc.l    @portrait_skeleton_t_fragment_11
@portrait_skeleton_t_fragment_0:
	dc.w	$0005
	dc.w	$0001
	dc.w	$C724
	incbin	"art/bg_mappings/portrait/skeleton-t/0.bgbyte"
@portrait_skeleton_t_fragment_1:
	dc.w	$0005
	dc.w	$0001
	dc.w	$C724
	incbin	"art/bg_mappings/portrait/skeleton-t/1.bgbyte"
@portrait_skeleton_t_fragment_2:
	dc.w	$0006
	dc.w	$0003
	dc.w	$C7A4
	incbin	"art/bg_mappings/portrait/skeleton-t/2.bgbyte"
@portrait_skeleton_t_fragment_3:
	dc.w	$0006
	dc.w	$0003
	dc.w	$C7A4
	incbin	"art/bg_mappings/portrait/skeleton-t/3.bgbyte"
@portrait_skeleton_t_fragment_4:
	dc.w	$0006
	dc.w	$0003
	dc.w	$C7A4
	incbin	"art/bg_mappings/portrait/skeleton-t/4.bgbyte"
@portrait_skeleton_t_fragment_5:
	dc.w	$0002
	dc.w	$0001
	dc.w	$C61E
	incbin	"art/bg_mappings/portrait/skeleton-t/5.bgbyte"
@portrait_skeleton_t_fragment_6:
	dc.w	$0002
	dc.w	$0001
	dc.w	$C61E
	incbin	"art/bg_mappings/portrait/skeleton-t/6.bgbyte"
@portrait_skeleton_t_fragment_7:
	dc.w	$0002
	dc.w	$0001
	dc.w	$C61E
	incbin	"art/bg_mappings/portrait/skeleton-t/7.bgbyte"
@portrait_skeleton_t_fragment_8:
	dc.w	$0002
	dc.w	$0001
	dc.w	$C61E
	incbin	"art/bg_mappings/portrait/skeleton-t/8.bgbyte"
@portrait_skeleton_t_fragment_9:
	dc.w	$0002
	dc.w	$0001
	dc.w	$C61E
	incbin	"art/bg_mappings/portrait/skeleton-t/9.bgbyte"
@portrait_skeleton_t_fragment_10:
	dc.w	$0002
	dc.w	$0001
	dc.w	$C61E
	incbin	"art/bg_mappings/portrait/skeleton-t/10.bgbyte"
@portrait_skeleton_t_fragment_11:
	dc.w	$0002
	dc.w	$0001
	dc.w	$C61E
	incbin	"art/bg_mappings/portrait/skeleton-t/11.bgbyte"

tbl_portrait_suketoudara_bgmap:
    dc.l    portrait_default_base_bgmap
    dc.l    portrait_defeated_base_bgmap
    dc.l    @portrait_suketoudara_fragment_0
    dc.l    @portrait_suketoudara_fragment_1
    dc.l    @portrait_suketoudara_fragment_2
    dc.l    @portrait_suketoudara_fragment_3
    dc.l    @portrait_suketoudara_fragment_4
    dc.l    @portrait_suketoudara_fragment_5
    dc.l    @portrait_suketoudara_fragment_6
    dc.l    @portrait_suketoudara_fragment_7
    dc.l    @portrait_suketoudara_fragment_8
@portrait_suketoudara_fragment_0:
	dc.w	$0004
	dc.w	$0001
	dc.w	$C7A0
	incbin	"art/bg_mappings/portrait/suketoudara/0.bgbyte"
@portrait_suketoudara_fragment_1:
	dc.w	$0004
	dc.w	$0001
	dc.w	$C7A0
	incbin	"art/bg_mappings/portrait/suketoudara/1.bgbyte"
@portrait_suketoudara_fragment_2:
	dc.w	$0004
	dc.w	$0001
	dc.w	$C7A0
	incbin	"art/bg_mappings/portrait/suketoudara/2.bgbyte"
@portrait_suketoudara_fragment_3:
	dc.w	$0005
	dc.w	$0002
	dc.w	$C71E
	incbin	"art/bg_mappings/portrait/suketoudara/3.bgbyte"
@portrait_suketoudara_fragment_4:
	dc.w	$0005
	dc.w	$0002
	dc.w	$C71E
	incbin	"art/bg_mappings/portrait/suketoudara/4.bgbyte"
@portrait_suketoudara_fragment_5:
	dc.w	$0005
	dc.w	$0002
	dc.w	$C71E
	incbin	"art/bg_mappings/portrait/suketoudara/5.bgbyte"
@portrait_suketoudara_fragment_6:
	dc.w	$0004
	dc.w	$0001
	dc.w	$C6A0
	incbin	"art/bg_mappings/portrait/suketoudara/6.bgbyte"
@portrait_suketoudara_fragment_7:
	dc.w	$0005
	dc.w	$0003
	dc.w	$C7A0
	incbin	"art/bg_mappings/portrait/suketoudara/7.bgbyte"
@portrait_suketoudara_fragment_8:
	dc.w	$0005
	dc.w	$0003
	dc.w	$C7A0
	incbin	"art/bg_mappings/portrait/suketoudara/8.bgbyte"
tbl_portrait_zombie_bgmap:
    dc.l    portrait_default_base_bgmap
    dc.l    portrait_defeated_base_bgmap
    dc.l    @portrait_zombie_fragment_0
    dc.l    @portrait_zombie_fragment_1
    dc.l    @portrait_zombie_fragment_2
    dc.l    @portrait_zombie_fragment_3
    dc.l    @portrait_zombie_fragment_4
    dc.l    @portrait_zombie_fragment_5
@portrait_zombie_fragment_0:
	dc.w	$0003
	dc.w	$0002
	dc.w	$C7A6
	incbin	"art/bg_mappings/portrait/zombie/0.bgbyte"
@portrait_zombie_fragment_1:
	dc.w	$0003
	dc.w	$0002
	dc.w	$C7A6
	incbin	"art/bg_mappings/portrait/zombie/1.bgbyte"
@portrait_zombie_fragment_2:
	dc.w	$0003
	dc.w	$0002
	dc.w	$C7A6
	incbin	"art/bg_mappings/portrait/zombie/2.bgbyte"
@portrait_zombie_fragment_3:
	dc.w	$0006
	dc.w	$0006
	dc.w	$C624
	incbin	"art/bg_mappings/portrait/zombie/3.bgbyte"
@portrait_zombie_fragment_4:
	dc.w	$0002
	dc.w	$0002
	dc.w	$C7A6
	incbin	"art/bg_mappings/portrait/zombie/4.bgbyte"
@portrait_zombie_fragment_5:
	dc.w	$0002
	dc.w	$0002
	dc.w	$C7A6
	incbin	"art/bg_mappings/portrait/zombie/5.bgbyte"

tbl_portrait_draco_bgmap:
    dc.l    portrait_default_base_bgmap
    dc.l    portrait_defeated_base_bgmap
    dc.l    @portrait_draco_fragment_0
    dc.l    @portrait_draco_fragment_1
    dc.l    @portrait_draco_fragment_2
    dc.l    @portrait_draco_fragment_3
    dc.l    @portrait_draco_fragment_4
    dc.l    @portrait_draco_fragment_5
    dc.l    @portrait_draco_fragment_6
    dc.l    @portrait_draco_fragment_7
    dc.l    @portrait_draco_fragment_8
    dc.l    @portrait_draco_fragment_9
    dc.l    @portrait_draco_fragment_10
    dc.l    @portrait_draco_fragment_11
    dc.l    @portrait_draco_fragment_12
    dc.l    @portrait_draco_fragment_13
    dc.l    @portrait_draco_fragment_14
@portrait_draco_fragment_0:
	dc.w	$0004
	dc.w	$0002
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/draco/0.bgbyte"
@portrait_draco_fragment_1:
	dc.w	$0004
	dc.w	$0002
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/draco/1.bgbyte"
@portrait_draco_fragment_2:
	dc.w	$0004
	dc.w	$0002
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/draco/2.bgbyte"
@portrait_draco_fragment_3:
	dc.w	$0001
	dc.w	$0001
	dc.w	$C824
	incbin	"art/bg_mappings/portrait/draco/3.bgbyte"
@portrait_draco_fragment_4:
	dc.w	$0001
	dc.w	$0001
	dc.w	$C824
	incbin	"art/bg_mappings/portrait/draco/4.bgbyte"
@portrait_draco_fragment_5:
	dc.w	$0001
	dc.w	$0001
	dc.w	$C824
	incbin	"art/bg_mappings/portrait/draco/5.bgbyte"
@portrait_draco_fragment_6:
	dc.w	$0001
	dc.w	$0001
	dc.w	$C824
	incbin	"art/bg_mappings/portrait/draco/6.bgbyte"
@portrait_draco_fragment_7:
	dc.w	$0001
	dc.w	$0001
	dc.w	$C824
	incbin	"art/bg_mappings/portrait/draco/7.bgbyte"
@portrait_draco_fragment_8:
	dc.w	$0001
	dc.w	$0001
	dc.w	$C824
	incbin	"art/bg_mappings/portrait/draco/8.bgbyte"
@portrait_draco_fragment_9:
	dc.w	$0004
	dc.w	$0002
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/draco/9.bgbyte"
@portrait_draco_fragment_10:
	dc.w	$0004
	dc.w	$0002
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/draco/10.bgbyte"
@portrait_draco_fragment_11:
	dc.w	$0004
	dc.w	$0002
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/draco/11.bgbyte"
@portrait_draco_fragment_12:
	dc.w	$0001
	dc.w	$0001
	dc.w	$C824
	incbin	"art/bg_mappings/portrait/draco/12.bgbyte"
@portrait_draco_fragment_13:
	dc.w	$0001
	dc.w	$0001
	dc.w	$C824
	incbin	"art/bg_mappings/portrait/draco/13.bgbyte"
@portrait_draco_fragment_14:
	dc.w	$0001
	dc.w	$0001
	dc.w	$C824
	incbin	"art/bg_mappings/portrait/draco/14.bgbyte"
tbl_portrait_nasu_bgmap:
    dc.l    portrait_default_base_bgmap
    dc.l    portrait_defeated_base_bgmap
    dc.l    @portrait_nasu_fragment_0
    dc.l    @portrait_nasu_fragment_1
    dc.l    @portrait_nasu_fragment_2
    dc.l    @portrait_nasu_fragment_3
    dc.l    @portrait_nasu_fragment_4
    dc.l    @portrait_nasu_fragment_5
    dc.l    @portrait_nasu_fragment_6
    dc.l    @portrait_nasu_fragment_7
@portrait_nasu_fragment_0:
	dc.w	$0008
	dc.w	$0005
	dc.w	$C6A0
	incbin	"art/bg_mappings/portrait/nasu/0.bgbyte"
@portrait_nasu_fragment_1:
	dc.w	$0008
	dc.w	$0005
	dc.w	$C6A0
	incbin	"art/bg_mappings/portrait/nasu/1.bgbyte"
@portrait_nasu_fragment_2:
	dc.w	$0005
	dc.w	$0003
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/nasu/2.bgbyte"
@portrait_nasu_fragment_3:
	dc.w	$0005
	dc.w	$0003
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/nasu/3.bgbyte"
@portrait_nasu_fragment_5:
	dc.w	$0003
	dc.w	$0003
	dc.w	$C724
	incbin	"art/bg_mappings/portrait/nasu/5.bgbyte"
@portrait_nasu_fragment_6:
	dc.w	$0003
	dc.w	$0003
	dc.w	$C724
	incbin	"art/bg_mappings/portrait/nasu/6.bgbyte"
@portrait_nasu_fragment_7:
	dc.w	$0003
	dc.w	$0003
	dc.w	$C724
	incbin	"art/bg_mappings/portrait/nasu/7.bgbyte"
@portrait_nasu_fragment_4:
	dc.w	$0009
	dc.w	$0006
	dc.w	$C61E
	incbin	"art/bg_mappings/portrait/nasu/4.bgbyte"

tbl_portrait_witch_bgmap:
    dc.l    portrait_default_base_bgmap
    dc.l    portrait_defeated_base_bgmap
    dc.l    @portrait_witch_fragment_0
    dc.l    @portrait_witch_fragment_1
    dc.l    @portrait_witch_fragment_2
    dc.l    @portrait_witch_fragment_3
    dc.l    @portrait_witch_fragment_4
    dc.l    @portrait_witch_fragment_5
    dc.l    @portrait_witch_fragment_6
    dc.l    @portrait_witch_fragment_7
    dc.l    @portrait_witch_fragment_8
    dc.l    @portrait_witch_fragment_9
    dc.l    @portrait_witch_fragment_10
    dc.l    @portrait_witch_fragment_11
    dc.l    @portrait_witch_fragment_12
    dc.l    @portrait_witch_fragment_13
    dc.l    @portrait_witch_fragment_14
@portrait_witch_fragment_0:
	dc.w	$0005
	dc.w	$0002
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/witch/0.bgbyte"
@portrait_witch_fragment_1:
	dc.w	$0005
	dc.w	$0002
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/witch/1.bgbyte"
@portrait_witch_fragment_2:
	dc.w	$0005
	dc.w	$0002
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/witch/2.bgbyte"
@portrait_witch_fragment_3:
	dc.w	$0001
	dc.w	$0000
	dc.w	$C826
	incbin	"art/bg_mappings/portrait/witch/3.bgbyte"
@portrait_witch_fragment_4:
	dc.w	$0001
	dc.w	$0000
	dc.w	$C826
	incbin	"art/bg_mappings/portrait/witch/4.bgbyte"
@portrait_witch_fragment_5:
	dc.w	$0001
	dc.w	$0000
	dc.w	$C826
	incbin	"art/bg_mappings/portrait/witch/5.bgbyte"
@portrait_witch_fragment_6:
	dc.w	$0005
	dc.w	$0001
	dc.w	$C722
	incbin	"art/bg_mappings/portrait/witch/6.bgbyte"
@portrait_witch_fragment_7:
	dc.w	$0005
	dc.w	$0001
	dc.w	$C722
	incbin	"art/bg_mappings/portrait/witch/7.bgbyte"
@portrait_witch_fragment_8:
	dc.w	$0005
	dc.w	$0001
	dc.w	$C722
	incbin	"art/bg_mappings/portrait/witch/8.bgbyte"
@portrait_witch_fragment_9:
	dc.w	$0001
	dc.w	$0000
	dc.w	$C826
	incbin	"art/bg_mappings/portrait/witch/9.bgbyte"
@portrait_witch_fragment_10:
	dc.w	$0001
	dc.w	$0000
	dc.w	$C826
	incbin	"art/bg_mappings/portrait/witch/10.bgbyte"
@portrait_witch_fragment_11:
	dc.w	$0001
	dc.w	$0000
	dc.w	$C826
	incbin	"art/bg_mappings/portrait/witch/11.bgbyte"
@portrait_witch_fragment_12:
	dc.w	$0001
	dc.w	$0000
	dc.w	$C826
	incbin	"art/bg_mappings/portrait/witch/12.bgbyte"
@portrait_witch_fragment_13:
	dc.w	$0001
	dc.w	$0000
	dc.w	$C826
	incbin	"art/bg_mappings/portrait/witch/13.bgbyte"
@portrait_witch_fragment_14:
	dc.w	$0001
	dc.w	$0000
	dc.w	$C826
	incbin	"art/bg_mappings/portrait/witch/14.bgbyte"

tbl_portrait_sasoriman_bgmap:
    dc.l    portrait_default_base_bgmap
    dc.l    portrait_defeated_base_bgmap
    dc.l    @portrait_sasoriman_fragment_0
    dc.l    @portrait_sasoriman_fragment_1
    dc.l    @portrait_sasoriman_fragment_2
    dc.l    @portrait_sasoriman_fragment_3
    dc.l    @portrait_sasoriman_fragment_4
    dc.l    @portrait_sasoriman_fragment_5
@portrait_sasoriman_fragment_0:
	dc.w	$0005
	dc.w	$0002
	dc.w	$C7A0
	incbin	"art/bg_mappings/portrait/sasoriman/0.bgbyte"
@portrait_sasoriman_fragment_1:
	dc.w	$0005
	dc.w	$0002
	dc.w	$C7A0
	incbin	"art/bg_mappings/portrait/sasoriman/1.bgbyte"
@portrait_sasoriman_fragment_2:
	dc.w	$0005
	dc.w	$0002
	dc.w	$C7A0
	incbin	"art/bg_mappings/portrait/sasoriman/2.bgbyte"
@portrait_sasoriman_fragment_3:
	dc.w	$0006
	dc.w	$0003
	dc.w	$C7A0
	incbin	"art/bg_mappings/portrait/sasoriman/3.bgbyte"
@portrait_sasoriman_fragment_4:
	dc.w	$0005
	dc.w	$0002
	dc.w	$C7A0
	incbin	"art/bg_mappings/portrait/sasoriman/4.bgbyte"
@portrait_sasoriman_fragment_5:
	dc.w	$0005
	dc.w	$0002
	dc.w	$C7A0
	incbin	"art/bg_mappings/portrait/sasoriman/5.bgbyte"

tbl_portrait_harpy_bgmap:
    dc.l    portrait_default_base_bgmap
    dc.l    portrait_defeated_base_bgmap
    dc.l    @portrait_harpy_fragment_0
    dc.l    @portrait_harpy_fragment_1
    dc.l    @portrait_harpy_fragment_2
    dc.l    @portrait_harpy_fragment_3
    dc.l    @portrait_harpy_fragment_4
    dc.l    @portrait_harpy_fragment_5
    dc.l    @portrait_harpy_fragment_6
    dc.l    @portrait_harpy_fragment_7
    dc.l    @portrait_harpy_fragment_8
    dc.l    @portrait_harpy_fragment_9
    dc.l    @portrait_harpy_fragment_10
    dc.l    @portrait_harpy_fragment_11
@portrait_harpy_fragment_0:
	dc.w	$0005
	dc.w	$0001
	dc.w	$C724
	incbin	"art/bg_mappings/portrait/harpy/0.bgbyte"
@portrait_harpy_fragment_1:
	dc.w	$0005
	dc.w	$0001
	dc.w	$C724
	incbin	"art/bg_mappings/portrait/harpy/1.bgbyte"
@portrait_harpy_fragment_2:
	dc.w	$0005
	dc.w	$0001
	dc.w	$C724
	incbin	"art/bg_mappings/portrait/harpy/2.bgbyte"
@portrait_harpy_fragment_3:
	dc.w	$0002
	dc.w	$0001
	dc.w	$C826
	incbin	"art/bg_mappings/portrait/harpy/3.bgbyte"
@portrait_harpy_fragment_4:
	dc.w	$0002
	dc.w	$0001
	dc.w	$C826
	incbin	"art/bg_mappings/portrait/harpy/4.bgbyte"
@portrait_harpy_fragment_5:
	dc.w	$0002
	dc.w	$0001
	dc.w	$C826
	incbin	"art/bg_mappings/portrait/harpy/5.bgbyte"
@portrait_harpy_fragment_6:
	dc.w	$0002
	dc.w	$0001
	dc.w	$C826
	incbin	"art/bg_mappings/portrait/harpy/6.bgbyte"
@portrait_harpy_fragment_7:
	dc.w	$0002
	dc.w	$0001
	dc.w	$C826
	incbin	"art/bg_mappings/portrait/harpy/7.bgbyte"
@portrait_harpy_fragment_8:
	dc.w	$0002
	dc.w	$0001
	dc.w	$C826
	incbin	"art/bg_mappings/portrait/harpy/8.bgbyte"
@portrait_harpy_fragment_9:
	dc.w	$0005
	dc.w	$0001
	dc.w	$C724
	incbin	"art/bg_mappings/portrait/harpy/9.bgbyte"
@portrait_harpy_fragment_10:
	dc.w	$0005
	dc.w	$0001
	dc.w	$C724
	incbin	"art/bg_mappings/portrait/harpy/10.bgbyte"
@portrait_harpy_fragment_11:
	dc.w	$0005
	dc.w	$0001
	dc.w	$C724
	incbin	"art/bg_mappings/portrait/harpy/11.bgbyte"

tbl_portrait_zoh_bgmap:
    dc.l    portrait_default_base_bgmap
    dc.l    portrait_defeated_base_bgmap
    dc.l    @portrait_zoh_fragment_0
    dc.l    @portrait_zoh_fragment_1
    dc.l    @portrait_zoh_fragment_2
    dc.l    @portrait_zoh_fragment_3
    dc.l    @portrait_zoh_fragment_4
    dc.l    @portrait_zoh_fragment_5
    dc.l    @portrait_zoh_fragment_6
    dc.l    @portrait_zoh_fragment_7
    dc.l    @portrait_zoh_fragment_8
@portrait_zoh_fragment_0:
	dc.w	$0005
	dc.w	$0003
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/zoh/0.bgbyte"
@portrait_zoh_fragment_1:
	dc.w	$0005
	dc.w	$0003
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/zoh/1.bgbyte"
@portrait_zoh_fragment_2:
	dc.w	$0005
	dc.w	$0003
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/zoh/2.bgbyte"
@portrait_zoh_fragment_3:
	dc.w	$0006
	dc.w	$0004
	dc.w	$C71E
	incbin	"art/bg_mappings/portrait/zoh/3.bgbyte"
@portrait_zoh_fragment_4:
	dc.w	$0006
	dc.w	$0004
	dc.w	$C71E
	incbin	"art/bg_mappings/portrait/zoh/4.bgbyte"
@portrait_zoh_fragment_5:
	dc.w	$0006
	dc.w	$0004
	dc.w	$C71E
	incbin	"art/bg_mappings/portrait/zoh/5.bgbyte"
@portrait_zoh_fragment_6:
	dc.w	$0007
	dc.w	$0005
	dc.w	$C69E
	incbin	"art/bg_mappings/portrait/zoh/6.bgbyte"
@portrait_zoh_fragment_7:
	dc.w	$0007
	dc.w	$0005
	dc.w	$C69E
	incbin	"art/bg_mappings/portrait/zoh/7.bgbyte"
@portrait_zoh_fragment_8:
	dc.w	$0007
	dc.w	$0005
	dc.w	$C69E
	incbin	"art/bg_mappings/portrait/zoh/8.bgbyte"

tbl_portrait_schezo_bgmap:
    dc.l    portrait_default_base_bgmap
    dc.l    portrait_defeated_base_bgmap
    dc.l    @portrait_schezo_fragment_0
    dc.l    @portrait_schezo_fragment_1
    dc.l    @portrait_schezo_fragment_2
    dc.l    @portrait_schezo_fragment_3
    dc.l    @portrait_schezo_fragment_4
    dc.l    @portrait_schezo_fragment_5
    dc.l    @portrait_schezo_fragment_6
    dc.l    @portrait_schezo_fragment_7
    dc.l    @portrait_schezo_fragment_8
    dc.l    @portrait_schezo_fragment_9
    dc.l    @portrait_schezo_fragment_10
    dc.l    @portrait_schezo_fragment_11
    dc.l    @portrait_schezo_fragment_12
    dc.l    @portrait_schezo_fragment_13
    dc.l    @portrait_schezo_fragment_14
    dc.l    @portrait_schezo_fragment_15
    dc.l    @portrait_schezo_fragment_16
    dc.l    @portrait_schezo_fragment_17
    dc.l    @portrait_schezo_fragment_18
@portrait_schezo_fragment_0:
	dc.w	$0004
	dc.w	$0002
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/schezo/0.bgbyte"
@portrait_schezo_fragment_1:
	dc.w	$0004
	dc.w	$0002
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/schezo/1.bgbyte"
@portrait_schezo_fragment_2:
	dc.w	$0004
	dc.w	$0002
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/schezo/2.bgbyte"
@portrait_schezo_fragment_3:
	dc.w	$0004
	dc.w	$0002
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/schezo/3.bgbyte"
@portrait_schezo_fragment_4:
	dc.w	$0004
	dc.w	$0002
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/schezo/4.bgbyte"
@portrait_schezo_fragment_5:
	dc.w	$0004
	dc.w	$0002
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/schezo/5.bgbyte"
@portrait_schezo_fragment_6:
	dc.w	$0004
	dc.w	$0002
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/schezo/6.bgbyte"
@portrait_schezo_fragment_7:
	dc.w	$0004
	dc.w	$0002
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/schezo/7.bgbyte"
@portrait_schezo_fragment_8:
	dc.w	$0004
	dc.w	$0002
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/schezo/8.bgbyte"
@portrait_schezo_fragment_9:
	dc.w	$0001
	dc.w	$0001
	dc.w	$C7A8
	incbin	"art/bg_mappings/portrait/schezo/9.bgbyte"
@portrait_schezo_fragment_10:
	dc.w	$0001
	dc.w	$0001
	dc.w	$C7A8
	incbin	"art/bg_mappings/portrait/schezo/10.bgbyte"
@portrait_schezo_fragment_11:
	dc.w	$0001
	dc.w	$0001
	dc.w	$C7A8
	incbin	"art/bg_mappings/portrait/schezo/11.bgbyte"
@portrait_schezo_fragment_12:
	dc.w	$0001
	dc.w	$0001
	dc.w	$C7A8
	incbin	"art/bg_mappings/portrait/schezo/12.bgbyte"
@portrait_schezo_fragment_13:
	dc.w	$0001
	dc.w	$0001
	dc.w	$C7A8
	incbin	"art/bg_mappings/portrait/schezo/13.bgbyte"
@portrait_schezo_fragment_14:
	dc.w	$0001
	dc.w	$0001
	dc.w	$C7A8
	incbin	"art/bg_mappings/portrait/schezo/14.bgbyte"
@portrait_schezo_fragment_15:
	dc.w	$0001
	dc.w	$0001
	dc.w	$C7A8
	incbin	"art/bg_mappings/portrait/schezo/15.bgbyte"
@portrait_schezo_fragment_16:
	dc.w	$0002
	dc.w	$0000
	dc.w	$C7A6
	incbin	"art/bg_mappings/portrait/schezo/16.bgbyte"
@portrait_schezo_fragment_17:
	dc.w	$0002
	dc.w	$0000
	dc.w	$C7A6
	incbin	"art/bg_mappings/portrait/schezo/17.bgbyte"
@portrait_schezo_fragment_18:
	dc.w	$0002
	dc.w	$0000
	dc.w	$C7A6
	incbin	"art/bg_mappings/portrait/schezo/18.bgbyte"

tbl_portrait_minotauros_bgmap:
    dc.l    portrait_default_base_bgmap
    dc.l    portrait_defeated_base_bgmap
    dc.l    @portrait_minotauros_fragment_0
    dc.l    @portrait_minotauros_fragment_1
    dc.l    @portrait_minotauros_fragment_2
    dc.l    @portrait_minotauros_fragment_3
    dc.l    @portrait_minotauros_fragment_4
    dc.l    @portrait_minotauros_fragment_5
    dc.l    @portrait_minotauros_fragment_6
    dc.l    @portrait_minotauros_fragment_7
@portrait_minotauros_fragment_0:
	dc.w	$0001
	dc.w	$0002
	dc.w	$C6AC
	incbin	"art/bg_mappings/portrait/minotauros/0.bgbyte"
@portrait_minotauros_fragment_1:
	dc.w	$0001
	dc.w	$0002
	dc.w	$C6AC
	incbin	"art/bg_mappings/portrait/minotauros/1.bgbyte"
@portrait_minotauros_fragment_2:
	dc.w	$0001
	dc.w	$0002
	dc.w	$C6AC
	incbin	"art/bg_mappings/portrait/minotauros/2.bgbyte"
@portrait_minotauros_fragment_3:
	dc.w	$0001
	dc.w	$0002
	dc.w	$C6AC
	incbin	"art/bg_mappings/portrait/minotauros/3.bgbyte"
@portrait_minotauros_fragment_4:
	dc.w	$0004
	dc.w	$0003
	dc.w	$C7A8
	incbin	"art/bg_mappings/portrait/minotauros/4.bgbyte"
@portrait_minotauros_fragment_5:
	dc.w	$0008
	dc.w	$0005
	dc.w	$C620
	incbin	"art/bg_mappings/portrait/minotauros/5.bgbyte"
@portrait_minotauros_fragment_6:
	dc.w	$0003
	dc.w	$0003
	dc.w	$C72A
	incbin	"art/bg_mappings/portrait/minotauros/6.bgbyte"
@portrait_minotauros_fragment_7:
	dc.w	$0003
	dc.w	$0003
	dc.w	$C72A
	incbin	"art/bg_mappings/portrait/minotauros/7.bgbyte"

tbl_portrait_rulue_bgmap:
    dc.l    portrait_default_base_bgmap
    dc.l    portrait_defeated_base_bgmap
    dc.l    @portrait_rulue_fragment_0
    dc.l    @portrait_rulue_fragment_1
    dc.l    @portrait_rulue_fragment_2
    dc.l    @portrait_rulue_fragment_3
    dc.l    @portrait_rulue_fragment_4
    dc.l    @portrait_rulue_fragment_5
    dc.l    @portrait_rulue_fragment_6
    dc.l    @portrait_rulue_fragment_7
    dc.l    @portrait_rulue_fragment_8
    dc.l    @portrait_rulue_fragment_9
    dc.l    @portrait_rulue_fragment_10
    dc.l    @portrait_rulue_fragment_11
    dc.l    @portrait_rulue_fragment_12
    dc.l    @portrait_rulue_fragment_13
    dc.l    @portrait_rulue_fragment_14
@portrait_rulue_fragment_0:
	dc.w	$0005
	dc.w	$0002
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/rulue/0.bgbyte"
@portrait_rulue_fragment_1:
	dc.w	$0005
	dc.w	$0002
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/rulue/1.bgbyte"
@portrait_rulue_fragment_2:
	dc.w	$0005
	dc.w	$0002
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/rulue/2.bgbyte"
@portrait_rulue_fragment_3:
	dc.w	$0005
	dc.w	$0002
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/rulue/3.bgbyte"
@portrait_rulue_fragment_4:
	dc.w	$0005
	dc.w	$0002
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/rulue/4.bgbyte"
@portrait_rulue_fragment_5:
	dc.w	$0005
	dc.w	$0002
	dc.w	$C6A2
	incbin	"art/bg_mappings/portrait/rulue/5.bgbyte"
@portrait_rulue_fragment_6:
	dc.w	$0001
	dc.w	$0001
	dc.w	$C7A4
	incbin	"art/bg_mappings/portrait/rulue/6.bgbyte"
@portrait_rulue_fragment_7:
	dc.w	$0001
	dc.w	$0001
	dc.w	$C7A4
	incbin	"art/bg_mappings/portrait/rulue/7.bgbyte"
@portrait_rulue_fragment_8:
	dc.w	$0001
	dc.w	$0001
	dc.w	$C7A4
	incbin	"art/bg_mappings/portrait/rulue/8.bgbyte"
@portrait_rulue_fragment_9:
	dc.w	$0001
	dc.w	$0001
	dc.w	$C7A4
	incbin	"art/bg_mappings/portrait/rulue/9.bgbyte"
@portrait_rulue_fragment_10:
	dc.w	$0001
	dc.w	$0001
	dc.w	$C7A4
	incbin	"art/bg_mappings/portrait/rulue/10.bgbyte"
@portrait_rulue_fragment_11:
	dc.w	$0001
	dc.w	$0001
	dc.w	$C7A4
	incbin	"art/bg_mappings/portrait/rulue/11.bgbyte"
@portrait_rulue_fragment_12:
	dc.w	$0002
	dc.w	$0001
	dc.w	$C7A4
	incbin	"art/bg_mappings/portrait/rulue/12.bgbyte"
@portrait_rulue_fragment_13:
	dc.w	$0002
	dc.w	$0001
	dc.w	$C7A4
	incbin	"art/bg_mappings/portrait/rulue/13.bgbyte"
@portrait_rulue_fragment_14:
	dc.w	$0002
	dc.w	$0001
	dc.w	$C7A4
	incbin	"art/bg_mappings/portrait/rulue/14.bgbyte"

tbl_portrait_satan_bgmap:
    dc.l    portrait_default_base_bgmap
    dc.l    portrait_defeated_base_bgmap
    dc.l    @portrait_satan_fragment_0
    dc.l    @portrait_satan_fragment_1
    dc.l    @portrait_satan_fragment_2
    dc.l    @portrait_satan_fragment_3
    dc.l    @portrait_satan_fragment_4
    dc.l    @portrait_satan_fragment_5
    dc.l    @portrait_satan_fragment_6
    dc.l    @portrait_satan_fragment_7
    dc.l    @portrait_satan_fragment_8
    dc.l    @portrait_satan_fragment_9
    dc.l    @portrait_satan_fragment_10
    dc.l    @portrait_satan_fragment_11
    dc.l    @portrait_satan_fragment_12
    dc.l    @portrait_satan_fragment_13
    dc.l    @portrait_satan_fragment_14
@portrait_satan_fragment_0:
	dc.w	$0005
	dc.w	$0001
	dc.w	$C722
	incbin	"art/bg_mappings/portrait/satan/0.bgbyte"
@portrait_satan_fragment_1:
	dc.w	$0005
	dc.w	$0001
	dc.w	$C722
	incbin	"art/bg_mappings/portrait/satan/1.bgbyte"
@portrait_satan_fragment_2:
	dc.w	$0005
	dc.w	$0001
	dc.w	$C722
	incbin	"art/bg_mappings/portrait/satan/2.bgbyte"
@portrait_satan_fragment_3:
	dc.w	$0002
	dc.w	$0001
	dc.w	$C824
	incbin	"art/bg_mappings/portrait/satan/3.bgbyte"
@portrait_satan_fragment_4:
	dc.w	$0002
	dc.w	$0001
	dc.w	$C824
	incbin	"art/bg_mappings/portrait/satan/4.bgbyte"
@portrait_satan_fragment_5:
	dc.w	$0002
	dc.w	$0001
	dc.w	$C824
	incbin	"art/bg_mappings/portrait/satan/5.bgbyte"
@portrait_satan_fragment_6:
	dc.w	$0002
	dc.w	$0001
	dc.w	$C824
	incbin	"art/bg_mappings/portrait/satan/6.bgbyte"
@portrait_satan_fragment_7:
	dc.w	$0002
	dc.w	$0001
	dc.w	$C824
	incbin	"art/bg_mappings/portrait/satan/7.bgbyte"
@portrait_satan_fragment_8:
	dc.w	$0002
	dc.w	$0001
	dc.w	$C824
	incbin	"art/bg_mappings/portrait/satan/8.bgbyte"
@portrait_satan_fragment_9:
	dc.w	$0002
	dc.w	$0001
	dc.w	$C824
	incbin	"art/bg_mappings/portrait/satan/9.bgbyte"
@portrait_satan_fragment_10:
	dc.w	$0002
	dc.w	$0001
	dc.w	$C824
	incbin	"art/bg_mappings/portrait/satan/10.bgbyte"
@portrait_satan_fragment_11:
	dc.w	$0002
	dc.w	$0001
	dc.w	$C824
	incbin	"art/bg_mappings/portrait/satan/11.bgbyte"
@portrait_satan_fragment_12:
	dc.w	$0004
	dc.w	$0001
	dc.w	$C7A4
	incbin	"art/bg_mappings/portrait/satan/12.bgbyte"
@portrait_satan_fragment_13:
	dc.w	$0004
	dc.w	$0001
	dc.w	$C7A4
	incbin	"art/bg_mappings/portrait/satan/13.bgbyte"
@portrait_satan_fragment_14:
	dc.w	$0004
	dc.w	$0001
	dc.w	$C7A4
	incbin	"art/bg_mappings/portrait/satan/14.bgbyte"

tbl_bgMappings:
	dc.l	bgdata_cutsceneGrass
	dc.l	bgdata_cutsceneRuins
	dc.l	bgdata_cutsceneHell
	dc.l	bgdata_battleGrass
	dc.l	bgdata_battle2P_2
	dc.l	bgdata_battleRuins
	dc.l	bgdata_gameOver
	dc.l	bgdata_unk2
	dc.l	bgdata_recordScreen
	dc.l	bgdata_endingArle
	dc.l	bgdata_endingScroll
	dc.l	bgdata_endingNight
	dc.l	bgdata_menu1PHighlight
	dc.l	bgdata_menu2PHighlight
	dc.l	bgdata_menuTokotonHighlight
	dc.l	bgdata_menuOptionsHighlight
	dc.l	NULL
	dc.l	NULL
	dc.l	NULL
	dc.l	NULL
	dc.l	NULL
	dc.l	NULL
	dc.l	bgdata_battleTutorial
	dc.l	bgdata_battle2P
	dc.l	NULL
	dc.l	NULL
	dc.l	NULL
	dc.l	NULL
	dc.l	NULL
	dc.l	NULL
	dc.l	bgdata_unk3
	dc.l	bgdata_mainMenu
	dc.l	bgdata_title
	dc.l	bgdata_title
	dc.l	bgdata_title
	dc.l	bgdata_segaLogo
	dc.l	NULL
	dc.l	NULL
	dc.l	NULL
	dc.l	NULL
	dc.l	NULL
	dc.l	NULL
	dc.l	bgdata_demoScreen
	dc.l	bgdata_unk1
	dc.l	bgdata_cutsceneGrassTreesTop
	dc.l	bgdata_cutsceneGrassNoClouds
	dc.l	bgdata_cutsceneGrassClouds1
	dc.l	bgdata_cutsceneGrassClouds2
	dc.l	bgdata_cutsceneRuinsSky
	dc.l	bgdata_cutsceneHell
	
	
bgdata_menu1PHighlight:
	dc.w    $0004
	dc.l    @menu1P
	dc.l    @menu2P
	dc.l    @menuTokoton
	dc.l    @menuOptions
@menu1P:
	bgmac_ByteIndex bgmap_menu1PlayerHighlight, 16, 2, $CA18, $E3
@menu2P:
	bgmac_ByteIndex bgmap_menu2Player, 16, 2, $CD18, $E3
@menuTokoton:
	bgmac_ByteIndex bgmap_menuEndless, 16, 2, $D018, $E3
@menuOptions:
	bgmac_ByteIndex bgmap_menuOptions, 16, 2, $D318, $E3
	

bgdata_menu2PHighlight:
	dc.w    $0004
	dc.l    @menu1P
	dc.l    @menu2P
	dc.l    @menuTokoton
	dc.l    @menuOptions
@menu1P:
	bgmac_ByteIndex bgmap_menu1Player, 16, 2, $CA18, $E3
@menu2P:
	bgmac_ByteIndex bgmap_menu2PlayerHighlight, 16, 2, $CD18, $E3
@menuTokoton:
	bgmac_ByteIndex bgmap_menuEndless, 16, 2, $D018, $E3
@menuOptions:
	bgmac_ByteIndex bgmap_menuOptions, 16, 2, $D318, $E3
	
	
bgdata_menuTokotonHighlight:
	dc.w    $0004
	dc.l    @menu1P
	dc.l    @menu2P
	dc.l    @menuTokoton
	dc.l    @menuOptions
@menu1P:
	bgmac_ByteIndex bgmap_menu1Player, 16, 2, $CA18, $E3
@menu2P:
	bgmac_ByteIndex bgmap_menu2Player, 16, 2, $CD18, $E3
@menuTokoton:
	bgmac_ByteIndex bgmap_menuEndlessHighlight, 16, 2, $D018, $E3
@menuOptions:
	bgmac_ByteIndex bgmap_menuOptions, 16, 2, $D318, $E3


bgdata_menuOptionsHighlight:
	dc.w    $0004
	dc.l    @menu1P
	dc.l    @menu2P
	dc.l    @menuTokoton
	dc.l    @menuOptions
@menu1P:
	bgmac_ByteIndex bgmap_menu1Player, 16, 2, $CA18, $E3
@menu2P:
	bgmac_ByteIndex bgmap_menu2Player, 16, 2, $CD18, $E3
@menuTokoton:
	bgmac_ByteIndex bgmap_menuEndless, 16, 2, $D018, $E3
@menuOptions:
	bgmac_ByteIndex bgmap_menuOptionsionsHighlight, 16, 2, $D318, $E3

	
bgdata_mainMenu:
	dc.w    $0013
	dc.l    @clear1
	dc.l    @treesTopLeft
	dc.l    @treesTopRight
	dc.l    @clear2
	dc.l    @cloud1
	dc.l    @cloud2
	dc.l    @cloud3
	dc.l    @cloud4
	dc.l    @cloud5
	dc.l    @cloud6
	dc.l    @cloud7
	dc.l    @cloud8
	dc.l    @cloud9
	dc.l    @cloud10
	dc.l    @cloud11
	dc.l    @cloud12
	dc.l    @menu
	dc.l    @diffLeft
	dc.l    @diffRight

@clear1:
	bgmac_Clear $50, $1C, $C000, $8000
@treesTopLeft:
	bgmac_ByteIndex bgmap_cutGrassTreesTopLeft, 32, 14, $EE00, $01
@treesTopRight:
	bgmac_ByteIndex bgmap_cutGrassTreesTopRight, 8, 14, $EE40, $01
@clear2:
	bgmac_Clear $80, $0E, $E000, $0295
@cloud1:
	bgmac_ByteIndex bgmap_cutGrassCloud1, 11, 5, $E004, $02
@cloud2:
	bgmac_ByteIndex bgmap_cutGrassCloud2, 12, 4, $E438, $02
@cloud3:
	bgmac_ByteIndex bgmap_cutGrassCloud1, 11, 5, $E934, $02
@cloud4:
	bgmac_ByteIndex bgmap_cutGrassCloud2, 12, 4, $E904, $02
@cloud5:
	bgmac_ByteIndex bgmap_cutGrassCloud1, 11, 5, $E352, $02
@cloud6:
	bgmac_ByteIndex bgmap_cutGrassCloud2, 12, 4, $E988, $02
@cloud7:
	bgmac_ByteIndex bgmap_cutGrassCloud1, 11, 5, $E970, $02
@cloud8:
	bgmac_ByteIndex bgmap_cutGrassCloud2, 12, 4, $E568, $02
@cloud9:
	bgmac_ByteIndex bgmap_cutGrassCloud1, 11, 5, $E2A4, $02
@cloud10:
	bgmac_ByteIndex bgmap_cutGrassCloud2, 12, 4, $EAC8, $02
@cloud11:
	bgmac_ByteIndex bgmap_cutGrassCloud1, 11, 5, $E8AC, $02
@cloud12:
	bgmac_ByteIndex bgmap_cutGrassCloud2, 12, 4, $E4BC, $02
@menu:
	bgmac_ByteIndex bgmap_menuMain, 30, 22, $C30A, $E0
@diffLeft:
	bgmac_ByteIndex bgmap_menuDifficultyLeft, 32, 23, $C250, $E0
@diffRight:
	bgmac_ByteIndex bgmap_menuDifficultyRight, 8, 23, $C290, $E0	


bgdata_demoScreen:
	dc.w    $0007
	dc.l    @clear1
	dc.l    @clear2
	dc.l    @clear3
	dc.l    @patch1
	dc.l    @patch2
	dc.l    @clear4
	dc.l    @clear5
@clear1:
	bgmac_Clear $17, $19, $C11E, $8000
@clear2:
	bgmac_Clear $16, $11, $E120, $63FD
@clear3:
	bgmac_Clear $15, $10, $E1A2, $63FC
@patch1:
	bgmac_ByteIndex bgmap_demoPatch1, 1, 17, $E11E, $40	
@patch2:
	bgmac_ByteIndex bgmap_demoPatch2, $17, 8, $E99E, $40	
@clear4:
	bgmac_Clear $E, $6, $EA20, $63FD
@clear5:
	bgmac_Clear $D, $5, $EAA2, $63FC


bgdata_unk1:
	dc.w    $0001
	dc.l	@clear1
@clear1:
	bgmac_Clear $16, $11, $C120, $8000


bgdata_segaLogo:
	dc.w	$0003
	dc.l	@clear1
	dc.l	@clear2
	dc.l	@logo
@clear1:
	bgmac_Clear $40, $1C, $C000, $8000
@clear2:
	bgmac_Clear $40, $1C, $E000, $0000
@logo
	bgmac_ByteIndex bgmap_segaLogo, $C, 4, $C61C, $80

	
bgdata_title:
	dc.w	$0008
	dc.l    @clear1
	dc.l    @bgPart1
	dc.l    @bgPart2
	dc.l    @bgPart3
	dc.l    @Pu1
	dc.l    @Yo1
	dc.l    @Pu2
	dc.l    @Yo2
@clear1:
	bgmac_Clear $80, $20, $C000, $0500
@bgPart1:
	bgmac_WordIndex bgmap_titleBG2, $28, $4, $E000
@bgPart2:
	bgmac_WordIndex bgmap_titleBG1, $28, $C, $E400
@bgPart3:
	bgmac_WordIndex bgmap_titleBG1, $28, $C, $F000
@Pu1:
	bgmac_ByteIndex bgmap_titlePu1, $8, $7, $C608, $E3
@Yo1:
	bgmac_ByteIndex bgmap_titleYo1, $8, $7, $C618, $E3
@Pu2:
	bgmac_ByteIndex bgmap_titlePu2, $8, $7, $C628, $E3
@Yo2:
	bgmac_ByteIndex bgmap_titleYo2, $8, $7, $C638, $E3
	

bgdata_endingScroll:
	dc.w    $000A
	dc.l    @clear1
	dc.l    @clear2
	dc.l    @clear3
	dc.l    @ground
	dc.l    @sunset
	dc.l    @clouds
	dc.l    @clear4
	dc.l    @sunsetScroll1
	dc.l    @sunsetScroll2
	dc.l    @sunsetScroll3
@clear1:
	bgmac_Clear $40, $1C, $C000, $80FF
@clear2:
	bgmac_Clear $20, $3, $C708, $8000
@clear3:
	bgmac_Clear $40, $1C, $E000, $0000
@ground:
	bgmac_ByteIndex bgmap_endingGround, $20, $07, $C888, $81
@sunset:
	bgmac_ByteIndex bgmap_endingSunset, $20, $9, $C208, $80
@clouds:
	bgmac_ByteIndex bgmap_endingCloudScroll, $20, $1, $C688, $80
@clear4:
	bgmac_Clear $40, $09, $E200, $000F
@sunsetScroll1:
	bgmac_ByteIndex bgmap_endingSunsetScroll, $20, $4, $E680, $00
@sunsetScroll2:
	bgmac_ByteIndex bgmap_endingSunsetScroll, $20, $4, $E6C0, $00
@sunsetScroll3:
	bgmac_ByteIndex bgmap_endingSunsetScroll, $20, $4, $E688, $00

	
bgdata_endingNight:
	dc.w	$0001
	dc.l    @sunset
@sunset:
	bgmac_ByteIndex bgmap_endingSunsetNight, $20, $14, $C208, $81

	
bgdata_endingArle:
	dc.w	$0006
	dc.l	@clear1
	dc.l	@clear2
	dc.l	@arleTop
	dc.l	@arleBottom
	dc.l	@sunset
	dc.l	@ground
@clear1:
	bgmac_Clear $80, $1C, $C000, $0000
@clear2:
	bgmac_Clear $80, $1C, $E000, $0000
@arleTop:
	bgmac_ByteIndex bgmap_endingArleTop, $18, $10, $C820, $22
@arleBottom:
	bgmac_ByteIndex bgmap_endingArleBottom, $18, $04, $D820, $23
@sunset:
	bgmac_ByteIndex bgmap_endingSunset, $20, $D, $E408, $00
@ground:
	bgmac_ByteIndex bgmap_endingGround, $20, $7, $F108, $01

	
bgdata_recordScreen:
	dc.w    $0009
	dc.l	@clear1
	dc.l	@recordLeft1
	dc.l	@recordRight1
	dc.l	@recordLeft2
	dc.l	@recordRight2
	dc.l	@recordUnk1
	dc.l	@recordLeft3
	dc.l	@recordRight3
	dc.l	@recordUnk2
@clear1:
	bgmac_Clear $80, $1C, $C000, $8500
@recordLeft1:
	bgmac_ByteIndex bgmap_recordLeft, $20, $1C, $E000, $03
@recordRight1:
	bgmac_ByteIndex bgmap_recordRight, $8, $1C, $E040, $03
@recordLeft2:
	bgmac_ByteIndex bgmap_recordLeft, $20, $1C, $E050, $03
@recordRight2:
	bgmac_ByteIndex bgmap_recordRight, $8, $1C, $E090, $03
@recordUnk1:
	bgmac_ByteIndex bgmap_recordUnk1, $2, $E, $EA58, $03
@recordLeft3:
	bgmac_ByteIndex bgmap_recordLeft, $20, $1C, $E0B0, $03
@recordRight3:
	bgmac_ByteIndex bgmap_recordRight, $8, $1C, $E0F0, $03
@recordUnk2:
	bgmac_ByteIndex bgmap_recordUnk1, $2, $E, $EAB8, $03

	
bgdata_unk2:
	dc.w    $0002
	dc.l	@clear1
	dc.l	@clear2
@clear1:
	bgmac_Clear $80, $1C, $C000, $8500
@clear2:
	bgmac_Clear $80, $1C, $E000, $0500


bgdata_unk3:
	dc.w    $0001
	dc.l    loc_00017724
loc_00017724:
	bgmac_Clear $33, $1C, $C00E, $8500

	
bgdata_gameOver:
	dc.w    $0007
	dc.l    @clear2
	dc.l    @topLeft
	dc.l    @topRight
	dc.l    @bottomLeft
	dc.l    @bottomRight
	dc.l    @clear3
	dc.l    @clear1
@clear1:
	bgmac_Clear $40, $1C, $C000, $01F8
@clear2:
	bgmac_Clear $28, $04, $E400, $0001
@clear3:
	bgmac_Clear $28, $02, $ED00, $0101
@topLeft:
	bgmac_ByteIndex bgmap_gameoverTopLeft, $20, $C, $E400, $00
@topRight:
	bgmac_ByteIndex bgmap_gameoverTopRight, $8, $8, $E640, $00
@bottomLeft:
	bgmac_ByteIndex bgmap_gameoverBottomLeft, $20, $6, $EA00, $01
@bottomRight:
	bgmac_ByteIndex bgmap_gameoverBottomRight, $8, $6, $EA40, $01
	

bgdata_unkClear1:
	bgmac_Clear $28, $04, $CE00, $8000
bgdata_unkClear2:
	bgmac_Clear $28, $04, $EE00, $8000
bgdata_battleGrass:
	dc.w    $0009
	dc.l    @topLeft
	dc.l    @topRight
	dc.l    @bottomLeft
	dc.l    @bottomRight
	dc.l    @bakTopLeft
	dc.l    @bakTopRight
	dc.l    @bakBottomLeft
	dc.l    @bakBottomRight
	dc.l    bgdata_unkClear1
@topLeft:
	bgmac_ByteIndex bgmap_batGrassTopLeft, $20, $E, $C000, $C0
@topRight:
	bgmac_ByteIndex bgmap_batGrassTopRight, $8, $E, $C040, $C0
@bottomLeft:
	bgmac_ByteIndex bgmap_batGrassBottomLeft, $20, $E, $C700, $C0
@bottomRight:
	bgmac_ByteIndex bgmap_batGrassBottomRight, $8, $E, $C740, $C0
@bakTopLeft:
	bgmac_ByteIndex bgmap_batBakGrassTopLeft, $20, $E, $E000, $40
@bakTopRight:
	bgmac_ByteIndex bgmap_batBakGrassTopRight, $8, $E, $E040, $40
@bakBottomLeft:
	bgmac_ByteIndex bgmap_batBakGrassBottomLeft, $20, $E, $E700, $40
@bakBottomRight:
	bgmac_ByteIndex bgmap_batBakGrassBottomRight, $8, $E, $E740, $40


bgdata_battle2P:
	dc.w    $0004
	dc.l    @topLeft
	dc.l    @topRight
	dc.l    @bottomLeft
	dc.l    @bottomRight
@topLeft:
	bgmac_ByteIndex bgmap_batCabinTopLeft, $20, $E, $C000, $E0
@topRight:
	bgmac_ByteIndex bgmap_batCabinTopRight, $8, $E, $C040, $E0
@bottomLeft:
	bgmac_ByteIndex bgmap_batCabinBottomLeft, $20, $C, $C700, $E0
@bottomRight:
	bgmac_ByteIndex bgmap_batCabinBottomRight, $8, $C, $C740, $E0
	

bgdata_battle2P_2:
	dc.w   $000C
	dc.l   @topLeft
	dc.l   @topRight
	dc.l   @bottomLeft
	dc.l   @bottomRight
	dc.l   @bakTopLeft
	dc.l   @bakTopRight
	dc.l   @bakBottomLeft
	dc.l   @bakBottomRight
	dc.l   @topLeftUnk
	dc.l   @topRightUnk
	dc.l   bgdata_unkClear1
	dc.l   bgdata_unkClear2
@topLeft:
	bgmac_ByteIndex bgmap_batCabinTopLeft, $20, $E, $C000, $E0
@topRight:
	bgmac_ByteIndex bgmap_batCabinTopRight, $8, $E, $C040, $E0
@bottomLeft:
	bgmac_ByteIndex bgmap_batCabinBottomLeft, $20, $E, $C700, $E0
@bottomRight:
	bgmac_ByteIndex bgmap_batCabinBottomRight, $8, $E, $C740, $E0
@bakTopLeft:
	bgmac_ByteIndex bgmap_batBakCabinTopLeft, $20, $E, $E000, $60
@bakTopRight:
	bgmac_ByteIndex bgmap_batBakCabinTopRight, $8, $E, $E040, $60
@bakBottomLeft:
	bgmac_ByteIndex bgmap_batBakCabinBottomLeft, $20, $E, $E700, $60
@bakBottomRight:
	bgmac_ByteIndex bgmap_batBakCabinBottomRight, $8, $E, $E740, $60
@topLeftUnk:
	bgmac_ByteIndex bgmap_batCabinTopLeft, $20, $2, $E000, $60
@topRightUnk:
	bgmac_ByteIndex bgmap_batCabinTopRight, $8, $2, $E040, $60
	
	
bgdata_battleRuins:
	dc.w    $0006
	dc.l    @left
	dc.l    @right
	dc.l    @bakLeft
	dc.l    @bakRight
	dc.l    bgdata_unkClear1
	dc.l    bgdata_unkClear2
@left:
	bgmac_ByteIndex bgmap_batStoneLeft, $20, $1C, $C000, $C0
@right:
	bgmac_ByteIndex bgmap_batStoneRight, $8, $1C, $C040, $C0
@bakLeft:
	bgmac_ByteIndex bgmap_batBakStoneLeft, $20, $1C, $E000, $40
@bakRight:	
	bgmac_ByteIndex bgmap_batBakStoneRight, $8, $1C, $E040, $40
	
	
bgdata_battleTutorial:
	dc.w    $000B
	dc.l    @topLeft
	dc.l    @topRight
	dc.l    @bottomLeft
	dc.l    @bottomRight
	dc.l    @bakTopLeft
	dc.l    @bakTopRight
	dc.l    @bakBottomLeft
	dc.l    @bakBottomRight
	dc.l    @unkTopLeft
	dc.l    @unkTopRight
	dc.l    @clear1
	dc.l    bgdata_unkClear1
@clear1:
	bgmac_Clear $28, $04, $D01C, $8000
@topLeft:
	bgmac_ByteIndexPal bgmap_batPuzzleTopLeft, bgmap_batPalPuzzleTopLeft, $20, $0E, $C000, $8000
@topRight:
	bgmac_ByteIndexPal bgmap_batPuzzleTopRight, bgmap_batPalPuzzleTopRight, $8, $0E, $C040, $8000
@bottomLeft:
	bgmac_ByteIndexPal bgmap_batPuzzleBottomLeft, bgmap_batPalPuzzleBottomLeft, $20, $0E, $C700, $8000
@bottomRight:
	bgmac_ByteIndexPal bgmap_batPuzzleBottomRight, bgmap_batPalPuzzleBottomRight, $8, $0E, $C740, $8000
@bakTopLeft:
	bgmac_ByteIndex bgmap_batBakPuzzleTopLeft, $20, $E, $E000, $40
@bakTopRight:
	bgmac_ByteIndex bgmap_batBakPuzzleTopRight, $8, $E, $E040, $40
@bakBottomLeft:
	bgmac_ByteIndex bgmap_batBakPuzzleBottomLeft, $20, $E, $E700, $40
@bakBottomRight:
	bgmac_ByteIndex bgmap_batBakPuzzleBottomRight, $8, $E, $E740, $40
@unkTopLeft:
	bgmac_ByteIndexPal bgmap_batPuzzleTopLeft, bgmap_batPalPuzzleTopLeft, $20, $2, $E000, $0000
@unkTopRight:
	bgmac_ByteIndexPal bgmap_batPuzzleTopRight, bgmap_batPalPuzzleTopRight, $8, $2, $E040, $0000
	

bgdata_cutsceneGrassTreesTop:
	dc.w    $0002
	dc.l    bgdata_cutGrass_topLeft
	dc.l    bgdata_cutGrass_topRight
bgdata_cutsceneGrassNoClouds:
	dc.w	$0008
	dc.l    bgdata_cutGrass_topLeft
	dc.l    bgdata_cutGrass_topRight
	dc.l    bgdata_cutGrass_bottomLeft
	dc.l    bgdata_cutGrass_bottomRight
	dc.l    bgdata_cutGrass_grassFarLeft
	dc.l    bgdata_cutGrass_grassFarRight
	dc.l    bgdata_cutGrass_grassLeft
	dc.l    bgdata_cutGrass_grassRight
bgdata_cutsceneGrassClouds1:
	dc.w	$0008
	dc.l    bgdata_cutGrass_clear1
	dc.l    bgdata_cutGrass_cloud1
	dc.l    bgdata_cutGrass_cloud2
	dc.l    bgdata_cutGrass_cloud3
	dc.l    bgdata_cutGrass_cloud4
	dc.l    bgdata_cutGrass_cloud5
	dc.l    bgdata_cutGrass_cloud6
	dc.l    bgdata_cutGrass_cloud7
bgdata_cutsceneGrassClouds2:
	dc.w	$0008
	dc.l    bgdata_cutGrass_cloud8
	dc.l    bgdata_cutGrass_cloud9
	dc.l    bgdata_cutGrass_cloud10
	dc.l    bgdata_cutGrass_cloud11
	dc.l    bgdata_cutGrass_cloud12
	dc.l    bgdata_cutGrass_cloud13
	dc.l    bgdata_cutGrass_cloud14
	dc.l    bgdata_cutGrass_cloud15
bgdata_cutsceneGrass:
	dc.w    $0018
	dc.l    bgdata_cutGrass_topLeft
	dc.l    bgdata_cutGrass_topRight
	dc.l    bgdata_cutGrass_bottomLeft
	dc.l    bgdata_cutGrass_bottomRight
	dc.l    bgdata_cutGrass_grassFarLeft
	dc.l    bgdata_cutGrass_grassFarRight
	dc.l    bgdata_cutGrass_grassLeft
	dc.l    bgdata_cutGrass_grassRight
	dc.l    bgdata_cutGrass_clear1
	dc.l    bgdata_cutGrass_cloud1
	dc.l    bgdata_cutGrass_cloud2
	dc.l    bgdata_cutGrass_cloud3
	dc.l    bgdata_cutGrass_cloud4
	dc.l    bgdata_cutGrass_cloud5
	dc.l    bgdata_cutGrass_cloud6
	dc.l    bgdata_cutGrass_cloud7
	dc.l    bgdata_cutGrass_cloud8
	dc.l    bgdata_cutGrass_cloud9
	dc.l    bgdata_cutGrass_cloud10
	dc.l    bgdata_cutGrass_cloud11
	dc.l    bgdata_cutGrass_cloud12
	dc.l    bgdata_cutGrass_cloud13
	dc.l    bgdata_cutGrass_cloud14
	dc.l    bgdata_cutGrass_cloud15
bgdata_cutGrass_topLeft:
	bgmac_ByteIndex bgmap_cutGrassTreesTopLeft, $20, $10, $D200, $21
bgdata_cutGrass_topRight:
	bgmac_ByteIndex bgmap_cutGrassTreesTopRight, $8, $10, $D240, $21
bgdata_cutGrass_bottomLeft:
	bgmac_ByteIndex bgmap_cutGrassTreesBottomLeft, $20, $9, $DA00, $62
bgdata_cutGrass_bottomRight:
	bgmac_ByteIndex bgmap_cutGrassTreesBottomRight, $8, $9, $DA40, $62
bgdata_cutGrass_grassFarLeft:
	bgmac_WordIndex bgmap_cutGrassFarLeft, $2, $3, $DD00
bgdata_cutGrass_grassFarRight:
	bgmac_WordIndex bgmap_cutGrassFarRight, $2, $4, $DCCC
bgdata_cutGrass_grassLeft:
	bgmac_ByteIndex bgmap_cutGrassLeft, $20, $3, $DE80, $E1
bgdata_cutGrass_grassRight:
	bgmac_ByteIndex bgmap_cutGrassRight, $8, $3, $DEC0, $E1
bgdata_cutGrass_clear1:
	bgmac_Clear $40, $40, $E000, $2200
bgdata_cutGrass_cloud1:
	bgmac_ByteIndex bgmap_cutGrassCloud1, $B, $5, $F480, $22
bgdata_cutGrass_cloud2:
	bgmac_ByteIndex bgmap_cutGrassCloud1, $B, $5, $F518, $22
bgdata_cutGrass_cloud3:
	bgmac_ByteIndex bgmap_cutGrassCloud1, $B, $5, $F534, $22
bgdata_cutGrass_cloud4:
	bgmac_ByteIndex bgmap_cutGrassCloud1, $B, $5, $F4D2, $22
bgdata_cutGrass_cloud5:
	bgmac_ByteIndex bgmap_cutGrassCloud1, $B, $5, $F568, $22
bgdata_cutGrass_cloud6:
	bgmac_ByteIndex bgmap_cutGrassCloud1, $B, $5, $F780, $22
bgdata_cutGrass_cloud7:
	bgmac_ByteIndex bgmap_cutGrassCloud1, $B, $5, $F79C, $22
bgdata_cutGrass_cloud8:
	bgmac_ByteIndex bgmap_cutGrassCloud1, $B, $5, $F832, $22
bgdata_cutGrass_cloud9:
	bgmac_ByteIndex bgmap_cutGrassCloud1, $B, $5, $F7CC, $22
bgdata_cutGrass_cloud10:
	bgmac_ByteIndex bgmap_cutGrassCloud1, $B, $5, $F864, $22
bgdata_cutGrass_cloud11:
	bgmac_ByteIndex bgmap_cutGrassCloud2, $C, $4, $FB04, $22
bgdata_cutGrass_cloud12:
	bgmac_ByteIndex bgmap_cutGrassCloud2, $C, $4, $FAA4, $22
bgdata_cutGrass_cloud13:
	bgmac_ByteIndex bgmap_cutGrassCloud2, $C, $4, $FABE, $22
bgdata_cutGrass_cloud14:
	bgmac_ByteIndex bgmap_cutGrassCloud2, $C, $4, $FB5C, $22
bgdata_cutGrass_cloud15:
	bgmac_ByteIndex bgmap_cutGrassCloud3, $3, $2, $FC78, $22
	

bgdata_cutsceneRuinsSky:
	dc.w    $0002
    dc.l    bgdata_cutRuins_skyRight
    dc.l    bgdata_cutRuins_skyLeft	
bgdata_cutsceneRuins:
    dc.w    $000C
    dc.l    bgdata_cutRuins_groundRight
    dc.l    bgdata_cutRuins_groundLeft
    dc.l    bgdata_cutRuins_skyRight
    dc.l    bgdata_cutRuins_skyLeft
    dc.l    bgdata_cutRuins_mountainLeft
    dc.l    bgdata_cutRuins_mountainRight
    dc.l    bgdata_cutRuins_clear3
    dc.l    bgdata_cutRuins_unk3
    dc.l    bgdata_cutRuins_unk1
    dc.l    bgdata_cutRuins_unk2
    dc.l    bgdata_cutRuins_clear1
    dc.l    bgdata_cutRuins_clear2
bgdata_cutRuins_clear1:
	bgmac_Clear $28, $04, $C000, $A100
bgdata_cutRuins_clear2:
	bgmac_Clear $28, $08, $E000, $2100
bgdata_cutRuins_groundRight:
	bgmac_ByteIndex bgmap_cutRuinsGroundRight, $20, $8, $DC10, $A1
bgdata_cutRuins_groundLeft:
	bgmac_ByteIndex bgmap_cutRuinsGroundLeft, $8, $8, $DC00, $A1
bgdata_cutRuins_skyRight:
	bgmac_ByteIndex bgmap_cutRuinsSkyRight, $15, $14, $D226, $A1
bgdata_cutRuins_skyLeft:
	bgmac_ByteIndex bgmap_cutRuinsSkyLeft, $13, $14, $D200, $A2
bgdata_cutRuins_mountainLeft:
	bgmac_ByteIndex bgmap_cutRuinsMountainLeft, $20, $C, $F600, $62
bgdata_cutRuins_mountainRight:
	bgmac_ByteIndex bgmap_cutRuinsMountainRight, $8, $C, $F640, $62
bgdata_cutRuins_clear3:
	bgmac_Clear $28, $08, $FC00, $62BC
bgdata_cutRuins_unk3:
	bgmac_WordIndex bgmap_cutRuinsUnk3, $A, $3, $FABC
bgdata_cutRuins_unk1:
	bgmac_ByteIndex bgmap_cutRuinsUnk1, $3, $6, $D6A6, $21
bgdata_cutRuins_unk2:
	bgmac_ByteIndex bgmap_cutRuinsUnk2, $4, $8, $D59C, $22
bgmap_cutRuinsUnk1:
    incbin "art/bg_mappings/cutscene/ruins/unknown1.bgbyte"
bgmap_cutRuinsUnk2:
    incbin "art/bg_mappings/cutscene/ruins/unknown2.bgbyte"
	
	
bgdata_cutsceneHell:
    dc.w    $0007
    dc.l    @clear1
    dc.l    @groundRight
    dc.l    @groundLeft
    dc.l    @skyRight
    dc.l    @skyRight2
    dc.l    @skyLeft
    dc.l    @clear2
@clear1:
	bgmac_Clear $40, $0E, $D200, $A200
@groundRight:
	bgmac_ByteIndex bgmap_cutHellGroundRight, $20, $F, $D890, $A1
@groundLeft:
	bgmac_ByteIndex bgmap_cutHellGroundLeft, $8, $E, $D900, $A1
@skyRight:
	bgmac_ByteIndex bgmap_cutHellSkyRight, $20, $E, $F640, $22
@skyRight2:
	bgmac_ByteIndex bgmap_cutHellSkyRight, $20, $E, $F610, $22
@skyLeft:
	bgmac_ByteIndex bgmap_cutHellSkyLeft, $8, $E, $F600, $22
@clear2:
	bgmac_Clear $40, $06, $FD00, $22AE

bgmap_batGrassTopLeft:
    incbin "art/bg_mappings/boards/grass/top_left.bgbyte"
bgmap_batGrassTopRight:
    incbin "art/bg_mappings/boards/grass/top_right.bgbyte"
bgmap_batGrassBottomLeft:
    incbin "art/bg_mappings/boards/grass/bottom_left.bgbyte"
bgmap_batGrassBottomRight:
    incbin "art/bg_mappings/boards/grass/bottom_right.bgbyte"
bgmap_batBakGrassTopLeft:
    incbin "art/bg_mappings/boards/grass/backdrop_top_left.bgbyte"
bgmap_batBakGrassTopRight:
    incbin "art/bg_mappings/boards/grass/backdrop_top_right.bgbyte"
bgmap_batBakGrassBottomLeft:
    incbin "art/bg_mappings/boards/grass/backdrop_bottom_left.bgbyte"
bgmap_batBakGrassBottomRight:
    incbin "art/bg_mappings/boards/grass/backdrop_bottom_right.bgbyte"
bgmap_cutGrassTreesTopLeft:
    incbin "art/bg_mappings/cutscene/grass/trees_top_left.bgbyte"
bgmap_cutGrassTreesTopRight:
    incbin "art/bg_mappings/cutscene/grass/trees_top_right.bgbyte"
bgmap_cutGrassTreesBottomLeft:
    incbin "art/bg_mappings/cutscene/grass/trees_bottom_left.bgbyte"
bgmap_cutGrassTreesBottomRight:
    incbin "art/bg_mappings/cutscene/grass/trees_bottom_right.bgbyte"
bgmap_cutGrassFarLeft:
    incbin "art/bg_mappings/cutscene/grass/grass_far_left.bgword"
bgmap_cutGrassFarRight:
    incbin "art/bg_mappings/cutscene/grass/grass_far_right.bgword"
bgmap_cutGrassLeft:
    incbin "art/bg_mappings/cutscene/grass/grass_left.bgbyte"
bgmap_cutGrassRight:
    incbin "art/bg_mappings/cutscene/grass/grass_right.bgbyte"
bgmap_cutGrassCloud1:
    incbin "art/bg_mappings/cutscene/grass/cloud1.bgbyte"
bgmap_cutGrassCloud2:
    incbin "art/bg_mappings/cutscene/grass/cloud2.bgbyte"
bgmap_cutGrassCloud3:
    incbin "art/bg_mappings/cutscene/grass/cloud3.bgbyte"
bgmap_cutRuinsGroundRight:
    incbin "art/bg_mappings/cutscene/ruins/ground_right.bgbyte"
bgmap_cutRuinsGroundLeft:
    incbin "art/bg_mappings/cutscene/ruins/ground_left.bgbyte"
bgmap_cutRuinsSkyRight:
    incbin "art/bg_mappings/cutscene/ruins/sky_right.bgbyte"
bgmap_cutRuinsSkyLeft:
    incbin "art/bg_mappings/cutscene/ruins/sky_left.bgbyte"
bgmap_cutRuinsMountainLeft:
    incbin "art/bg_mappings/cutscene/ruins/mountain_left.bgbyte"
bgmap_cutRuinsMountainRight:
    incbin "art/bg_mappings/cutscene/ruins/mountain_right.bgbyte"
bgmap_cutRuinsUnk3:
    incbin "art/bg_mappings/cutscene/ruins/unknown3.bgword"
bgmap_cutHellGroundRight:
    incbin "art/bg_mappings/cutscene/hell/ground_right.bgbyte"
bgmap_cutHellGroundLeft:
    incbin "art/bg_mappings/cutscene/hell/ground_left.bgbyte"
bgmap_cutHellSkyRight:
    incbin "art/bg_mappings/cutscene/hell/sky_right.bgbyte"
bgmap_cutHellSkyLeft:
    incbin "art/bg_mappings/cutscene/hell/sky_left.bgbyte"
bgmap_gameoverTopLeft:
    incbin "art/bg_mappings/gameover/top_left.bgbyte"
bgmap_gameoverTopRight:
    incbin "art/bg_mappings/gameover/top_right.bgbyte"
bgmap_gameoverBottomLeft:
    incbin "art/bg_mappings/gameover/bottom_left.bgbyte"
bgmap_gameoverBottomRight:
    incbin "art/bg_mappings/gameover/bottom_right.bgbyte"
bgmap_recordLeft:
    incbin "art/bg_mappings/record/left.bgbyte"
bgmap_recordRight:
    incbin "art/bg_mappings/record/right.bgbyte"
bgmap_recordUnk1:
    incbin "art/bg_mappings/record/unknown.bgbyte"
bgmap_endingArleTop:
    incbin "art/bg_mappings/ending/arle_top.bgbyte"
bgmap_endingArleBottom:
    incbin "art/bg_mappings/ending/arle_bottom.bgbyte"
bgmap_endingSunsetScroll:
    incbin "art/bg_mappings/ending/sunset_scroll.bgbyte"
bgmap_endingCloudScroll:
    incbin "art/bg_mappings/ending/cloud_scroll.bgbyte"
bgmap_endingSunset:
    incbin "art/bg_mappings/ending/sunset.bgbyte"
bgmap_endingGround:
    incbin "art/bg_mappings/ending/ground.bgbyte"
bgmap_endingSunsetNight:
    incbin "art/bg_mappings/ending/sunset_night.bgbyte"
bgmap_titleBG1:
    incbin "art/bg_mappings/title/background1.bgword"
bgmap_titleBG2:
    incbin "art/bg_mappings/title/background2.bgword"
bgmap_titlePu1:
    incbin "art/bg_mappings/title/first_pu.bgbyte"
bgmap_titleYo1:
    incbin "art/bg_mappings/title/first_yo.bgbyte"
bgmap_titlePu2:
    incbin "art/bg_mappings/title/second_pu.bgbyte"
bgmap_titleYo2:
    incbin "art/bg_mappings/title/second_yo.bgbyte"
bgmap_batCabinTopLeft:
    incbin "art/bg_mappings/boards/cabin/top_left.bgbyte"
bgmap_batCabinTopRight:
    incbin "art/bg_mappings/boards/cabin/top_right.bgbyte"
bgmap_batCabinBottomLeft:
    incbin "art/bg_mappings/boards/cabin/bottom_left.bgbyte"
bgmap_batCabinBottomRight:
    incbin "art/bg_mappings/boards/cabin/bottom_right.bgbyte"
bgmap_batBakCabinTopLeft:
    incbin "art/bg_mappings/boards/cabin/backdrop_top_left.bgbyte"
bgmap_batBakCabinTopRight:
    incbin "art/bg_mappings/boards/cabin/backdrop_top_right.bgbyte"
bgmap_batBakCabinBottomLeft:
    incbin "art/bg_mappings/boards/cabin/backdrop_bottom_left.bgbyte"
bgmap_batBakCabinBottomRight:
    incbin "art/bg_mappings/boards/cabin/backdrop_bottom_right.bgbyte"
bgmap_batStoneLeft:
    incbin "art/bg_mappings/boards/ruins/left.bgbyte"
bgmap_batStoneRight:
    incbin "art/bg_mappings/boards/ruins/right.bgbyte"
bgmap_batBakStoneLeft:
    incbin "art/bg_mappings/boards/ruins/backdrop_left.bgbyte"
bgmap_batBakStoneRight:
    incbin "art/bg_mappings/boards/ruins/backdrop_right.bgbyte"
bgmap_batPuzzleTopLeft:
    incbin "art/bg_mappings/boards/puzzle/top_left.bgpalm"
bgmap_batPalPuzzleTopLeft:
    incbin "art/bg_mappings/boards/puzzle/top_left.bgpalp"
bgmap_batPuzzleTopRight:
    incbin "art/bg_mappings/boards/puzzle/top_right.bgpalm"
bgmap_batPalPuzzleTopRight:
    incbin "art/bg_mappings/boards/puzzle/top_right.bgpalp"
bgmap_batPuzzleBottomLeft:
    incbin "art/bg_mappings/boards/puzzle/bottom_left.bgpalm"
bgmap_batPalPuzzleBottomLeft:
    incbin "art/bg_mappings/boards/puzzle/bottom_left.bgpalp"
bgmap_batPuzzleBottomRight:
    incbin "art/bg_mappings/boards/puzzle/bottom_right.bgpalm"
bgmap_batPalPuzzleBottomRight:
    incbin "art/bg_mappings/boards/puzzle/bottom_right.bgpalp"
bgmap_batBakPuzzleTopLeft:
    incbin "art/bg_mappings/boards/puzzle/backdrop_top_left.bgbyte"
bgmap_batBakPuzzleTopRight:
    incbin "art/bg_mappings/boards/puzzle/backdrop_top_right.bgbyte"
bgmap_batBakPuzzleBottomLeft:
    incbin "art/bg_mappings/boards/puzzle/backdrop_bottom_left.bgbyte"
bgmap_batBakPuzzleBottomRight:
    incbin "art/bg_mappings/boards/puzzle/backdrop_bottom_right.bgbyte"
bgmap_segaLogo:
    incbin "art/bg_mappings/sega/logo.bgbyte"
bgmap_demoPatch1:
    incbin "art/bg_mappings/tutorial/patch1.bgbyte"
bgmap_demoPatch2:
    incbin "art/bg_mappings/tutorial/patch2.bgbyte"
bgmap_menuMain:
    incbin "art/bg_mappings/menu/main_menu.bgbyte"
bgmap_menu1PlayerHighlight:
    incbin "art/bg_mappings/menu/1player_highlight.bgbyte"
bgmap_menu1Player:
    incbin "art/bg_mappings/menu/1player.bgbyte"
bgmap_menu2PlayerHighlight:
    incbin "art/bg_mappings/menu/2player_highlight.bgbyte"
bgmap_menu2Player:
    incbin "art/bg_mappings/menu/2player.bgbyte"
bgmap_menuEndlessHighlight:
    incbin "art/bg_mappings/menu/endless_highlight.bgbyte"
bgmap_menuEndless:
    incbin "art/bg_mappings/menu/endless.bgbyte"
bgmap_menuOptionsionsHighlight:
    incbin "art/bg_mappings/menu/options_highlight.bgbyte"
bgmap_menuOptions:
    incbin "art/bg_mappings/menu/options.bgbyte"
bgmap_menuDifficultyLeft:
    incbin "art/bg_mappings/menu/difficulty_left.bgbyte"
bgmap_menuDifficultyRight:
    incbin "art/bg_mappings/menu/difficulty_right.bgbyte"
; ---------- File End: game/bg_mappings.asm ----------

; ---------- File Start: game/options.asm ----------
; This file contains all of the code related to the sound test, options, and input test menus,
; as well as the checksum screen.
SoundTest_Init:
	BSR.w	SoundTest_LoadArleSprite
	BSR.w	SoundTest_LoadSatanSprite
	MOVE.b	#$FF, rRunningOptionsMenuCode
	MOVE.w	#$E000, D5
	MOVE.w	#$001B, D0
	MOVE.w	#$406C, D6
@OuterLoop:
	ORI	#$0700, SR
	JSR	Video_SetVRAMAddressWrite
	ADDI.w	#$0080, D5
	MOVE.w	#$0027, D1
@InnerLoop:
	MOVE.w	D6, vdpData1
	EORI.b	#1, D6
	DBF	D1, @InnerLoop
	ANDI	#$F8FF, SR
	EORI.b	#2, D6
	DBF	D0, @OuterLoop
	BRA.w	Option_InitVramPlane

SoundTest_InitObj:
	LEA	SoundTest_Update, A1
	JMP	ObjSys_InitObjWithFunc

BadCheck_Init:
	move.b #-1, (rRunningOptionsMenuCode).l
	move.w #$E000, D5
	move.w #$1B, D0
	move.w #$406C, D6
@OuterLoop:
	ori #$700, SR
	jsr	Video_SetVRAMAddressWrite
	addi.w #$80, D5
	move.w #$27, D1
@InnerLoop:
	move.w D6, (vdpData1).l
	eori.b #1, D6
	dbf D1, @InnerLoop
	andi #$F8FF, SR
	eori.b #2, D6
	dbf D0, @OuterLoop
	bsr.w Option_InitVramPlane
	move.w #$5A0, D5
	move.w #$A500, D6
	lea (@Warning).l, A1
	bsr.w loc_0001D6C4
	move.w #$796, D5
	move.w #$8500, D6
	lea (@ChecksumIsWrong).l, A1
	bsr.w loc_0001D6C4
	lea (BadCheck_Update).l, A1
	jmp ObjSys_InitObjWithFunc
@Warning:
	soundTestText "WARNING."
	even
@ChecksumIsWrong:
	soundTestText "CHECKSUM IS WRONG."
	even

BadCheck_Update:
	move.w #$100, D0
	jsr ObjSys_SetObjNextOpTimer
	jsr loc_00002B40
	clr.b (rRunningOptionsMenuCode).l
	clr.b (rBytecode_StopRun).l
	jmp ObjSys_DeleteObjectA0
	
SoundTest_LoadSatanSprite:
	LEA	@SatanInit, A1
	JMP	ObjSys_InitObjWithFunc
@SatanInit:
	MOVE.w	#$0180, Obj_XPos(A0)
	MOVE.w	#$0140, Obj_YPos(A0)
	MOVE.b	#$80, $6(A0)
	MOVE.b	#SprMapID_Satan, Obj_SprMap(A0)
	MOVE.l	#@Anim_Satan, $32(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	JSR	ObjSys_UpdateObjAnim
	JMP	ObjSys_UpdatePosInterpMove
@Anim_Satan:
	dc.b	$F1
	dc.b	$00 
	dc.b	$08
	dc.b	$08 
	dc.b	$0C
	dc.b	$00 
	dc.b	$08
	dc.b	$08 
	dc.b	$FF
	dc.b	$00 
	dc.l	@Anim_Satan
	
SoundTest_LoadArleSprite:
	LEA	@ArleInit, A1
	JMP	ObjSys_InitObjWithFunc
@ArleInit:
	MOVE.w	#$00C0, Obj_XPos(A0)
	MOVE.w	#$0140, Obj_YPos(A0)
	MOVE.b	#$80, $6(A0)
	MOVE.b	#SprMapID_Arle, Obj_SprMap(A0)
	MOVE.l	#@Anim_Arle, $32(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	JSR	ObjSys_UpdateObjAnim
	JMP	ObjSys_UpdatePosInterpMove
@Anim_Arle:
	dc.b	$F1
	dc.b	$00 
	dc.b	$40
	dc.b	$14 
	dc.b	$F1
	dc.b	$00 
	dc.b	$20
	dc.b	$05 
	dc.b	$F1
	dc.b	$00 
	dc.b	$08
	dc.b	$13 
	dc.b	$FF
	dc.b	$00 
	dc.l	@Anim_Arle
	
SoundTest_Update:
	MOVE.w	#2, D0
	BSR.w	Option_DrawStaticText
	BSR.w	SoundTest_DrawIdNames
	JSR	ObjSys_UpdateObjNextOpTimer
	BSR.w	SoundTest_DrawIds
	
	MOVE.b	rPad1Press, D0
	OR.b	rPad2Press, D0
	BTST.l	#btn_Start, D0
	BNE.w	SoundTest_Exit
	BTST.l	#btn_B, D0
	BNE.w	SoundTest_ClearAudio
	ANDI.b	#(btnb_A|btnb_C), D0
	BNE.w	SoundTest_PlayId
	MOVE.b	$00FF110C, D0
	OR.b	$00FF1112, D0
	BTST.l	#btn_Up, D0
	BNE.w	SoundTest_MoveCursorUp
	BTST.l	#btn_Down, D0
	BNE.w	SoundTest_MoveCursorDown
	BTST.l	#btn_Right, D0
	BNE.w	SoundTest_MoveCursorRight
	BTST.l	#btn_Left, D0
	BNE.w	SoundTest_MoveCursorLeft
	RTS
	
SoundTest_MoveCursorUp:
	SUBQ.w	#1, $26(A0)
	BCC.w	@CursorNoWrap
	MOVE.w	#5, $26(A0)
@CursorNoWrap:
	RTS
	
SoundTest_MoveCursorDown:
	ADDQ.w	#1, $26(A0)
	CMPI.w	#6, $26(A0)
	BCS.w	@CursorNoWrap
	MOVE.w	#0, $26(A0)
@CursorNoWrap:
	RTS

SoundTest_ClearAudio:
	JMP	SndDrv_PlayClearEffect

SoundTest_Exit:
	CLR.b	rRunningOptionsMenuCode
	CLR.b	rBytecode_StopRun
	JMP	ObjSys_DeleteObjectA0

SoundTest_MoveCursorRight:
	MOVE.b	#1, D1
	BRA.w	SoundTest_MoveCursorLR
SoundTest_MoveCursorLeft:
	MOVE.b	#$FF, D1
	
SoundTest_MoveCursorLR:
	MOVE.w	$26(A0), D0
	LEA	@IdLimits, A1
	MOVE.b	(A1,D0.w), D2
	ADD.b	D1, $12(A0,D0.w)
	BPL.w	@NoNegativeWrap
	MOVE.b	D2, $12(A0,D0.w)
	SUBQ.b	#1, $12(A0,D0.w)
@NoNegativeWrap:
	MOVE.b	$12(A0,D0.w), D3
	CMP.b	D2, D3
	BCS.w	@NoPositiveWrap
	CLR.b	$12(A0,D0.w)
@NoPositiveWrap:
	SUBQ.w	#3, D0
	BCS.w	@IsSoundEffect
	BSR.w	SoundTest_UpdateSelNotEffect
@IsSoundEffect:
	RTS
@IdLimits:
	dc.b	$5F, $5F, $5F, $11, $03, $07 

SoundTest_PlayId:
	MOVE.w	$26(A0), D1
	CLR.w	D0
	MOVE.b	$12(A0,D1.w), D0
	SUBQ.w	#3, D1
	BCC.w	@NotSoundEffect
	ADDI.b	#$20, D0
	JMP	SndDrv_QueueSoundEffect
@NotSoundEffect:
	LSL.w	#2, D0
	LSL.w	#2, D1
	LEA	SoundTest_TextTbl, A1
	MOVEA.l	(A1,D1.w), A2
	MOVEA.l	(A2,D0.w), A1
	MOVE.b	(A1), D0
	MOVEA.l	@LookupCursorJmp(PC,D1.w), A1
	JMP	(A1)
@LookupCursorJmp:
	dc.l	@IsSelMusic
	dc.l	@IsSelVoice
	dc.l	@IsSelCmd
@IsSelMusic:
	JSR	SndDrv_PlayClearEffect
	JMP	SndDrv_PlayMusicId
@IsSelVoice:
	JMP	SndDrv_PlayVoiceAlways
@IsSelCmd:
	CLR.w	D0
	MOVE.b	$17(A0), D0
	MULU.w	#3, D0
	MOVE.b	@EffectTable(PC,D0.w), rZ80CurCmdMain
	MOVE.b	@EffectTable+1(PC,D0.w), rZ80CurCmdP1
	MOVE.b	@EffectTable+2(PC,D0.w), rZ80CurCmdP2
	CMPI.b	#effID_FadeIn, rZ80CurCmdMain
	BNE.w	@IsNotFadeIn
	CLR.w	D0
	MOVE.b	$15(A0), D0
	LSL.w	#2, D0
	LEA	SoundTest_MusicTxtTbl, A1
	MOVEA.l	(A1,D0.w), A2
	MOVE.b	(A2), rZ80CurCmdP2
@IsNotFadeIn:
	RTS
@EffectTable:
	dc.b	effID_AllClear, $00, $00
	dc.b	effID_Clear, $00, $00
	dc.b 	effID_FadeOut, $80, $00
	dc.b	effID_FadeIn, $80, $03
	dc.b	effID_Rebirth, $80, $00
	dc.b	effID_PauseOn, $00, $00
	dc.b	effID_PauseOff, $00, $00 
	even
	
SoundTest_DrawIdNames:
	MOVE.w	#2, D0
@Loop:
	MOVEM.l	D0, -(A7)
	BSR.w	SoundTest_UpdateSelNotEffect
	MOVEM.l	(A7)+, D0
	DBF	D0, @Loop
	RTS
	
SoundTest_UpdateSelNotEffect:
	MOVE.w	D0, D1
	LSL.w	#2, D1
	LEA	SoundTest_TextTbl, A1
	MOVEA.l	(A1,D1.w), A2
	MOVE.b	$15(A0,D0.w), D1
	LSL.w	#2, D1
	MOVEA.l	(A2,D1.w), A1
	ADDQ.l	#1, A1
	MOVE.w	D0, D5
	LSL.w	#8, D5
	ADDI.w	#$05A4, D5
	MOVE.w	#$A500, D6
	MOVEM.l	A1/D6/D5, -(A7)
	LEA	loc_0001D076, A1
	BSR.w	loc_0001D6C4
	MOVEM.l	(A7)+, D5/D6/A1
	BRA.w	loc_0001D6C4
loc_0001D076:
	dc.b	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $FF, $00 
	
SoundTest_DrawIds:
	MOVE.w	#5, D0
	MOVE.w	#$079C, D5
	MOVE.w	#$A500, D6
@Loop:
	BSR.w	SoundTest_GetTextAndId
	BSR.w	SoundTest_DrawId
	MOVEM.l	D5/D4/D3/D2/D1/D0, -(A7)
	BSR.w	loc_0001D6C4
	MOVEM.l	(A7)+, D0/D1/D2/D3/D4/D5
	SUBI.w	#$0100, D5
	DBF	D0, @Loop
	RTS
	
SoundTest_DrawId:
	LEA	$00FF1894, A1
	CLR.w	(A1)
	MOVE.b	#$FF, $2(A1)
	CMP.w	$26(A0), D0
	BNE.w	@NotCurrentSel
	BTST.b	#0, $00FF05C7  ; Some type of global animation timer?
	BEQ.w	@NotCurrentSel
	RTS
@NotCurrentSel:
	MOVE.b	D1, D2
	LSR.b	#4, D2
	ANDI.b	#$0F, D1
	ADDQ.b	#1, D2
	ADDQ.b	#1, D1
	MOVE.b	D2, $0(A1)
	MOVE.b	D1, $1(A1)
	MOVE.b	#$FF, $2(A1)
	RTS
	
SoundTest_GetTextAndId:
	CLR.w	D1
	MOVE.b	$12(A0,D0.w), D1
	MOVE.w	D0, D2
	SUBQ.w	#3, D2
	BCS.w	@IsSoundEffect
	LSL.w	#2, D2
	LEA	SoundTest_TextTbl, A1
	MOVEA.l	(A1,D2.w), A2
	LSL.w	#2, D1
	MOVEA.l	(A2,D1.w), A1
	MOVE.b	(A1)+, D1
	RTS
@IsSoundEffect:
	ADDI.b	#$20, D1
	RTS
	
SoundTest_TextTbl:
	dc.l	SoundTest_MusicTxtTbl
	dc.l	SoundTest_VoiceTxtTbl
	dc.l	SoundTest_CommandTxtTbl
SoundTest_MusicTxtTbl:
	dc.l	@final
	dc.l	@theme
	dc.l	@baroque
	dc.l	@cooking
	dc.l	@morning
	dc.l	@toy
	dc.l	@sorrow
	dc.l	@sticker
	dc.l	@sunset
	dc.l	@rejection
	dc.l	@memories
	dc.l	@harpy
	dc.l	@warning
	dc.l	@satan
	dc.l	@brave
	dc.l	@ondo
	dc.l	@victory

@final:
	dc.b	musID_Final 
	soundTestText "FINAL OF PUYOPUYO"
	even
@theme:
	dc.b	musID_Theme
	soundTestText "THEME OF PUYOPUYO"
	even
@baroque:
	dc.b	musID_Baroque
	soundTestText "BAROQUE OF PUYOPUYO"
	even
@cooking:
	dc.b	musID_Cooking 
	soundTestText "COOKING OF PUYOPUYO"
	even
@morning:
	dc.b	musID_Morning 
	soundTestText "MORNING OF PUYOPUYO"
	even
@toy:
	dc.b	musID_Toy 
	soundTestText "TOY OF PUYOPUYO"
	even
@sorrow:
	dc.b	musID_Sorrow 
	soundTestText "SORROW OF PUYOPUYO"
	even
@sticker:
	dc.b	musID_Sticker 
	soundTestText "STICKER OF PUYOPUYO"
	even
@sunset:
	dc.b	musID_Sunset
	soundTestText "SUNSET OF PUYOPUYO"
	even
@rejection:
	dc.b	musID_Rejection
	soundTestText "REJECTION OF PUYOPUYO"
	even
@memories:
	dc.b	musID_Memories 
	soundTestText "MEMORIES OF PUYOPUYO"
	even
@harpy:
	dc.b	musID_HarpyTheme 
	soundTestText "THEME FOR HARPY"
	even
@warning:
	dc.b	musID_Warning 
	soundTestText "WARNING OF PUYOPUYO"
	even
@satan:
	dc.b	musID_SatanTheme 
	soundTestText "THEME FOR SATAN"
	even
@brave:
	dc.b	musID_Brave 
	soundTestText "BRAVE OF PUYOPUYO"
	even
@ondo:
	dc.b	musID_Ondo 
	soundTestText "ONDO OF PUYOPUYO"
	even
@victory:
	dc.b	musID_Victory 
	soundTestText "VICTORY OF PUYOPUYO"
	even
	
SoundTest_VoiceTxtTbl:
	dc.l	@fire
	dc.l	@yattana
	dc.l	@puyopuyo
@yattana:
	dc.b    pcmID_Yattana
	soundTestText "YATTANA"
	even
@fire:
	dc.b    pcmID_Fire
	soundTestText "FIRE"
	even
@puyopuyo:
	dc.b    pcmID_PuyoPuyo
	soundTestText "PUYO PUYO"
	even
	
SoundTest_CommandTxtTbl:
	dc.l	@all_clear
	dc.l	@clear
	dc.l	@fade_out
	dc.l	@fade_in
	dc.l	@rebirth
	dc.l	@pause_on
	dc.l	@pause_off
@all_clear:
	dc.b	effID_AllClear 
	soundTestText "ALL CLEAR"
	even
@clear:
	dc.b	effID_Clear 
	soundTestText "CLEAR"
	even
@fade_out:
	dc.b	effID_FadeOut
	soundTestText "FADE OUT"
	even
@fade_in:
	dc.b	effID_FadeIn
	soundTestText "FADE IN"
	even
@rebirth:
	dc.b	effID_Rebirth
	soundTestText "REBIRTH"
	even
@pause_on:
	dc.b	effID_PauseOn 
	soundTestText "PAUSE ON"
	even
@pause_off:
	dc.b	effID_PauseOff 
	soundTestText "PAUSE OFF"
	even
	
Option_Init:
	MOVE.b	#$FF, rRunningOptionsMenuCode
	MOVE.w	#$E000, D5
	MOVE.w	#$001B, D0
	MOVE.w	#$006C, D6
@OuterLoop:
	ORI	#$0700, SR
	JSR	Video_SetVRAMAddressWrite
	ADDI.w	#$0080, D5
	MOVE.w	#$0027, D1
@InnerLoop:
	MOVE.w	D6, vdpData1
	EORI.b	#1, D6
	DBF	D1, @InnerLoop
	ANDI	#$F8FF, SR
	EORI.b	#2, D6
	DBF	D0, @OuterLoop
	BRA.w	Option_InitVramPlane

Option_InitObj:
	LEA	Option_Update, A1
	JSR	ObjSys_InitObjWithFunc
	BCC.w	@Ret
	RTS
@Ret:
	RTS

Option_InitVramPlane:
	LEA	rPlaneBuffer, A1
	MOVE.w	#$06FF, D0
@Loop:
	MOVE.w	#$8500, (A1)+
	DBF	D0, @Loop
	RTS
	
Option_DrawStaticText:
	MOVEM.l	D0, -(A7)
	BSR.b	Option_InitVramPlane
	MOVEM.l	(A7)+, D0
	LSL.w	#2, D0
	MOVEA.l	Option_StaticTxtLookup(PC,D0.w), A2
	MOVE.w	(A2)+, D0
	SUBQ.w	#1, D0
@Loop:
	MOVEA.l	(A2)+, A1
	MOVEM.l	A2/D0, -(A7)
	MOVE.w	(A1)+, D5
	MOVE.w	(A1)+, D6
	BSR.w	loc_0001D6C4
	MOVEM.l	(A7)+, D0/A2
	DBF	D0, @Loop
	RTS
Option_StaticTxtLookup:
	dc.l	Option_TxtTbl
	dc.l	InputTest_TxtTbl
	dc.l	SoundTest_TxtTbl
	
InputTest_TxtTbl:
	dc.w	$000C 
	dc.l	@input_test
	dc.l	@press_start
	dc.l	@pad1_pad2
	dc.l	@button_a
	dc.l	@button_b
	dc.l	@button_c
	dc.l	@button_up
	dc.l	@button_down
	dc.l	@button_right
	dc.l	@button_left
	dc.l	@to_exit
	dc.l	@button_start
@input_test:
	dc.l	$009EA500
	soundTestText "INPUT TEST"
	even
@press_start:
	dc.l	$0B86A500
	soundTestText "PRESS START BUTTON AND A BUTTON"
	even
@to_exit:
	dc.l	$0CBAA500
	soundTestText "TO EXIT"
	even
@pad1_pad2:
	dc.l	$0222E500
	soundTestText "PAD1  PAD2"
	even
@button_start:
	dc.l	$03168500
	soundTestText "START:"
	even
@button_a:
	dc.l	$04108500
	soundTestText "BUTTON A:"
	even
@button_b:
	dc.l 	$05108500
	soundTestText "BUTTON B:"
	even
@button_c:
	dc.l	$06108500
	soundTestText "BUTTON C:"
	even
@button_up:
	dc.l	$07908500
	soundTestText "      UP:"
	even
@button_down:
	dc.l	$08908500
	soundTestText "    DOWN:"
	even
@button_right:
	dc.l	$09908500
	soundTestText "   RIGHT:"
	even
@button_left:
	dc.l	$0A908500
	soundTestText "    LEFT:"
	even
	
Option_TxtTbl:
	dc.w 	$000A
	dc.l	@option_mode
	dc.l	@p1_p2
	dc.l	@press_start
	dc.l	@button_a
	dc.l	@button_b
	dc.l	@button_c
	dc.l	@vs_com
	dc.l	@1p_vs_2p
	dc.l	@sampling
	dc.l	@key_assignment
@option_mode:
	dc.l	$009CA500
	soundTestText "OPTION MODE"
	even
@p1_p2:
	dc.l	$0312E500
	soundTestText "PLAYER-1       PLAYER-2"
	even
@press_start:
	dc.l	$0C8EA500
	soundTestText "PRESS START BUTTON TO EXIT"
	even
@button_a:
	dc.l	$040CE500
	soundTestText "A:              A:"
	even
@button_b:
	dc.l	$050CE500
	soundTestText "B:              B:"
	even
@button_c:
	dc.l	$060CE500
	soundTestText "C:              C:"
	even
@vs_com:
	dc.l	$078CE500
	soundTestText "VS.COM LEVEL   :"
	even
@1p_vs_2p:
	dc.l 	$088CE500
	soundTestText "1P VS.2P MODE  :"
	even
@sampling:
	dc.l	$098CE500
	soundTestText "SAMPLING       :"
	even
@key_assignment:
	dc.l 	$021AE500
	soundTestText "KEY ASSIGNMENT"
	even
	
SoundTest_TxtTbl:
	dc.w 	$0008
	dc.l	@sound_track
	dc.l	@press_start
	dc.l	@se1
	dc.l	@se2
	dc.l	@se3
	dc.l	@bgm
	dc.l	@voice
	dc.l	@command
@sound_track:
	dc.b	$01, $1A, $85, $00
	soundTestText "SOUND  TRACK"
	even
@press_start:
	dc.b	$0C, $8E, $E5, $00
	soundTestText "PRESS START BUTTON TO EXIT"
	even
@se1:
	dc.b	$02, $92, $E5, $00
	soundTestText "SE1:"
	even
@se2:
	dc.b	$03, $92, $E5, $00
	soundTestText "SE2:"
	even
@se3:
	dc.b	$04, $92, $E5, $00
	soundTestText "SE3:"
	even
@bgm:
	dc.b	$05, $92, $E5, $00
	soundTestText "BGM:"
	even
@voice:
	dc.b	$06, $8E, $E5, $00
	soundTestText "VOICE:"
	even
@command:
	dc.b	$07, $8A, $E5, $00
	soundTestText "COMMAND:"
	even	
	
loc_0001D69A:
	MOVE.w	#$8500, D6
	BTST.b	#0, $26(A0)
	BEQ.w	loc_0001D6C4
	CMP.b	$2C(A0), D0
	BNE.w	loc_0001D6B8
	MOVE.w	#$C500, D6
	BRA.w	loc_0001D6C4
loc_0001D6B8:
	CMP.b	$2D(A0), D0
	BNE.w	loc_0001D6C4
	MOVE.w	#$A500, D6
loc_0001D6C4:
	LEA	$00FFC002, A2
loc_0001D6CA:
	MOVE.b	(A1)+, D0
	BMI.w	loc_0001D6E2
	LSL.b	#1, D0
	MOVE.b	D0, D6
	MOVE.w	D6, -$2(A2,D5.w)
	ADDQ.b	#1, D6
	MOVE.w	D6, $7E(A2,D5.w)
	ADDQ.w	#2, D5
	BRA.b	loc_0001D6CA
loc_0001D6E2:
	RTS
	
Option_Update:
	MOVE.w	#0, D0
	BSR.w	Option_DrawStaticText
	JSR	ObjSys_UpdateObjNextOpTimer
	ADDQ.b	#1, $26(A0)
	BSR.w	loc_0001D8E4
	MOVE.b	rPad1Press, D0
	OR.b	rPad2Press, D0
	BTST.l	#7, D0
	BNE.w	loc_0001D72C
	MOVE.w	#0, D0
	MOVE.b	rPad1Press, D1
	BSR.w	loc_0001D74A
	MOVE.w	#1, D0
	MOVE.b	rPad2Press, D1
	BSR.w	loc_0001D74A
	RTS
loc_0001D72C:
	BSR.w	loc_0001DC02
	CLR.b	rRunningOptionsMenuCode
	MOVE.b	#0, rBytecode_Ret
	CLR.b	rBytecode_StopRun
	JMP	ObjSys_DeleteObjectA0
loc_0001D74A:
	MOVE.b	#2, D2
	CMP.b	rCurMainPlayer, D0
	BNE.w	loc_0001D76A
	MOVE.b	#6, D2
	TST.w	rOption_SoundTestEnabled
	BEQ.w	loc_0001D76A
	MOVE.b	#7, D2
loc_0001D76A:
	BTST.l	#0, D1
	BNE.w	loc_0001D794
	BTST.l	#1, D1
	BNE.w	loc_0001D7AA
	BTST.l	#2, D1
	BNE.w	loc_0001D7C4
	BTST.l	#3, D1
	BNE.w	loc_0001D7CC
	ANDI.b	#$70, D1
	BNE.w	loc_0001D894
	RTS
loc_0001D794:
	SUBQ.b	#1, $2C(A0,D0.w)
	BCC.w	loc_0001D7A0
	MOVE.b	D2, $2C(A0,D0.w)
loc_0001D7A0:
	MOVE.b	#sfxID_ChangeSelection, D0
	JMP	SndDrv_QueueSoundEffect
loc_0001D7AA:
	ADDQ.b	#1, $2C(A0,D0.w)
	CMP.b	$2C(A0,D0.w), D2
	BCC.w	loc_0001D7BA
	CLR.b	$2C(A0,D0.w)
loc_0001D7BA:
	MOVE.b	#sfxID_ChangeSelection, D0
	JMP	SndDrv_QueueSoundEffect
loc_0001D7C4:
	MOVE.b	#$FF, D1
	BRA.w	loc_0001D7D0
loc_0001D7CC:
	MOVE.b	#1, D1
loc_0001D7D0:
	CLR.w	D2
	MOVE.b	$2C(A0,D0.w), D2
	LSL.w	#2, D2
	MOVEA.l	loc_0001D7DE(PC,D2.w), A1
	JMP	(A1)
loc_0001D7DE:
	dc.l	loc_0001D7FE
	dc.l	loc_0001D7FE
	dc.l	loc_0001D7FE
	dc.l	loc_0001D83C
	dc.l	loc_0001D860
	dc.l	loc_0001D880
	dc.l	loc_0001D892 
	dc.l	loc_0001D892 
loc_0001D7FE:
	LEA	rOption_Player1AButton, A1
	TST.w	D0
	BEQ.w	loc_0001D810
	LEA	rOption_Player2AButton, A1
loc_0001D810:
	CLR.w	D2
	MOVE.b	$2C(A0,D0.w), D2
	MOVE.b	(A1,D2.w), D3
	ADD.b	D1, D3
	BPL.w	loc_0001D824
	MOVE.b	#2, D3
loc_0001D824:
	CMPI.b	#3, D3
	BCS.w	loc_0001D82E
	CLR.b	D3
loc_0001D82E:
	MOVE.b	D3, (A1,D2.w)
	MOVE.b	#sfxID_2B, D0
	JMP	SndDrv_QueueSoundEffect
loc_0001D83C:
	ADDQ.b	#1, rOption_ComputerLevel
	TST.b	D1
	BMI.w	loc_0001D84E
	SUBQ.b	#2, rOption_ComputerLevel
loc_0001D84E:
	ANDI.b	#3, rOption_ComputerLevel
	MOVE.b	#sfxID_2B, D0
	JMP	SndDrv_QueueSoundEffect
loc_0001D860:
	MOVE.b	rOption_2PlayerMode, D2
	SUBQ.b	#1, D2
	ADD.b	D1, D2
	ANDI.b	#7, D2
	ADDQ.b	#1, D2
	MOVE.b	D2, rOption_2PlayerMode
	MOVE.b	#sfxID_2B, D0
	JMP	SndDrv_QueueSoundEffect
loc_0001D880:
	EORI.b	#$FF, rOption_VoicesEnabled
	MOVE.b	#sfxID_2B, D0
	JMP	SndDrv_QueueSoundEffect
loc_0001D892:
	RTS
loc_0001D894:
	CMPI.b	#6, $2C(A0,D0.w)
	BEQ.w	loc_0001D8AA
	CMPI.b	#7, $2C(A0,D0.w)
	BEQ.w	loc_0001D8BC
	RTS
loc_0001D8AA:
	MOVE.b	#sfxID_2B, D0
	JSR	SndDrv_QueueSoundEffect
	MOVEM.l	(A7)+, D0
	BRA.w	loc_0001DAFE
loc_0001D8BC:
	MOVE.b	#sfxID_2B, D0
	JSR	SndDrv_QueueSoundEffect
	MOVEM.l	(A7)+, D0
	CLR.b	rRunningOptionsMenuCode
	MOVE.b	#1, rBytecode_Ret
	CLR.b	rBytecode_StopRun
	JMP	ObjSys_DeleteObjectA0
loc_0001D8E4:
	BSR.w	loc_0001D902
	BSR.w	loc_0001D918
	BSR.w	loc_0001D9A4
	BSR.w	loc_0001D9EE
	BSR.w	loc_0001DA8C
	BSR.w	loc_0001DAB6
	BSR.w	loc_0001DAD4
	RTS
loc_0001D902:
	LEA	rOption_Player1AButton, A2
	MOVE.w	#$002C, D4
	MOVE.w	#$0410, D5
	MOVE.w	#$C500, D6
	BRA.w	loc_0001D92A
loc_0001D918:
	LEA	rOption_Player2AButton, A2
	MOVE.w	#$002D, D4
	MOVE.w	#$0430, D5
	MOVE.w	#$A500, D6
loc_0001D92A:
	BTST.b	#0, $26(A0)
	BNE.w	loc_0001D938
	MOVE.w	#$8500, D6
loc_0001D938:
	SWAP	D6
	MOVE.w	#$8500, D6
	CLR.w	D3
loc_0001D940:
	CLR.w	D0
	MOVE.b	(A2)+, D0
	LSL.w	#2, D0
	MOVEA.l	Option_KeyTxtTbl(PC,D0.w), A1
	MOVEM.l	A2/D6/D5/D4/D3, -(A7)
	CMP.b	(A0,D4.w), D3
	BNE.w	loc_0001D958
	SWAP	D6
loc_0001D958:
	BSR.w	loc_0001D6C4
	MOVEM.l	(A7)+, D3/D4/D5/D6/A2
	ADDI.w	#$0100, D5
	ADDQ.w	#1, D3
	CMPI.w	#3, D3
	BCS.b	loc_0001D940
	RTS

Option_KeyTxtTbl:
	dc.l	@NoUse
	dc.l	@TurnLeft
	dc.l	@TurnRight
@NoUse:
	soundTestText "NO USE      "
	even
@TurnLeft:
	soundTestText "TURN LEFT  <"
	even
@TurnRight:
	soundTestText "TURN RIGHT >"
	even
	
loc_0001D9A4:
	MOVE.w	#$07AE, D5
	CLR.w	D0
	MOVE.b	rOption_ComputerLevel, D0
	LSL.w	#2, D0
	MOVEA.l	@DiffTxtTbl(PC,D0.w), A1
	MOVE.b	#3, D0
	BRA.w	loc_0001D69A
@DiffTxtTbl:
	dc.l	@Hardest
	dc.l	@Hard
	dc.l	@Normal
	dc.l	@Easy
@Hardest:
	soundTestText "HARDEST"
	even
@Hard:
	soundTestText "HARD   "
	even
@Normal:
	soundTestText "NORMAL "
	even
@Easy:
	soundTestText "EASY   "
	even
	
loc_0001D9EE:
	MOVE.w	#$08AE, D5
	CLR.w	D0
	MOVE.b	rOption_2PlayerMode, D0
	BEQ.w	loc_0001DA00
	SUBQ.b	#1, D0
loc_0001DA00:
	LSL.w	#2, D0
	MOVEA.l	@NumberTxtTbl(PC,D0.w), A1
	MOVEM.l	D0, -(A7)
	MOVE.w	#$A500, D6
	BSR.w	loc_0001D6C4
	MOVEM.l	(A7)+, D0
	LEA	@GameMatch, A1
	TST.w	D0
	BEQ.w	@loc_0001DA28
	LEA	@GamesMatch, A1
@loc_0001DA28:
	MOVE.w	#$08B2, D5
	MOVE.b	#4, D0
	BRA.w	loc_0001D69A
@GameMatch:
	soundTestText "GAME MATCH "
	even
@GamesMatch:
	soundTestText "GAMES MATCH"
	even
	
@NumberTxtTbl:
	dc.l	@One
	dc.l	@Three
	dc.l	@Five
	dc.l	@Seven
	dc.l	@Nine
	dc.l	@Eleven
	dc.l	@Thirteen
	dc.l	@Fifteen
@One:
	soundTestText "1 "
	even
@Three:
	soundTestText "3 "
	even
@Five:
	soundTestText "5 "
	even
@Seven:
	soundTestText "7 "
	even
@Nine:
	soundTestText "9 "
	even
@Eleven:
	soundTestText "11"
	even
@Thirteen:
	soundTestText "13"
	even
@Fifteen:
	soundTestText "15"
	even
	
loc_0001DA8C:
	MOVE.b	#5, D0
	MOVE.w	#$09AE, D5
	LEA	@On, A1
	TST.b	rOption_VoicesEnabled
	BEQ.w	@VoicesEnabled
	LEA	@Off, A1
@VoicesEnabled:
	BRA.w	loc_0001D69A
@On:
	soundTestText "ON "
	even
@Off:
	soundTestText "OFF"
	even
	
loc_0001DAB6:
	MOVE.b	#6, D0
	MOVE.w	#$0A9E, D5
	LEA	@InputTest, A1
	BRA.w	loc_0001D69A
@InputTest:
	soundTestText "INPUT TEST"
	even
	
loc_0001DAD4:
	TST.w	rOption_SoundTestEnabled
	BEQ.w	@SoundTestNotEnabled
	MOVE.b	#7, D0
	MOVE.w	#$0B9E, D5
	LEA	@SoundTest, A1
	BSR.w	loc_0001D69A
@SoundTestNotEnabled:
	RTS
@SoundTest:
	soundTestText "SOUND TEST"
	even
	
loc_0001DAFE:
	MOVE.w	#1, D0
	BSR.w	Option_DrawStaticText
	JSR	ObjSys_UpdateObjNextOpTimer
	BSR.w	@loc_0001DB44
	MOVE.b	rPad1Held, D0
	ANDI.b	#$C0, D0
	EORI.b	#$C0, D0
	BEQ.w	@loc_0001DB36
	MOVE.b	rPad2Held, D0
	ANDI.b	#$C0, D0
	EORI.b	#$C0, D0
	BEQ.w	@loc_0001DB36
	RTS
@loc_0001DB36:
	MOVE.b	#sfxID_2B, D0
	JSR	SndDrv_QueueSoundEffect
	BRA.w	Option_Update
@loc_0001DB44:
	MOVE.b	rPad1Held, D0
	LSL.w	#8, D0
	MOVE.b	rPad2Held, D0
	LEA	loc_0001DB92, A2
	MOVE.w	#$000F, D1
@loc_0001DB5C:
	MOVE.w	(A2)+, D5
	LEA	@On, A1
	MOVE.w	#$E500, D6
	ROR.l	#1, D0
	BCS.w	@loc_0001DB78
	LEA	@Off, A1
	MOVE.w	#$C500, D6
@loc_0001DB78:
	MOVEM.l	A2/D1/D0, -(A7)
	BSR.w	loc_0001D6C4
	MOVEM.l	(A7)+, D0/D1/A2
	DBF	D1, @loc_0001DB5C
	RTS
@On:
	soundTestText "ON"
	even
@Off: ; This specific string uses special characters to display the 2 char wide off text.
	dc.b	$2C, $2D, $FF, $00 
loc_0001DB92:
	dc.b	$07, $B0, $08, $B0, $0A, $B0, $09, $B0, $05, $30, $06, $30, $04, $30, $03, $30, $07, $A4, $08, $A4, $0A, $A4, $09, $A4, $05, $24, $06, $24, $04, $24, $03, $24 

Check_GetChecksum:
	move.l #endOfRom-1, D0
	addq.l #1, D0
	lea ($200).w, A0
	sub.l A0, D0
	asr.l #1, D0
	move.w D0, D2
	subq.w #1, D2
	swap D0
	moveq #0, D1
@Loop:
	add.w (A0)+, D1
	dbf D2, @Loop
	dbf D0, @Loop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	move.b #0, (rBytecode_Ret).l
	cmp.w (checksum).w, D1
	beq.w @ChecksumPass
	move.b #$FF, (rBytecode_Ret).l
@ChecksumPass:
	move.w D1, (ram_calcChecksum).l
	rts
; ---------- File End: game/options.asm ----------

loc_0001DC02:
	MOVEM.l	A2/A1/D3/D2/D1/D0, -(A7)
	LEA	rOption_SoundTestEnabled, A1
	BSR.w	loc_0001DC32
	MOVE.w	D0, $00FFFC00
	LEA	$00FFFC00, A1
	LEA	$00FFFE00, A2
	MOVE.w	#$002B, D0
loc_0001DC26:
	MOVE.l	(A1)+, (A2)+
	DBF	D0, loc_0001DC26
	MOVEM.l	(A7)+, D0/D1/D2/D3/A1/A2
	RTS

loc_0001DC32:
	MOVE.w	#$0056, D2
	CLR.w	D0
loc_0001DC38:
	MOVE.w	(A1)+, D1
	EOR.w	D1, D0
	LSR.w	#1, D0
	BCC.w	loc_0001DC46
	EORI.w	#$8810, D0
loc_0001DC46:
	DBF	D2, loc_0001DC38
	ROR.w	#8, D0
	NOT.w	D0
	RTS

loc_0001DC50:
	BTST.b	#1, rCurGameMode
	BNE.w	loc_0001DCB4
	TST.b	$9(A0)
	LEA	loc_0001DCB6, A1
	JSR	ObjSys_InitObjWithFunc
	BCS.w	loc_0001DCB4
	MOVE.b	$0(A0), $0(A1)
	MOVE.l	A0, $2E(A1)
	MOVE.b	#2, $8(A1)
	MOVE.l	#loc_0001DDDA, $32(A1)
	TST.b	$2A(A0)
	BEQ.w	loc_0001DC98
	MOVE.l	#loc_0001DE08, $32(A1)
loc_0001DC98:
	MOVE.w	$00FF18CA, $A(A1)
	MOVE.w	$00FF18CC, $E(A1)
	MOVE.b	$9(A0), $2B(A1)
	MOVE.b	$2A(A0), $2A(A1)
loc_0001DCB4:
	RTS
loc_0001DCB6:
	TST.b	$2B(A0)
	BEQ.w	loc_0001DDAA
	JSR	ObjSys_UpdateObjAnim
	MOVE.b	#$83, $6(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.w	#8, D0
	JSR	ObjSys_SetObjNextOpTimer
	JSR	ObjSys_UpdateObjAnim
	JSR	ObjSys_UpdateObjNextOpTimer
	MOVE.w	#$001F, $26(A0)
	MOVE.l	#$01800000, D0
	JSR	loc_0000500C
	BEQ.w	loc_0001DD02
	MOVE.l	#vdpData1, D0
loc_0001DD02:
	SUB.l	$A(A0), D0
	ASR.l	#5, D0
	MOVE.l	D0, $12(A0)
	MOVE.l	#$00880000, D0
	SUB.l	$E(A0), D0
	ASR.l	#5, D0
	MOVE.l	D0, $16(A0)
	MOVE.w	$A(A0), $1E(A0)
	JSR	ObjSys_UpdateObjNextOpTimer
	JSR	ObjSys_UpdateObjAnim
	MOVE.w	$1E(A0), $A(A0)
	JSR	ObjSys_UpdatePosInterpMove
	MOVE.w	$A(A0), $1E(A0)
	MOVE.b	#$80, D0
	JSR	loc_0000500C
	BEQ.w	loc_0001DD52
	EORI.b	#$80, D0
loc_0001DD52:
	MOVE.b	$27(A0), D1
	LSL.b	#2, D1
	OR.b	D1, D0
	MOVE.w	#$6000, D1
	JSR	SignedSinWithMul
	SWAP	D2
	ADD.w	D2, $A(A0)
	SUBQ.w	#1, $26(A0)
	BCS.w	loc_0001DD74
	RTS
loc_0001DD74:
	MOVE.l	#loc_0001DDEC, $32(A0)
	TST.b	$2A(A0)
	BEQ.w	loc_0001DD8C
	MOVE.l	#loc_0001DE1A, $32(A0)
loc_0001DD8C:
	CLR.w	D1
	MOVE.b	$2B(A0), D1
	SUBQ.b	#1, D1
	CMPI.b	#4, D1
	BCS.w	loc_0001DDA0
	MOVE.b	#3, D1
loc_0001DDA0:
	MOVE.b	loc_0001DDD6(PC,D1.w), D0
	JSR	SndDrv_QueueSoundEffect
loc_0001DDAA:
	MOVEM.l	A0, -(A7)
	MOVEA.l	$2E(A0), A1
	MOVEA.l	A1, A0
	JSR	loc_00008432
	MOVEM.l	(A7)+, A0
	JSR	ObjSys_UpdateObjNextOpTimer
	JSR	ObjSys_UpdateObjAnim
	BCS.w	loc_0001DDD0
	RTS
loc_0001DDD0:
	JMP	ObjSys_DeleteObjectA0
loc_0001DDD6:
	dc.b	sfxID_ComboComplete1
	dc.b	sfxID_ComboComplete2
	dc.b	sfxID_ComboComplete3
	dc.b	sfxID_SatanThunder 
loc_0001DDDA:
	dc.b	$00
	dc.b	$07 
	dc.b	$00
	dc.b	$08 
	dc.b	$00
	dc.b	$09 
	dc.b	$01
	dc.b	$0A 
	dc.b	$00
	dc.b	$09 
	dc.b	$00
	dc.b	$08 
	dc.b	$FF
	dc.b	$00 
	dc.l	loc_0001DDDA
loc_0001DDEC:
	dc.b	$02
	dc.b	$07 
	dc.b	$01
	dc.b	$08 
	dc.b	$01
	dc.b	$09 
	dc.b	$06
	dc.b	$0A 
	dc.b	$00
	dc.b	$09 
	dc.b	$00
	dc.b	$08 
	dc.b	$00
	dc.b	$07 
	dc.b	$03
	dc.b	$0B 
	dc.b	$03
	dc.b	$0C 
	dc.b	$03
	dc.b	$0D 
	dc.b	$03
	dc.b	$0E 
	dc.b	$03
	dc.b	$0F 
	dc.b	$03
	dc.b	$10 
	dc.b	$FE
	dc.b	$00 
loc_0001DE08:
	dc.b	$00
	dc.b	$11 
	dc.b	$00
	dc.b	$12 
	dc.b	$00
	dc.b	$13 
	dc.b	$01
	dc.b	$14 
	dc.b	$00
	dc.b	$13 
	dc.b	$00
	dc.b	$12 
	dc.b	$FF
	dc.b	$00 
	dc.l	loc_0001DE08
loc_0001DE1A:
	dc.b	$02
	dc.b	$11 
	dc.b	$01
	dc.b	$12 
	dc.b	$01
	dc.b	$13 
	dc.b	$06
	dc.b	$14 
	dc.b	$00
	dc.b	$13 
	dc.b	$00
	dc.b	$12 
	dc.b	$00
	dc.b	$11 
	dc.b	$03
	dc.b	$15 
	dc.b	$03
	dc.b	$16 
	dc.b	$03
	dc.b	$17 
	dc.b	$03
	dc.b	$18 
	dc.b	$03
	dc.b	$19 
	dc.b	$03
	dc.b	$1A 
	dc.b	$FE
	dc.b	$00
	align $1000, $FF
	
; Beginning of data segment
art_grassBoard:
	incbin "art/art/boards/grass.puyo"
	even
	align $1000, $FF
art_bgGrass:
	incbin "art/art/cutscene/background/grass.puyo"
	even
	pad $26, $FF ; Todo: What is this aligned to?
art_bgRuins:
	incbin "art/art/cutscene/background/ruins.puyo"
	even
	align $10, $FF
art_bgSatan:
	incbin "art/art/cutscene/background/satan.puyo"
	even
	align $10, $FF
art_winLose:
	incbin "art/art/twoplayer/winlose.puyo"
	even
	align $100, $FF
art_cutsceneCharset_lessonEnd:
	incbin "art/art/cutscene/lesson_end/charset.puyo"
	even
	align $100, $FF
art_modeNames:
	incbin "art/art/record/modenames.puyo"
	even
	align $80, $FF
; Unreferenced japanese character set.  Oddly enough, it contains some 16x16 english characters, making it the only
; charset in the entire game to do so.
;art_unrefCharset:
	incbin "art/art/unused/unrefcharset.puyo"
	even
	align $100, $FF
art_gameOver:
	incbin "art/art/gameover/gameover.puyo"
	even
	align $100, $FF
art_recordScreen:
	incbin "art/art/record/recordscreen.puyo"
	even
	align $100, $FF
art_arleVictory:
	incbin "art/art/ending/arlevictory.puyo"
	even
	align $100, $FF

art_cutsceneArle:
	incbin "art/art/cutscene/general/arle.puyo"
	even
art_cutsceneDraco:
	incbin "art/art/cutscene/stage1/draco.puyo"
	even
art_cutsceneZombie:
	incbin "art/art/cutscene/stage7/zombie.puyo"
	even
art_cutsceneSuketoudara:
	incbin "art/art/cutscene/stage2/suketoudara.puyo"
	even
art_cutsceneZoh:
	incbin "art/art/cutscene/stage9/zoh.puyo"
	even
art_cutsceneSkeletonT:
	incbin "art/art/cutscene/lesson1/skeleton-t.puyo"
	even
art_cutsceneMinotauros:
	incbin "art/art/cutscene/stage11/minotauros.puyo"
	even
art_cutsceneSasoriman:
	incbin "art/art/cutscene/stage5/sasoriman.puyo"
	even
art_cutsceneWitch:
	incbin "art/art/cutscene/stage8/witch.puyo"
	even
art_cutsceneRulue:
	incbin "art/art/cutscene/stage12/rulue.puyo"
	even
;art_cutsceneHarpyDuplicate:
	incbin "art/art/cutscene/stage4/harpy.puyo"
	even
art_cutsceneSchezo:
	incbin "art/art/cutscene/stage10/schezo.puyo"
	even
art_cutsceneSatan:
	incbin "art/art/cutscene/stage13/satan.puyo"
	even
art_cutsceneNasu:
	incbin "art/art/cutscene/lesson2/nasu.puyo"
	even
art_cutsceneMummy:
	incbin "art/art/cutscene/lesson3/mummy.puyo"
	even
art_cutsceneSukiyapotes:
	incbin "art/art/cutscene/stage3/sukiyapotes.puyo"
	even
art_cutscenePanotty:
	incbin "art/art/cutscene/stage6/panotty.puyo"
	even
	align $100, $FF
	
; Cutscene Charsets
art_cutsceneCharset_stage1:
	incbin "art/art/cutscene/stage1/charset.puyo"
	even
art_cutsceneCharset_stage7:
	incbin "art/art/cutscene/stage7/charset.puyo"
	even
art_cutsceneCharset_stage2:
	incbin "art/art/cutscene/stage2/charset.puyo"
	even
art_cutsceneCharset_stage9:
	incbin "art/art/cutscene/stage9/charset.puyo"
	even
art_cutsceneCharset_lesson1:
	incbin "art/art/cutscene/lesson1/charset.puyo"
	even
art_cutsceneCharset_stage11:
	incbin "art/art/cutscene/stage11/charset.puyo"
	even
art_cutsceneCharset_stage5:
	incbin "art/art/cutscene/stage5/charset.puyo"
	even
art_cutsceneCharset_stage8:
	incbin "art/art/cutscene/stage8/charset.puyo"
	even
art_cutsceneCharset_stage12:
	incbin "art/art/cutscene/stage12/charset.puyo"
	even
art_cutsceneCharset_stage4:
	incbin "art/art/cutscene/stage4/charset.puyo"
	even
art_cutsceneCharset_stage10:
	incbin "art/art/cutscene/stage10/charset.puyo"
	even
art_cutsceneCharset_stage13:
	incbin "art/art/cutscene/stage13/charset.puyo"
	even
art_cutsceneCharset_lesson2:
	incbin "art/art/cutscene/lesson2/charset.puyo"
	even
art_cutsceneCharset_lesson3:
	incbin "art/art/cutscene/lesson3/charset.puyo"
	even
art_cutsceneCharset_stage3:
	incbin "art/art/cutscene/stage3/charset.puyo"
	even
art_cutsceneCharset_stage6:
	incbin "art/art/cutscene/stage6/charset.puyo"
	even
	align $100, $FF

; Portraits
art_portraitArle:
	incbin "art/art/portrait/arle.puyo"
	even
art_portraitDraco:
	incbin "art/art/portrait/draco.puyo"
	even
art_portraitZombie:
	incbin "art/art/portrait/zombie.puyo"
	even
art_portraitSuketoudara:
	incbin "art/art/portrait/suketoudara.puyo"
	even
art_portraitZohDaimaoh:
	incbin "art/art/portrait/zoh.puyo"
	even
art_portraitSkeletonT:
	incbin "art/art/portrait/skeleton-t.puyo"
	even
art_portraitMinotauros:
	incbin "art/art/portrait/minotauros.puyo"
	even
art_portraitSasoriman:
	incbin "art/art/portrait/sasoriman.puyo"
	even
art_portraitWitch:
	incbin "art/art/portrait/witch.puyo"
	even
art_portraitRulue:
	incbin "art/art/portrait/rulue.puyo"
	even
art_portraitHarpy:
	incbin "art/art/portrait/harpy.puyo"
	even
art_portraitSchezo:
	incbin "art/art/portrait/schezo.puyo"
	even
art_portraitSatan:
	incbin "art/art/portrait/satan.puyo"
	even
art_portraitNasu:
	incbin "art/art/portrait/nasu.puyo"
	even
art_portraitSukiyapotes:
	incbin "art/art/portrait/sukiyapotes.puyo"
	even
art_portraitMummy:
	incbin "art/art/portrait/mummy.puyo"
	even
art_portraitPanotty:
	incbin "art/art/portrait/panotty.puyo"
	even
	align $100, $FF
	
art_battleCharset:
	incbin "art/art/battle/charset.puyo"
	even
art_castCharset:
	incbin "art/art/cast/charset.puyo"
	even
art_tutorial:
	incbin "art/art/tutorial/tutorial.puyo"
	even
art_optionsCharset:
	incbin "art/art/options/charset.puyo"
	even
art_cutsceneHarpy:
	incbin "art/art/cutscene/stage4/harpy.puyo"
	even
	align $1000, $FF
art_ingameAssets:
	incbin "art/art/battle/puyos.puyo"
	even
	align $80, $FF
art_woodBoard:
	incbin "art/art/boards/wood.puyo"
	even
	align $80, $FF
art_puzzleBoard:
	incbin "art/art/boards/puzzle.puyo"
	even
	align $80, $FF
art_ruinsBoard:
	incbin "art/art/boards/ruins.puyo"
	even
	align $80, $FF
art_menuScreen:
	incbin "art/art/menu/menu.puyo"
	even
	align $80, $FF

; Todo: The padding here seems to be aligning certain files at the end of $8000 byte boundaries
; 		instead of the beginning of them.  This specifically affects the sound driver and 
;		the title screen graphics.

	align $8000, $FF
sound_bank1:
	include "sound/bank1/bank1.asm"

	align $C00, $FF
sound_driver:
	include "sound/driver.asm"

	align $8000, $FF
sound_bank2:
	include "sound/bank2/bank2.asm"

	pad $344, $FF	; Example of the above todo.
art_titleScreen:
	incbin "art/art/title/titlescreen.puyo"
	even

	align $80, $FF
	padToPowerOfTwo
endOfRom:
	END
